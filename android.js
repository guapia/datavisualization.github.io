var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var android;
(function (android) {
    var app;
    (function (app) {
        var Intent = (function () {
            function Intent() {
            }
            Intent.prototype.setClass = function (c, activityClass) {
                this.context = c;
                this.targetActivityClass = activityClass;
            };
            Intent.prototype.getClass = function () {
                return this.targetActivityClass;
            };
            Intent.prototype.getContext = function () {
                return this.context;
            };
            return Intent;
        }());
        app.Intent = Intent;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        /**
         * Point holds two integer coordinates
         */
        var Point = (function () {
            function Point(x, y) {
                if (!isNaN(x)) {
                    this.x = x;
                }
                else {
                    this.x = 0;
                }
                if (!isNaN(y)) {
                    this.y = y;
                }
                else {
                    this.y = 0;
                }
            }
            /**
             * Set the point's x and y coordinates
             */
            Point.prototype.set = function (x, y) {
                this.x = x;
                this.y = y;
            };
            /**
             * Negate the point's coordinates
             */
            Point.prototype.negate = function () {
                this.x = -this.x;
                this.y = -this.y;
            };
            /**
             * Offset the point's coordinates by dx, dy
             */
            Point.prototype.offset = function (dx, dy) {
                this.x += dx;
                this.y += dy;
            };
            /**
             * Returns true if the point's coordinates equal (x,y)
             */
            Point.prototype.equals = function (x, y) {
                return this.x == x && this.y == y;
            };
            Point.prototype.equalPoint = function (pt) {
                return this.equals(pt.x, pt.y);
            };
            Point.prototype.hashCode = function () {
                var result = this.x;
                result = 31 * result + this.y;
                return result;
            };
            Point.prototype.toString = function () {
                return "Point(" + this.x + ", " + this.y + ")";
            };
            /**
             * Parcelable interface methods
             */
            Point.prototype.describeContents = function () {
                return 0;
            };
            Point.prototype.clone = function () {
                return new Point(this.x, this.y);
            };
            return Point;
        }());
        graphics.Point = Point;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Rect = android.graphics.Rect;
        var Gravity;
        (function (Gravity) {
            Gravity[Gravity["Left"] = 0] = "Left";
            Gravity[Gravity["Center"] = 1] = "Center";
            Gravity[Gravity["Right"] = 2] = "Right";
            Gravity[Gravity["Top"] = 3] = "Top";
            Gravity[Gravity["Bottom"] = 4] = "Bottom";
            Gravity[Gravity["Auto"] = 5] = "Auto";
        })(Gravity = graphics.Gravity || (graphics.Gravity = {}));
        var Padding = (function () {
            function Padding(padding) {
                if (padding) {
                    this.padding = padding;
                }
                else {
                    this.padding = 0;
                }
            }
            Object.defineProperty(Padding.prototype, "padding", {
                set: function (padding) {
                    this.leftPadding = this.rightPadding = this.topPadding = this.bottomPadding = padding;
                },
                enumerable: true,
                configurable: true
            });
            return Padding;
        }());
        graphics.Padding = Padding;
        var Position;
        (function (Position) {
            Position[Position["Left"] = 0] = "Left";
            Position[Position["Top"] = 1] = "Top";
            Position[Position["Right"] = 2] = "Right";
            Position[Position["Bottom"] = 3] = "Bottom";
        })(Position = graphics.Position || (graphics.Position = {}));
        var Orientation;
        (function (Orientation) {
            Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
            Orientation[Orientation["Vertical"] = 1] = "Vertical";
        })(Orientation = graphics.Orientation || (graphics.Orientation = {}));
        var StrokeStyle = (function () {
            function StrokeStyle(strokewidth, strokecolor) {
                this.strokeWidth = strokewidth;
                this.strokeColor = strokecolor;
            }
            StrokeStyle.prototype.getCssStyle = function () {
                return {
                    'stroke-width': this.strokeWidth,
                    'stroke': this.strokeColor
                };
            };
            StrokeStyle.prototype.clone = function () {
                return new StrokeStyle(this.strokeWidth, this.strokeColor);
            };
            return StrokeStyle;
        }());
        graphics.StrokeStyle = StrokeStyle;
        var Font = (function () {
            function Font(fz, fm, fc) {
                this.fontSize = fz;
                this.fontFamily = fm;
                this.fontColor = fc;
                if (!this.fontFamily || this.fontFamily === "") {
                    this.fontFamily = 'Arial';
                }
            }
            Font.prototype.toString = function () {
                return " fontSize = " + this.fontSize + ", fontFamily = " + this.fontFamily + ", fontColor = " + this.fontFamily;
            };
            Font.prototype.clone = function () {
                return new Font(this.fontSize, this.fontFamily, this.fontColor);
            };
            return Font;
        }());
        graphics.Font = Font;
        var Style = (function () {
            function Style(bg, font, stroke) {
                this.background = bg;
                this.font = font;
                this.strokeStyle = stroke;
            }
            return Style;
        }());
        graphics.Style = Style;
        var Util = (function () {
            function Util() {
            }
            Util.cloneDeep = function (object) {
                if ((object == null) ||
                    (typeof object === 'number') ||
                    (typeof object === 'string') ||
                    (typeof object === 'boolean')) {
                    return object;
                }
                else if (Array.isArray(object)) {
                    var items = [];
                    for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
                        var item = object_1[_i];
                        items.push(Util.cloneDeep(item));
                    }
                    return items;
                }
                else if (object instanceof Date) {
                    return new Date(object.getTime());
                }
                else {
                    var cloneObject = {};
                    for (var key in object) {
                        if (typeof object[key] == 'function') {
                            cloneObject[key] = object[key];
                        }
                        else {
                            cloneObject[key] = Util.cloneDeep(object[key]);
                        }
                    }
                    return cloneObject;
                }
            };
            Util.contains = function (rect, pt) {
                if (pt.x <= rect.right && pt.x >= rect.left && pt.y <= rect.bottom && pt.y >= rect.top) {
                    return true;
                }
                return false;
            };
            Util.getRect = function (start, size) {
                var rect = new Rect(start.x, start.y, start.x + size.width, start.y + size.height);
                return rect;
            };
            Util.getStyleCss = function (style) {
                return {
                    "font-size": style.font ? style.font.fontSize : "",
                    "font-family": style.font ? style.font.fontFamily : "",
                    "font-color": style.font ? style.font.fontColor : "white",
                    "fill": style.background,
                    "stroke": style.strokeStyle ? style.strokeStyle.strokeColor : "",
                    "stroke-width": style.strokeStyle ? style.strokeStyle.strokeWidth : 0
                };
            };
            Util.union = function () {
                var rects = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    rects[_i] = arguments[_i];
                }
                var rect = new android.graphics.Rect(0, 0, 0, 0);
                rect.left = Math.min.apply(this, rects.map(function (e) { return e.left; }));
                rect.top = Math.min.apply(this, rects.map(function (e) { return e.top; }));
                rect.right = Math.max.apply(this, rects.map(function (e) { return e.right; }));
                rect.bottom = Math.max.apply(this, rects.map(function (e) { return e.bottom; }));
                return rect;
            };
            Util.hexToRgb = function (hex) {
                var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                    return r + r + g + g + b + b;
                });
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : null;
            };
            Util.rgbToHex = function (r, g, b) {
                return "#" + Util.componentToHex(r) + Util.componentToHex(g) + Util.componentToHex(b);
            };
            Util.componentToHex = function (c) {
                var hex = c.toString(16);
                return hex.length == 1 ? "0" + hex : hex;
            };
            Util.asEnum = function (value, enumType, nullOK) {
                if (nullOK === void 0) { nullOK = false; }
                if (value == null && nullOK)
                    return null;
                var e = enumType[value];
                return typeof (e) === 'number' ? e : value;
            };
            Util.isMixed = function (r1, r2) {
                var ismixed = false;
                if (Math.abs((r1.left + r1.right) / 2 - (r2.left + r2.right) / 2)
                    < ((r1.right + r2.right - r1.left - r2.left) / 2) && Math.abs((r1.top + r1.bottom) / 2
                    - (r2.top + r2.bottom) / 2) < ((r1.bottom + r2.bottom - r1.top - r2.top) / 2)) {
                    ismixed = true;
                }
                return ismixed;
            };
            Util.containsRect = function (r1, r2) {
                var flg = r1.left <= r2.left &&
                    r1.top <= r2.top &&
                    r1.right >= r2.right &&
                    r1.bottom >= r2.bottom;
                return flg;
            };
            return Util;
        }());
        graphics.Util = Util;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var device;
    (function (device) {
        var Device = (function () {
            function Device() {
            }
            Object.defineProperty(Device, "width", {
                get: function () {
                    // return 340;
                    if (Device._width == 0) {
                        Device._width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
                    }
                    return Device._width;
                },
                set: function (value) {
                    Device._width = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Device, "height", {
                get: function () {
                    // return 620;
                    if (Device._height == 0) {
                        Device._height = (window.innerHeight > 0) ?
                            window.innerHeight : screen.height;
                    }
                    return Device._height;
                },
                set: function (value) {
                    Device._height = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Device, "density", {
                get: function () {
                    if (Device._density === 0) {
                        Device._density = Math.sqrt(Device.width * Device.width + Device.height * Device.height) / 160;
                    }
                    // return Device._density;
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            return Device;
        }());
        Device._density = 0;
        Device._width = 0;
        Device._height = 0;
        device.Device = Device;
    })(device = android.device || (android.device = {}));
})(android || (android = {}));
var android;
(function (android) {
    var util;
    (function (util) {
        var Log = (function () {
            function Log() {
            }
            Log.d = function (message, tag) {
                console.log(message);
            };
            Log.w = function (message, tag) {
                console.warn(message);
            };
            Log.e = function (message, tag) {
                console.error(message);
            };
            return Log;
        }());
        util.Log = Log;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
/// <reference path="../graphics/Util.ts" />
var android;
(function (android) {
    var device;
    (function (device) {
        var Font = android.graphics.Font;
        var StrokeStyle = android.graphics.StrokeStyle;
        var Style = android.graphics.Style;
        var Default = (function () {
            function Default() {
            }
            Object.defineProperty(Default, "font", {
                get: function () {
                    return new Font(8, "", "white");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Default, "strokestyle", {
                get: function () {
                    return new StrokeStyle(1, 'black');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Default, "style", {
                get: function () {
                    return new Style('gray', Default.font, Default.strokestyle);
                },
                enumerable: true,
                configurable: true
            });
            return Default;
        }());
        device.Default = Default;
    })(device = android.device || (android.device = {}));
})(android || (android = {}));
/// <reference path="Point.ts" />
/// <reference path="Util.ts" />
/// <reference path="../device/Device.ts" />
/// <reference path="../util/Log.ts" />
/// <reference path="../device/Default.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Point = android.graphics.Point;
        var Device = android.device.Device;
        var Default = android.device.Default;
        var RenderType;
        (function (RenderType) {
            RenderType[RenderType["Canvas"] = 0] = "Canvas";
            RenderType[RenderType["Svg"] = 1] = "Svg";
        })(RenderType = graphics.RenderType || (graphics.RenderType = {}));
        var CanvasState = (function () {
            function CanvasState(x, y) {
                this.xOffset = 0;
                this.yOffset = 0;
                this.xOffset = x;
                this.yOffset = y;
            }
            return CanvasState;
        }());
        var Floor = function (value) { return Math.floor(1000 * value) / 1000; };
        var Canvas = (function () {
            function Canvas(element, type) {
                this.xOffset = 0;
                this.yOffset = 0;
                this.saveStates = [];
                this._hostElement = element;
                this._renderType = type;
                if (type === RenderType.Canvas) {
                    this._render = new graphics.CanvasRenderEngine(element);
                    element.style.width = Device.width + 'px';
                    element.style.height = Device.height + "px";
                    this._render.setViewportSize(Device.width, Device.height);
                }
                else if (type === RenderType.Svg) {
                    this._render = new graphics.SvgRenderEngine(element);
                    element.style.width = Device.width + 'px';
                    element.style.height = Device.height + "px";
                    this._render.setViewportSize(Device.width, Device.height);
                }
            }
            Canvas.prototype.save = function () {
                var state = new CanvasState(this.xOffset, this.yOffset);
                this.saveStates.push(state);
                this._render.save();
            };
            Canvas.prototype.clip = function (rect) {
                var r = rect.clone();
                r.translate(this.xOffset, this.yOffset);
                this._render.clip(rect);
                // console.log("clip  l = "+rect.left +" , t = "+ rect.top +" ,width = " + rect.width +" ,height = " + rect.height);
            };
            Canvas.prototype.restore = function () {
                this.saveStates.pop();
                var state = this.saveStates[this.saveStates.length - 1];
                if (state) {
                    this.xOffset = state.xOffset;
                    this.yOffset = state.yOffset;
                }
                else {
                    this.xOffset = 0;
                    this.yOffset = 0;
                }
                this._render.restore();
            };
            Canvas.prototype.setViewportSize = function (w, h) {
                this._render.setViewportSize(w, h);
            };
            Canvas.prototype.measureString = function (str, font, maxSize) {
                if (!font) {
                    font = Default.font.clone();
                }
                var f = font.clone();
                f.fontSize *= Device.density;
                return this._render.measureString(str, f, maxSize);
            };
            Canvas.prototype.measureStringWithWidth = function (str, font) {
            };
            Canvas.prototype.drawText = function (str, pt, f, center, angle) {
                if (!f) {
                    f = Default.font.clone();
                }
                var size = this.measureString(str, f);
                var font = f.clone();
                font.fontSize *= Device.density;
                var startpt = new Point(pt.x, pt.y + size.height);
                var tpt = pt.clone();
                // this.drawRect(tpt,new Point(tpt.x+size.width,tpt.y+size.height),true,'lightblue');
                if (this._renderType === RenderType.Canvas) {
                    if (angle != null) {
                        this._render.drawStringRotated(str, startpt, center, angle, font);
                    }
                    else {
                        this._render.drawString(str, startpt, font);
                    }
                }
                else {
                    startpt.offset(this.xOffset, this.yOffset);
                    if (angle != null) {
                        this._render.drawStringRotated(str, startpt, center, angle, null, { 'font-size': font.fontSize, 'font-family': font.fontFamily });
                    }
                    else {
                        this._render.drawString(str, startpt, null, { 'font-size': font.fontSize, 'font-family': font.fontFamily });
                    }
                }
            };
            Canvas.prototype.drawPosText = function (text, pos, font) {
                if (text.length * 2 > pos.length) {
                    throw "IndexOutOfBoundsException";
                }
                if (!font) {
                    font = Default.font;
                }
                if (this._renderType === RenderType.Canvas) {
                    var pt = new Point(0, 0);
                    for (var i = 0; i < pos.length; i += 2) {
                        pt.set(pos[i], pos[i + 1]);
                        // this._render.drawString(text[i],pt,font);
                        this.drawText(text[i / 2], pt, font);
                    }
                }
                else {
                }
            };
            Canvas.prototype.drawLine = function (pt1, pt2, strokestyle) {
                var stroke = null;
                if (strokestyle) {
                    stroke = strokestyle.clone();
                }
                else {
                    stroke = Default.strokestyle.clone();
                }
                var startpoint = pt1.clone();
                var endpoint = pt2.clone();
                if (this._renderType === RenderType.Canvas) {
                    this._render.drawLine(startpoint.x, startpoint.y, endpoint.x, endpoint.y, stroke);
                }
                else {
                    startpoint.offset(this.xOffset, this.yOffset);
                    endpoint.offset(this.xOffset, this.yOffset);
                    this._render.drawLine(startpoint.x, startpoint.y, endpoint.x, endpoint.y, stroke);
                }
            };
            Canvas.prototype.drawLines = function (xs, ys, strokestyle) {
                // drawLines(xs: number[], ys: number[], strokestyle: StrokeStyle) {
                var stroke = null;
                if (strokestyle) {
                    stroke = strokestyle.clone();
                }
                else {
                    stroke = Default.strokestyle.clone();
                }
                if (this._renderType === RenderType.Canvas) {
                    this._render.drawLines(xs, ys, stroke);
                }
                else {
                    stroke.transform = "translate(" + this.xOffset + "," + this.yOffset + ")";
                    this._render.drawLines(xs, ys, null, stroke.getCssStyle());
                }
            };
            Canvas.prototype.drawRect = function (pt1, pt2, fill, color) {
                var startpoint = pt1.clone();
                var endpoint = pt2.clone();
                if (this._renderType === RenderType.Canvas) {
                    this._render.drawRect(startpoint.x, startpoint.y, endpoint.x - startpoint.x, endpoint.y - startpoint.y, color, fill);
                }
                else {
                    startpoint.offset(this.xOffset, this.yOffset);
                    endpoint.offset(this.xOffset, this.yOffset);
                    if (fill) {
                        this._render.drawRect(startpoint.x, startpoint.y, endpoint.x - startpoint.x, endpoint.y - startpoint.y, null, { 'fill': color }, null);
                    }
                    else {
                        this._render.drawRect(startpoint.x, startpoint.y, endpoint.x - startpoint.x, endpoint.y - startpoint.y, null, { 'fill': 'transparent', 'stroke': color }, null);
                    }
                }
            };
            Canvas.prototype.drawArc = function (rect, startAngle, sweepAngel, color) {
                var cx = (rect.right - rect.left) / 2 + rect.left + this.xOffset;
                var cy = (rect.bottom - rect.top) / 2 + rect.top + this.yOffset;
                var r = (rect.width < rect.height ? rect.width : rect.height) / 2;
                if (this._renderType === RenderType.Svg) {
                    this._render.drawPie(cx, cy, r, Floor(startAngle), Floor(sweepAngel), null, { 'fill': color });
                }
                else {
                    this._render.drawPie(cx, cy, r, Floor(startAngle), Floor(sweepAngel), color);
                }
            };
            Canvas.prototype.drawDonut = function (cx, cy, radius, innerRadius, startAngle, sweepAngle, color) {
                var _cx = cx + this.xOffset;
                var _cy = cy + this.yOffset;
                if (this._renderType === RenderType.Svg) {
                    this._render.drawDonut(_cx, _cy, radius, innerRadius, Floor(startAngle), Floor(sweepAngle), null, { 'fill': color });
                }
                else {
                    this._render.drawDonut(_cx, _cy, radius, innerRadius, (startAngle), (sweepAngle), color);
                }
            };
            Canvas.prototype.drawOval = function (rect, color) {
            };
            Object.defineProperty(Canvas.prototype, "alpha", {
                // public alpha :number =0;
                set: function (value) {
                    this._render.alpha = value;
                },
                enumerable: true,
                configurable: true
            });
            Canvas.prototype.drawPolygon = function (xs, ys, color) {
                if (this._renderType === RenderType.Svg) {
                    this._render.drawPolygon(xs, ys, null, { 'fill': color });
                }
                else {
                    this._render.drawPolygon(xs, ys, color);
                }
            };
            Canvas.prototype.drawImage = function (x, y, w, h) {
                this._render.drawImage(x, y, w, h);
            };
            Canvas.prototype.getCache = function (sx, sy, sw, sh) {
                return this._render.getImageData(sx, sy, sw, sh);
            };
            Canvas.prototype.setCache = function (imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
                this._render.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
            };
            Canvas.prototype.begin = function () {
                this._render.beginRender();
            };
            Canvas.prototype.end = function () {
                this._render.endRender();
            };
            Canvas.prototype.moveTo = function (x, y) {
                if (this._renderType === RenderType.Canvas) {
                    this._render.moveTo(x, y);
                }
            };
            Canvas.prototype.scale = function (sx, sy) {
                console.log("canvasScale " + sx + " , " + sy);
                if (this._renderType === RenderType.Canvas) {
                    this._render.scale(sx, sy);
                }
            };
            Canvas.prototype.rotate = function (degree) {
                if (this._renderType === RenderType.Canvas) {
                    this._render.rotate(degree);
                }
            };
            Canvas.prototype.translate = function (x, y) {
                this.xOffset = x;
                this.yOffset = y;
                if (this._renderType === RenderType.Canvas) {
                    this._render.translate(x, y);
                }
            };
            return Canvas;
        }());
        graphics.Canvas = Canvas;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var app;
    (function (app) {
        var Context = (function () {
            function Context() {
            }
            return Context;
        }());
        app.Context = Context;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
/// <reference path="../../graphics/util.ts" />
/// <reference path="../../graphics/util.ts" />
/// <reference path="IView.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Size = (function () {
            function Size(w, h) {
                this.width = w;
                this.height = h;
            }
            Size.prototype.clone = function () {
                return new Size(this.width, this.height);
            };
            Size.prototype.hashCode = function () {
                return this.width * 37213 + this.height;
            };
            return Size;
        }());
        graphics.Size = Size;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Margin = (function () {
            function Margin(marginLeft, marginRight, marginTop, marginBottom) {
                this.marginLeft = marginLeft;
                this.marginTop = marginTop;
                this.marginRight = marginRight;
                this.marginBottom = marginBottom;
            }
            Margin.prototype.getStartXMargin = function () {
                if (this.marginRight > 0 && !this.marginLeft) {
                    return -this.marginRight;
                }
                return this.marginLeft;
            };
            Margin.prototype.getStartYMargin = function () {
                if (this.marginBottom > 0 && !this.marginTop) {
                    return -this.marginBottom;
                }
                return this.marginTop;
            };
            return Margin;
        }());
        graphics.Margin = Margin;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Point.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Point = android.graphics.Point;
        var Rect = (function () {
            function Rect(left, top, right, bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }
            Rect.prototype.reset = function (left, top, right, bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
                return this;
            };
            Rect.prototype.correct = function () {
                if (this.left > this.right) {
                    var l = this.left;
                    this.left = this.right;
                    this.right = l;
                }
                if (this.top > this.bottom) {
                    var t = this.top;
                    this.top = this.bottom;
                    this.bottom = t;
                }
            };
            Rect.prototype.translate = function (x, y) {
                this.left += x;
                this.right += x;
                this.top += y;
                this.bottom += y;
                return this;
            };
            Rect.prototype.translateX = function (x) {
                this.translate(x, 0);
                return this;
            };
            Rect.prototype.translateY = function (y) {
                this.translate(0, y);
                return this;
            };
            Rect.prototype.scale = function (r) {
                if (r < 1 && r > 0) {
                    var w = this.right - this.left;
                    var h = this.bottom - this.top;
                    this.left += r * w / 2;
                    this.top += r * h / 2;
                    this.right -= r * w / 2;
                    this.bottom -= r * h / 2;
                }
                else {
                    this.left += r;
                    this.top += r;
                    this.right -= r;
                    this.bottom -= r;
                }
                return this;
            };
            Object.defineProperty(Rect.prototype, "isNil", {
                get: function () {
                    return (this.right - this.left <= 0.01) ||
                        (this.bottom - this.top <= 0.01);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "height", {
                get: function () {
                    return ((this.bottom - this.top));
                },
                set: function (height) {
                    this.bottom = this.top + height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "width", {
                get: function () {
                    return ((this.right - this.left));
                },
                set: function (width) {
                    this.right = this.left + width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "startPoint", {
                get: function () {
                    if (!this._startpoint) {
                        this._startpoint = new Point(this.left, this.top);
                    }
                    this._startpoint.x = this.left;
                    this._startpoint.y = this.top;
                    return this._startpoint;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "endPoint", {
                get: function () {
                    if (!this._endpoint) {
                        this._endpoint = new Point(this.right, this.bottom);
                    }
                    this._endpoint.x = this.right;
                    this._endpoint.y = this.bottom;
                    return this._endpoint;
                },
                enumerable: true,
                configurable: true
            });
            Rect.prototype.contains = function (x, y) {
                if (x <= this.right && x >= this.left && y <= this.bottom && y >= this.top) {
                    return true;
                }
                return false;
            };
            Rect.prototype.clone = function () {
                return new Rect(this.left, this.top, this.right, this.bottom);
            };
            Rect.prototype.equal = function (rect) {
                if (rect != null) {
                    return rect.left === this.left && rect.top === this.top && rect.bottom === this.bottom && rect.right === this.right;
                }
                return false;
            };
            return Rect;
        }());
        graphics.Rect = Rect;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="../../graphics/Margins.ts" />
/// <reference path="../../graphics/Rect.ts" />
var android;
(function (android) {
    var view;
    (function (view) {
        var Rect = android.graphics.Rect;
        var Padding = android.graphics.Padding;
        var Margin = android.graphics.Margin;
        /***
         * 根据measure 计算出的结果
         */
        var LayoutInfo = (function () {
            function LayoutInfo(l, t, r, b, padding, drawindex) {
                this.outterrect = new Rect(l, t, r, b);
                this.innerrect = new Rect(this.outterrect.left + padding.leftPadding, this.outterrect.top + padding.topPadding, this.outterrect.right - padding.rightPadding, this.outterrect.bottom - padding.bottomPadding);
                if (drawindex) {
                    this.drawindex = drawindex;
                }
                else {
                    this.drawindex = 0;
                }
            }
            LayoutInfo.prototype.reset = function (l, t, r, b, padding, drawindex) {
                this.outterrect = new Rect(l, t, r, b);
                this.innerrect = new Rect(this.outterrect.left + padding.leftPadding, this.outterrect.top + padding.topPadding, this.outterrect.right - padding.rightPadding, this.outterrect.bottom - padding.bottomPadding);
                if (drawindex) {
                    this.drawindex = drawindex;
                }
                else {
                    this.drawindex = 0;
                }
            };
            LayoutInfo.prototype.offset = function (x, y) {
                this.innerrect.translate(x, y);
                this.outterrect.translate(x, y);
            };
            LayoutInfo.prototype.clone = function () {
                var info = new LayoutInfo(0, 0, 0, 0, new Padding(0));
                info.drawindex = this.drawindex;
                info.innerrect = this.innerrect.clone();
                info.outterrect = this.outterrect.clone();
                return info;
            };
            LayoutInfo.prototype.equal = function (info) {
                if (info != null) {
                    return info.drawindex === this.drawindex && this.innerrect.equal(info.innerrect) && this.outterrect.equal(info.outterrect);
                }
                return false;
            };
            return LayoutInfo;
        }());
        view.LayoutInfo = LayoutInfo;
        /***
         * 输入的参数
         */
        var LayoutParams = (function () {
            function LayoutParams(width, height, margin) {
                this.margin = new Margin(0, 0, 0, 0); // { 'marginLeft': 0, 'marginRight': 0, 'marginTop': 0, 'marginBottom': 0 };
                this.width = width;
                this.height = height;
                if (margin) {
                    this.margin = margin;
                }
            }
            Object.defineProperty(LayoutParams.prototype, "width", {
                get: function () {
                    if (this._width < 0) {
                        return 0;
                    }
                    return this._width;
                },
                set: function (w) {
                    this._width = w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LayoutParams.prototype, "widthMode", {
                get: function () {
                    var mode = LayoutParams.EXACTLY;
                    switch (this._width) {
                        case LayoutParams.WRAP_CONTENT:
                            mode = LayoutParams.WRAP_CONTENT;
                            break;
                        case LayoutParams.MATCH_PARENT:
                            mode = LayoutParams.MATCH_PARENT;
                            break;
                        case LayoutParams.EXACTLY:
                        default:
                            mode = LayoutParams.EXACTLY;
                            break;
                    }
                    return mode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LayoutParams.prototype, "heightMode", {
                get: function () {
                    var mode = LayoutParams.EXACTLY;
                    switch (this._height) {
                        case LayoutParams.WRAP_CONTENT:
                            mode = LayoutParams.WRAP_CONTENT;
                            break;
                        case LayoutParams.MATCH_PARENT:
                            mode = LayoutParams.MATCH_PARENT;
                            break;
                        case LayoutParams.EXACTLY:
                        default:
                            mode = LayoutParams.EXACTLY;
                            break;
                    }
                    return mode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LayoutParams.prototype, "height", {
                get: function () {
                    if (this._height < 0) {
                        return 0;
                    }
                    return this._height;
                },
                set: function (h) {
                    this._height = h;
                },
                enumerable: true,
                configurable: true
            });
            return LayoutParams;
        }());
        LayoutParams.MATCH_PARENT = -1;
        LayoutParams.WRAP_CONTENT = -2;
        LayoutParams.EXACTLY = -3;
        view.LayoutParams = LayoutParams;
        var MeasureSpec = (function () {
            function MeasureSpec(v, m) {
                this.mode = LayoutParams.EXACTLY;
                if (v !== undefined) {
                    this.value = v;
                }
                if (m !== undefined) {
                    this.mode = m;
                }
            }
            MeasureSpec.prototype.getMeasureValue = function () {
                switch (this.mode) {
                    case LayoutParams.MATCH_PARENT:
                    case LayoutParams.EXACTLY:
                        return this.value;
                    case LayoutParams.WRAP_CONTENT:
                    default:
                        if (this.value) {
                            return this.value;
                        }
                        return LayoutParams.WRAP_CONTENT;
                }
            };
            return MeasureSpec;
        }());
        view.MeasureSpec = MeasureSpec;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var event;
        (function (event) {
            var MotionEvent = (function () {
                function MotionEvent(x, y, action) {
                    this._x = x;
                    this._y = y;
                    this.screenX = x;
                    this.screenY = y;
                    this._action = action;
                }
                Object.defineProperty(MotionEvent.prototype, "x", {
                    get: function () {
                        return this._x;
                    },
                    set: function (v) {
                        this._x = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MotionEvent.prototype, "y", {
                    get: function () {
                        return this._y;
                    },
                    set: function (v) {
                        this._y = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MotionEvent.prototype, "action", {
                    get: function () {
                        return this._action;
                    },
                    set: function (value) {
                        this._action = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                MotionEvent.prototype.clone = function () {
                    return new MotionEvent(this._x, this._y, this._action);
                };
                MotionEvent.prototype.offset = function (x, y) {
                    this._x += x;
                    this._y += y;
                    this.screenX += x;
                    this.screenY += y;
                };
                MotionEvent.prototype.toString = function () {
                    return " x = " + this._x + " , y = " + this._y + " , action = " + this._getaction();
                };
                MotionEvent.prototype._getaction = function () {
                    switch (this._action) {
                        case 0:
                            return "ACTION_OUTSIDE";
                        case 1:
                            return "ACTION_UP";
                        case 2:
                            return "ACTION_MOVE";
                        case 3:
                            return "ACTION_CANCEL";
                        case 4:
                            return "ACTION_OUTSIDE";
                        case 5:
                            return "ACTION_MOUSE_DOWN";
                        case 6:
                            return "ACTION_MOUSE_MOVE";
                        case 7:
                            return "ACTION_MOUSE_UP";
                        case 8:
                            return "ACTION_MOUSE_OVER";
                        case 9:
                            return "ACTION_MOUSE_OUT";
                        case 10:
                            return "ACTION_CLICK";
                        case 11:
                            return "ACTION_MOUSE_ON";
                    }
                };
                return MotionEvent;
            }());
            MotionEvent.ACTION_DOWN = 0;
            MotionEvent.ACTION_UP = 1;
            MotionEvent.ACTION_MOVE = 2;
            MotionEvent.ACTION_CANCEL = 3;
            MotionEvent.ACTION_OUTSIDE = 4;
            MotionEvent.ACTION_MOUSE_DOWN = 5;
            MotionEvent.ACTION_MOUSE_MOVE = 6;
            MotionEvent.ACTION_MOUSE_UP = 7;
            MotionEvent.ACTION_MOUSE_OVER = 8;
            MotionEvent.ACTION_MOUSE_OUT = 9;
            MotionEvent.ACTION_MOUSE_ON = 11;
            MotionEvent.ACTION_CLICK = 10;
            event.MotionEvent = MotionEvent;
        })(event = view.event || (view.event = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view_1) {
        var animation;
        (function (animation) {
            var AnimationState;
            (function (AnimationState) {
                AnimationState[AnimationState["BeforeStart"] = 0] = "BeforeStart";
                AnimationState[AnimationState["Animating"] = 1] = "Animating";
                AnimationState[AnimationState["End"] = 2] = "End";
            })(AnimationState = animation.AnimationState || (animation.AnimationState = {}));
            var Animation = (function () {
                function Animation() {
                    this.duration = 0;
                    this.ease = new animation.AnimationEase();
                    this.start = 0;
                    this.duration = 0;
                    this.type = animation.AnimationType.Alpha;
                    this.from = 1;
                    this.to = 1;
                    this.state = AnimationState.BeforeStart;
                    this.fillAfter = false;
                }
                Object.defineProperty(Animation.prototype, "isAniamtionEnd", {
                    get: function () {
                        return this.start + this.duration < Date.now();
                    },
                    enumerable: true,
                    configurable: true
                });
                Animation.prototype.scale = function (now) {
                    console.log("ease " + ((now - this.start) / this.duration));
                    return this.ease.ease((now - this.start) / this.duration);
                };
                Animation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                    console.log("applyTransformation " + interpolatedTime + " canvas " + canvas + " View " + view);
                };
                Animation.prototype.onStartAniamtion = function (canvas, view) {
                };
                Animation.prototype.onEndAnimation = function (canvas, view) {
                };
                return Animation;
            }());
            animation.Animation = Animation;
        })(animation = view_1.animation || (view_1.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var animation;
        (function (animation) {
            var AnimationEase = (function () {
                function AnimationEase() {
                }
                AnimationEase.prototype.ease = function (t) {
                    return t;
                };
                return AnimationEase;
            }());
            animation.AnimationEase = AnimationEase;
            var BounceAnimationEase = (function (_super) {
                __extends(BounceAnimationEase, _super);
                function BounceAnimationEase() {
                    return _super.apply(this, arguments) || this;
                }
                BounceAnimationEase.prototype.ease = function (t) {
                    var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
                    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
                };
                return BounceAnimationEase;
            }(AnimationEase));
            animation.BounceAnimationEase = BounceAnimationEase;
            var SinAnimationEase = (function (_super) {
                __extends(SinAnimationEase, _super);
                function SinAnimationEase() {
                    return _super.apply(this, arguments) || this;
                }
                SinAnimationEase.prototype.ease = function (t) {
                    var pi = Math.PI, halfPi = pi / 2;
                    return Math.sin(t * halfPi);
                };
                return SinAnimationEase;
            }(AnimationEase));
            animation.SinAnimationEase = SinAnimationEase;
            var QuadAnimationEase = (function (_super) {
                __extends(QuadAnimationEase, _super);
                function QuadAnimationEase() {
                    return _super.apply(this, arguments) || this;
                }
                QuadAnimationEase.prototype.ease = function (t) {
                    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
                };
                return QuadAnimationEase;
            }(AnimationEase));
            animation.QuadAnimationEase = QuadAnimationEase;
        })(animation = view.animation || (view.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
/// <reference path="../../graphics/Size.ts" />
/// <reference path="../interface/IView.ts" />
/// <reference path="./LayoutInfo.ts" />
/// <reference path="../event/MotionEvent.ts" />
/// <reference path="../../util/Log.ts" />
/// <reference path="../animation/Animation.ts" />
/// <reference path="../animation/AnimationEase.ts" />
var android;
(function (android) {
    var view;
    (function (view) {
        var Padding = android.graphics.Padding;
        var Size = android.graphics.Size;
        var Gravity = android.graphics.Gravity;
        // public static  VISIABLE :number= 1; 
        // public static  INVISIABLE :number = -1;
        // public static  GONE :number = 0;
        var ViewState;
        (function (ViewState) {
            ViewState[ViewState["Visiable"] = 0] = "Visiable";
            ViewState[ViewState["InVisiable"] = 1] = "InVisiable";
            ViewState[ViewState["Gone"] = 2] = "Gone";
        })(ViewState = view.ViewState || (view.ViewState = {}));
        var View = (function () {
            function View(context) {
                this._padding = new Padding();
                this.layoutParams = new view.LayoutParams(0, 0, null);
                this._parent = null;
                this._drawingTime = 0;
                this.offsetleft = 0;
                this.offsettop = 0;
                this.visiable = ViewState.Visiable;
                this._context = context;
                this._gravity = Gravity.Left;
            }
            View.prototype.getContext = function () {
                return this._context;
            };
            /**
             * may be called for serval times
             */
            View.prototype.onMeasure = function (width, height, canvas) {
                this._layoutInfo = new view.LayoutInfo(0, 0, 0, 0, this.padding, 0);
                var w = this.layoutParams.width;
                var h = this.layoutParams.height;
                var size = new Size(w, h);
                var widthmode = this.layoutParams.widthMode;
                var heightmode = this.layoutParams.heightMode;
                if (widthmode === view.LayoutParams.MATCH_PARENT) {
                    size.width = width.value;
                }
                if (heightmode === view.LayoutParams.MATCH_PARENT) {
                    size.height = height.value;
                }
                this.setMeasuredDimension(new view.MeasureSpec(size.width, view.LayoutParams.EXACTLY), new view.MeasureSpec(size.height, view.LayoutParams.EXACTLY));
                return size;
            };
            View.prototype.getDrawingTime = function () {
                if (this.parent != null) {
                    return this._drawingTime;
                }
                else {
                    return Date.now();
                }
            };
            View.prototype.setDrawingTime = function (value) {
                this._drawingTime = value;
            };
            View.prototype.onLayout = function (l, t, r, b, canvas) {
                if (this.layoutInfo != null) {
                    this._oldLayoutInfo = this.layoutInfo.clone();
                }
                this.layoutInfo.reset(l + this.offsetleft, t + this.offsettop, r + this.offsetleft, b + this.offsettop, this.padding, 0);
            };
            View.prototype.islayoutChanged = function () {
                return !this.layoutInfo.equal(this._oldLayoutInfo);
            };
            View.prototype.onDraw = function (canvas) {
                if (this.visiable != ViewState.Visiable) {
                    return;
                }
                this._canvas = canvas;
                if (this.background) {
                    canvas.drawRect(this._layoutInfo.outterrect.startPoint, this._layoutInfo.outterrect.endPoint, true, this.background);
                }
            };
            View.prototype.setMeasuredDimension = function (width, height) {
                this._width = width;
                this._height = height;
            };
            View.prototype.onTouchEvent = function (event) {
                return false;
            };
            View.prototype.onMouseEvent = function (event) {
                return false;
            };
            View.prototype.invalidate = function (force) {
                force = true;
                if (force) {
                    if (this.parent) {
                        this.parent.invalidate(force);
                    }
                    else {
                        this.oninvalidate();
                    }
                }
                else {
                    this.parent.invalidateChild(this, this.layoutInfo.outterrect);
                    this.oninvalidate();
                }
            };
            View.prototype.getRootView = function () {
                if (this.parent != null) {
                    var parent_1 = this.parent;
                    do {
                        parent_1 = parent_1.parent;
                    } while (parent_1.parent != null);
                    return parent_1;
                }
                return this;
            };
            View.prototype.oninvalidate = function () {
            };
            View.prototype.requestLayout = function () {
                if (this.parent) {
                    this.parent.requestLayout();
                }
            };
            View.prototype.startAnimation = function (animation) {
                if (this.animation == null || this.animation.isAniamtionEnd) {
                    this.animation = animation;
                    if (this.animation != null) {
                        this.getRootView().startAnimation(animation);
                    }
                    this.invalidate(false);
                }
            };
            View.prototype.setParent = function (p) {
                this._parent = p;
            };
            View.prototype.offset = function (left, top) {
                this.offsetleft += left;
                this.offsettop += top;
                if (isNaN(left) || isNaN(this.offsetleft)) {
                    console.log("offset error");
                    throw "offset error ";
                }
                // this.layoutInfo.offset(left,top);
            };
            Object.defineProperty(View.prototype, "parent", {
                get: function () {
                    return this._parent;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "width", {
                get: function () {
                    return this._width.getMeasureValue();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "height", {
                get: function () {
                    return this._height.getMeasureValue();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "padding", {
                get: function () {
                    return this._padding;
                },
                set: function (padding) {
                    this._padding = padding;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "left", {
                get: function () {
                    return this._layoutInfo.outterrect.left;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "top", {
                get: function () {
                    return this._layoutInfo.outterrect.top;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "right", {
                get: function () {
                    return this._layoutInfo.outterrect.right;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "bottom", {
                get: function () {
                    return this._layoutInfo.outterrect.bottom;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "background", {
                get: function () {
                    return this._background;
                },
                set: function (background) {
                    this._background = background;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "layoutInfo", {
                get: function () {
                    if (!this._layoutInfo) {
                        this._layoutInfo = new view.LayoutInfo(0, 0, 0, 0, this.padding, 0);
                    }
                    return this._layoutInfo;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "gravity", {
                get: function () {
                    return this._gravity;
                },
                set: function (gravity) {
                    this._gravity = gravity;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "clip", {
                get: function () {
                    return this._clip;
                },
                set: function (value) {
                    this._clip = value;
                },
                enumerable: true,
                configurable: true
            });
            return View;
        }());
        view.View = View;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
/// <reference path="../../graphics/Util.ts" />
/// <reference path="../interface/IViewGroup.ts" />
/// <reference path="View.ts" />
var android;
(function (android) {
    var view;
    (function (view_2) {
        var Size = android.graphics.Size;
        var MotionEvent = android.view.event.MotionEvent;
        var Util = android.graphics.Util;
        var AnimationState = android.view.animation.AnimationState;
        var ViewGroup = (function (_super) {
            __extends(ViewGroup, _super);
            function ViewGroup() {
                var _this = _super.apply(this, arguments) || this;
                _this.children = new Array();
                _this._mCurrentTouchTarget = null;
                _this._isIntercept = false;
                _this.lastInterceptEvent = [];
                return _this;
                // public dispatchMouseEvent(event: MotionEvent): boolean {
                //     if (!this._mCurrentTouchTarget || this._mCurrentTouchTarget instanceof ViewGroup) {
                //         let result: boolean = false;
                //         switch (event.action) {
                //             case MotionEvent.ACTION_MOUSE_DOWN:
                //                 if (!this._mCurrentTouchTarget) {
                //                     for (let i = 0; this.children && i < this.children.length; ++i) {
                //                         let child: View = this.children[i];
                //                         if (child) {
                //                             if (child.layoutInfo.outterrect.contains(event.x, event.y)) {
                //                                 this._mCurrentTouchTarget = child;
                //                             }
                //                         }
                //                     }
                //                 }
                //                 if (!this._mCurrentTouchTarget) {
                //                     return true;
                //                 }
                //                 if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                //                     result = true;
                //                 } else {
                //                     result = this._mCurrentTouchTarget.onInterceptMouseEvent(event);
                //                 }
                //                 if (result) {
                //                     this._mCurrentTouchTarget.onMouseEvent(event);
                //                     this._isIntercept = result;
                //                     return true;
                //                 } else {
                //                     this.lastInterceptEvent.push(event.clone());//记录down时候的event
                //                     return false;
                //                 }
                //             case MotionEvent.ACTION_MOUSE_MOVE:
                //                 if (this._mCurrentTouchTarget) {
                //                     if (this._isIntercept) {
                //                         this._mCurrentTouchTarget.onMouseEvent(event);
                //                         return true;
                //                     }
                //                     if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                //                         result = true;
                //                     } else {
                //                         result = this._mCurrentTouchTarget.onInterceptMouseEvent(event);
                //                     }
                //                     if (result) {
                //                         this._isIntercept = result;
                //                         this.lastInterceptEvent.forEach(e => {
                //                             this._mCurrentTouchTarget.onMouseEvent(e);
                //                         });
                //                         this.lastInterceptEvent.length = 0;
                //                         this._mCurrentTouchTarget.onMouseEvent(event);
                //                         return true;
                //                     } else {
                //                         this.lastInterceptEvent.forEach(e => {
                //                             if (this._mCurrentTouchTarget instanceof ViewGroup) {
                //                                 this._mCurrentTouchTarget.dispatchMouseEvent(e);
                //                             }
                //                         });
                //                         this.lastInterceptEvent.length = 0;
                //                         if (this._mCurrentTouchTarget instanceof ViewGroup) {
                //                             return this._mCurrentTouchTarget.dispatchMouseEvent(event);
                //                         } else {
                //                             return false;
                //                         }
                //                     }
                //                 }
                //             case MotionEvent.ACTION_MOUSE_OUT:
                //             case MotionEvent.ACTION_MOUSE_UP:
                //                 if (this._mCurrentTouchTarget) {
                //                     this.lastInterceptEvent.forEach(e => {
                //                         if (this._isIntercept) {
                //                             this._mCurrentTouchTarget.onMouseEvent(e);
                //                         } else {
                //                             this._mCurrentTouchTarget.dispatchMouseEvent(e);
                //                         }
                //                     });
                //                     if (this._isIntercept) {
                //                         this._mCurrentTouchTarget.onMouseEvent(event);
                //                         result = true;
                //                     } else {
                //                         result = this._mCurrentTouchTarget.dispatchMouseEvent(event);
                //                     }
                //                     this._mCurrentTouchTarget = null;
                //                     this.lastInterceptEvent.length = 0;
                //                     this._isIntercept = false;
                //                     return result;
                //                 }
                //         }
                //     }
                //     return false;
                // }
            }
            ViewGroup.prototype.dispatchDraw = function (canvas) {
                var item;
                for (var i = 0; i < this.children.length; ++i) {
                    item = this.children[i];
                    item.setDrawingTime(this.getDrawingTime());
                    if (item.visiable != view_2.ViewState.Visiable) {
                        continue;
                    }
                    if (item.clip === undefined) {
                        item.clip = this.clip;
                    }
                    if (item.clip === true || item.clip === undefined) {
                        canvas.save();
                        canvas.clip(item.layoutInfo.outterrect);
                        this.drawChild(canvas, item);
                        canvas.restore();
                    }
                    else {
                        this.drawChild(canvas, item);
                    }
                }
            };
            ViewGroup.prototype.drawChild = function (canvas, view) {
                if (view.animation != null && !view.animation.isAniamtionEnd) {
                    canvas.save();
                    if (view.animation.state === AnimationState.BeforeStart) {
                        view._layoutInfo = view._oldLayoutInfo.clone();
                        view.animation.onStartAniamtion(canvas, view);
                        view.animation.state = AnimationState.Animating;
                    }
                    view.animation.applyTransformation(view.animation.scale(this.getDrawingTime()), canvas, view);
                    view.onDraw(canvas);
                    if (view instanceof ViewGroup) {
                        view.dispatchDraw(canvas);
                    }
                    canvas.restore();
                }
                else {
                    if (view.animation != null && view.animation.isAniamtionEnd && view.animation.state != AnimationState.End) {
                        view.animation.state = AnimationState.End;
                        view.animation.onEndAnimation(canvas, view);
                        if (!view.animation.fillAfter) {
                            view._layoutInfo = view._oldLayoutInfo.clone();
                        }
                    }
                    view.onDraw(canvas);
                    if (view instanceof ViewGroup) {
                        view.dispatchDraw(canvas);
                    }
                }
            };
            ViewGroup.prototype.oninvalidate = function () {
                for (var i = 0; i < this.children.length; ++i) {
                    this.children[i].oninvalidate();
                }
            };
            ViewGroup.prototype.invalidateChild = function (child, dirty) {
                if (Util.containsRect(this.layoutInfo.outterrect, dirty)) {
                    var newdirty = Util.union(dirty, this.layoutInfo.outterrect);
                    this.parent.invalidateChild(this, newdirty);
                    this.oninvalidate();
                }
                else {
                    this.dispatchDraw(this._canvas);
                }
            };
            ViewGroup.prototype.getChildCount = function () {
                return this.children.length;
            };
            ViewGroup.prototype.getChildAt = function (index) {
                return this.children[index];
            };
            ViewGroup.prototype.getSortViews = function () {
                return this.children;
            };
            ViewGroup.prototype.onLayout = function (l, t, r, b, canvas) {
                _super.prototype.onLayout.call(this, l, t, r, b, canvas);
            };
            ViewGroup.prototype.onMeasure = function (width, height, canvas) {
                var maxSize;
                // return super.onMeasure(width,height,canvas);
                for (var i = 0; i < this.children.length; ++i) {
                    var item = this.children[i];
                    var lp = item.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    //TO DO...
                    if (lp.heightMode === view_2.LayoutParams.MATCH_PARENT) {
                        h = height.value - item.layoutParams.margin.marginTop - item.layoutParams.margin.marginBottom - this.padding.topPadding - this.padding.bottomPadding;
                    }
                    if (lp.widthMode === view_2.LayoutParams.MATCH_PARENT) {
                        w = width.value - item.layoutParams.margin.marginLeft - item.layoutParams.margin.marginRight - this.padding.leftPadding - this.padding.rightPadding;
                    }
                    var size = item.onMeasure(new view_2.MeasureSpec(w, lp.widthMode), new view_2.MeasureSpec(h, lp.heightMode), canvas);
                    if (item.visiable === view_2.ViewState.Gone) {
                        size = new Size(0, 0);
                    }
                    if (maxSize) {
                        if (maxSize.width < size.width) {
                            maxSize.width = size.width;
                        }
                        if (maxSize.height < size.height) {
                            maxSize.height = size.height;
                        }
                    }
                    else {
                        maxSize = size;
                    }
                }
                if (!maxSize) {
                    maxSize = new Size(0, 0);
                }
                if (this.layoutParams.widthMode === view_2.LayoutParams.EXACTLY) {
                    maxSize.width = this.layoutParams.width;
                }
                else if (this.layoutParams.widthMode === view_2.LayoutParams.MATCH_PARENT) {
                    maxSize.width = width.getMeasureValue();
                }
                if (this.layoutParams.heightMode === view_2.LayoutParams.EXACTLY) {
                    maxSize.height = this.layoutParams.height;
                }
                else if (this.layoutParams.heightMode === view_2.LayoutParams.MATCH_PARENT) {
                    maxSize.height = height.getMeasureValue();
                }
                this.setMeasuredDimension(new view_2.MeasureSpec(maxSize.width, view_2.LayoutParams.EXACTLY), new view_2.MeasureSpec(maxSize.height, view_2.LayoutParams.EXACTLY));
                return maxSize;
            };
            ViewGroup.prototype.addView = function (view, index, layoutParams) {
                if (index === void 0) { index = 0; }
                if (layoutParams === void 0) { layoutParams = null; }
                this.addViewWithOutReLayout(view, index, layoutParams);
                this.requestLayout();
                return index;
            };
            ViewGroup.prototype.addViewWithOutReLayout = function (view, index, layoutParams) {
                if (index === void 0) { index = 0; }
                if (layoutParams === void 0) { layoutParams = null; }
                this.children.push(view);
                if (index !== undefined && index !== null && index >= 0) {
                    view.layoutInfo.drawindex = index;
                }
                else {
                    view.layoutInfo.drawindex = this.children.length - 1;
                }
                if (layoutParams != null) {
                    view.layoutParams = layoutParams;
                }
                view.setParent(this);
                return index;
            };
            ViewGroup.prototype.removeAllViews = function () {
                this.children.length = 0;
            };
            ViewGroup.prototype.removeView = function (view) {
                var index = this.children.indexOf(view);
                this.children.splice(index, 1);
                view.setParent(null);
            };
            ViewGroup.prototype.onInterceptTouchEvent = function (event) {
                return false;
            };
            ViewGroup.prototype.dispatchTouchEvent = function (event) {
                var _this = this;
                if (!this._mCurrentTouchTarget || this._mCurrentTouchTarget instanceof ViewGroup) {
                    var result = false;
                    switch (event.action) {
                        case MotionEvent.ACTION_DOWN:
                            if (!this._mCurrentTouchTarget) {
                                for (var i = 0; this.children && i < this.children.length; ++i) {
                                    var child = this.children[i];
                                    if (child) {
                                        if (child.layoutInfo.outterrect.contains(event.x, event.y)) {
                                            this._mCurrentTouchTarget = child;
                                        }
                                    }
                                }
                            }
                            if (!this._mCurrentTouchTarget) {
                                return true;
                            }
                            if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                                result = true;
                            }
                            else {
                                result = this._mCurrentTouchTarget.onInterceptTouchEvent(event);
                            }
                            if (result) {
                                this._mCurrentTouchTarget.onTouchEvent(event);
                                this._isIntercept = result;
                                return true;
                            }
                            else {
                                this.lastInterceptEvent.push(event.clone()); //记录down时候的event
                                return false;
                            }
                        case MotionEvent.ACTION_MOVE:
                            if (this._mCurrentTouchTarget) {
                                if (this._isIntercept) {
                                    this._mCurrentTouchTarget.onTouchEvent(event);
                                    return true;
                                }
                                if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                                    result = true;
                                }
                                else {
                                    result = this._mCurrentTouchTarget.onInterceptTouchEvent(event);
                                }
                                if (result) {
                                    this._isIntercept = result;
                                    this.lastInterceptEvent.forEach(function (e) {
                                        _this._mCurrentTouchTarget.onTouchEvent(e);
                                    });
                                    this.lastInterceptEvent.length = 0;
                                    this._mCurrentTouchTarget.onTouchEvent(event);
                                    return true;
                                }
                                else {
                                    this.lastInterceptEvent.forEach(function (e) {
                                        if (_this._mCurrentTouchTarget instanceof ViewGroup) {
                                            _this._mCurrentTouchTarget.dispatchTouchEvent(e);
                                        }
                                    });
                                    this.lastInterceptEvent.length = 0;
                                    if (this._mCurrentTouchTarget instanceof ViewGroup) {
                                        return this._mCurrentTouchTarget.dispatchTouchEvent(event);
                                    }
                                    else {
                                        return false;
                                    }
                                }
                            }
                        case MotionEvent.ACTION_UP:
                        case MotionEvent.ACTION_CANCEL:
                            if (this._mCurrentTouchTarget) {
                                this.lastInterceptEvent.forEach(function (e) {
                                    if (_this._isIntercept) {
                                        _this._mCurrentTouchTarget.onTouchEvent(e);
                                    }
                                    else {
                                        _this._mCurrentTouchTarget.dispatchTouchEvent(e);
                                    }
                                });
                                if (this._isIntercept) {
                                    this._mCurrentTouchTarget.onTouchEvent(event);
                                    result = true;
                                }
                                else {
                                    result = this._mCurrentTouchTarget.dispatchTouchEvent(event);
                                }
                                this._mCurrentTouchTarget = null;
                                this.lastInterceptEvent.length = 0;
                                this._isIntercept = false;
                                return result;
                            }
                    }
                }
                return false;
            };
            ViewGroup.prototype.onInterceptMouseEvent = function (event) {
                return false;
            };
            ViewGroup.prototype.onMouseEvent = function (event) {
                return false;
            };
            ViewGroup.prototype.dispatchMouseEvent = function (event) {
                if (event.action === MotionEvent.ACTION_MOUSE_OUT || event.action === MotionEvent.ACTION_MOUSE_UP) {
                    if (this._mCurrentTouchTarget != null) {
                        var out_event = event.clone();
                        out_event.action = MotionEvent.ACTION_MOUSE_OUT;
                        this._mCurrentTouchTarget.onMouseEvent(out_event);
                    }
                    this._mCurrentTouchTarget = null;
                }
                if (this._mCurrentTouchTarget == null) {
                    for (var i = 0; this.children && i < this.children.length; ++i) {
                        var child = this.children[i];
                        if (child) {
                            if (child.layoutInfo.outterrect.contains(event.x, event.y)) {
                                this._mCurrentTouchTarget = child;
                            }
                        }
                    }
                    if (this._mCurrentTouchTarget != null) {
                        var on_event = event.clone();
                        on_event.action = MotionEvent.ACTION_MOUSE_ON;
                        if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                            return this._mCurrentTouchTarget.onMouseEvent(on_event);
                        }
                        if (this._mCurrentTouchTarget.onInterceptMouseEvent(on_event)) {
                            return this._mCurrentTouchTarget.onMouseEvent(on_event);
                        }
                        else {
                            return this._mCurrentTouchTarget.dispatchMouseEvent(on_event);
                        }
                    }
                }
                else {
                    if (!this._mCurrentTouchTarget.layoutInfo.outterrect.contains(event.x, event.y)) {
                        var out_event = event.clone();
                        out_event.action = MotionEvent.ACTION_MOUSE_OUT;
                        var flg = this._mCurrentTouchTarget.onMouseEvent(out_event);
                        this._mCurrentTouchTarget = null;
                        return flg;
                    }
                }
                if (this._mCurrentTouchTarget == null) {
                    return this.onMouseEvent(event);
                }
                if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                    return this._mCurrentTouchTarget.onMouseEvent(event);
                }
                if (this._mCurrentTouchTarget.onInterceptMouseEvent(event)) {
                    return this._mCurrentTouchTarget.onMouseEvent(event);
                }
                else {
                    return this._mCurrentTouchTarget.dispatchMouseEvent(event);
                }
            };
            return ViewGroup;
        }(view_2.View));
        view_2.ViewGroup = ViewGroup;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
/// <reference path="../graphics/Util.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Gravity = android.graphics.Gravity;
        var ViewGroup = android.view.ViewGroup;
        var Point = android.graphics.Point;
        var FrameLayout = (function (_super) {
            __extends(FrameLayout, _super);
            function FrameLayout() {
                return _super.apply(this, arguments) || this;
            }
            FrameLayout.prototype.onMeasure = function (width, height, canvas) {
                return _super.prototype.onMeasure.call(this, width, height, canvas);
            };
            FrameLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                var viewItem;
                var length = this.children.length;
                for (var i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    this.layoutItem(viewItem, l, t, r, b, canvas);
                }
            };
            FrameLayout.prototype.layoutItem = function (viewItem, l, t, r, b, canvas) {
                var point = new Point(this.layoutInfo.innerrect.left, this.layoutInfo.innerrect.top);
                var innerrect = this.layoutInfo.innerrect;
                var length = this.children.length;
                var m = viewItem.layoutParams.margin;
                switch (viewItem.gravity) {
                    case Gravity.Left:
                        point.set(innerrect.left, innerrect.top);
                        point.offset(m.marginLeft, m.marginTop);
                        break;
                    case Gravity.Auto:
                        point.set(innerrect.left, innerrect.top);
                        break;
                    case Gravity.Right:
                        point.set(innerrect.right - viewItem.width, innerrect.top);
                        point.offset(-m.marginRight, m.marginTop);
                        break;
                    case Gravity.Top:
                        point.set(innerrect.left, innerrect.top);
                        point.offset(m.marginLeft, m.marginTop);
                        break;
                    case Gravity.Bottom:
                        point.set(innerrect.left, innerrect.bottom - viewItem.height);
                        point.offset(m.marginLeft, -m.marginBottom);
                        break;
                    case Gravity.Center:
                        var tmpl = innerrect.left + (this.layoutInfo.innerrect.width - viewItem.width) / 2;
                        var tmpt = innerrect.top + (this.layoutInfo.innerrect.height - viewItem.height) / 2;
                        if (tmpl < 0) {
                            tmpl = 0;
                        }
                        if (tmpt < 0) {
                            tmpt = 0;
                        }
                        point.set(tmpl, tmpt);
                        break;
                }
                // point.offset(m.getStartXMargin(), m.getStartYMargin());
                // point.offset(m.marginLeft,m.marginRight)
                viewItem.onLayout(point.x, point.y, point.x + viewItem.width, point.y + viewItem.height, canvas);
            };
            return FrameLayout;
        }(ViewGroup));
        widget.FrameLayout = FrameLayout;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="Context.ts" />
/// <reference path="../widget/FrameLayout.ts" />
/// <reference path="../util/Log.ts" />
var android;
(function (android) {
    var app;
    (function (app) {
        var LayoutParams = android.view.LayoutParams;
        var FrameLayout = android.widget.FrameLayout;
        var Log = android.util.Log;
        var Activity = (function (_super) {
            __extends(Activity, _super);
            function Activity(am) {
                var _this = _super.call(this) || this;
                if (am instanceof app.ActivityManager) {
                    _this.activityManager = am;
                }
                else {
                    throw "can't create Activity new ";
                }
                _this.rootView = new FrameLayout(_this);
                var lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, null);
                _this.rootView.layoutParams = lp;
                return _this;
                // this.rootView.background = 'lightblue';
            }
            Activity.prototype.attatchRootView = function (view) {
                view.addView(this.rootView, 0);
            };
            Activity.prototype.onCreate = function (bundle) {
                Log.d("oncreate");
            };
            Activity.prototype.onPause = function () {
                Log.d("onPause");
            };
            Activity.prototype.onResume = function () {
                Log.d('onResume');
            };
            Activity.prototype.onDestory = function () {
                Log.d('onDestory');
            };
            Activity.prototype.setContentView = function (view) {
                this.rootView.addView(view, 0);
            };
            Activity.prototype.startActivityForResult = function (intent, bundle, requestCode, resultCode) {
                this.activityManager.sendStartActivity(intent, bundle, requestCode, resultCode);
            };
            return Activity;
        }(app.Context));
        app.Activity = Activity;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
/// <reference path="./FrameLayout.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Padding = android.graphics.Padding;
        var MeasureSpec = android.view.MeasureSpec;
        var LayoutParams = android.view.LayoutParams;
        var RootView = (function (_super) {
            __extends(RootView, _super);
            function RootView() {
                return _super.apply(this, arguments) || this;
            }
            RootView.prototype.setInfo = function (left, top, width, height) {
                this._l = left;
                this._t = top;
                this._w = width;
                this._h = height;
                this.layoutParams.width = width;
                this.layoutParams.height = height;
                this.padding = new Padding(0);
            };
            RootView.prototype.dispatchDraw = function (canvas) {
                _super.prototype.dispatchDraw.call(this, canvas);
                var rect = this.layoutInfo.outterrect;
                //testCode
                canvas.drawRect(rect.startPoint, rect.endPoint, false, 'black');
            };
            RootView.prototype.onLayout = function (l, t, r, b, canvas) {
                _super.prototype.onLayout.call(this, l, t, r, b, canvas);
            };
            RootView.prototype.oninvalidate = function () {
                _super.prototype.oninvalidate.call(this);
                this._canvas.begin();
                this.dispatchDraw(this._canvas);
                this._canvas.end();
            };
            RootView.prototype.requestLayout = function () {
                var width = new MeasureSpec(this._w, LayoutParams.MATCH_PARENT);
                var height = new MeasureSpec(this._h, LayoutParams.MATCH_PARENT);
                this._canvas.begin();
                var size = this.onMeasure(width, height, this._canvas);
                this.onLayout(this._l, this._t, this._l + size.width, this._t + size.height, this._canvas);
                this._canvas.end();
                this.oninvalidate();
            };
            Object.defineProperty(RootView.prototype, "left", {
                get: function () {
                    return this._l;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RootView.prototype, "top", {
                get: function () {
                    return this._t;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RootView.prototype, "width", {
                get: function () {
                    return this._w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RootView.prototype, "height", {
                get: function () {
                    return this._h;
                },
                enumerable: true,
                configurable: true
            });
            RootView.prototype.startAnimation = function (animation) {
                this.animation = animation;
                setTimeout(this._startAnimation());
                // this._startAnimation();
            };
            RootView.prototype._startAnimation = function () {
                console.log("start " + Date.now());
                this.animation.start = Date.now();
                if (this._rootAniamtion != null && this._rootAniamtion.isAniamtionEnd) {
                    if (this._rootAniamtion.duration + this._rootAniamtion.start < this.animation.duration + this.animation.start) {
                        this._rootAniamtion.duration = this.animation.start + this.animation.duration - this._rootAniamtion.start;
                    }
                }
                else {
                    this._rootAniamtion = this.animation;
                    window.requestAnimationFrame(this._animate.bind(this));
                }
            };
            RootView.prototype._animate = function () {
                console.log("animating " + this._rootAniamtion);
                if (this._rootAniamtion != null && !this._rootAniamtion.isAniamtionEnd) {
                    this.invalidate(false);
                    window.requestAnimationFrame(this._animate.bind(this));
                }
                else {
                    this._rootAniamtion = null;
                    console.log("end " + Date.now());
                    this.invalidate(false);
                }
            };
            RootView.prototype.addView = function (view, index) {
                _super.prototype.addView.call(this, view, index);
                return index;
            };
            RootView.prototype.attachRender = function (r) {
                this._canvas = r;
            };
            return RootView;
        }(widget.FrameLayout));
        widget.RootView = RootView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="Activity.ts" />
/// <reference path="../widget/RootView.ts" />
/// <reference path="../device/Device.ts" />
/// <reference path="../view/event/MotionEvent.ts" />
var android;
(function (android) {
    var app;
    (function (app) {
        var RootView = android.widget.RootView;
        var Device = android.device.Device;
        var MotionEvent = android.view.event.MotionEvent;
        var ActivityManager = (function () {
            function ActivityManager(canvas) {
                this.stack = new Array();
                this.rootView = new RootView(null); // need to be application context
                this.rootView.attachRender(canvas);
                this.rootView.setInfo(0, 0, Device.width, Device.height);
            }
            ActivityManager.prototype.sendEvent = function (event) {
                if (event.action >= MotionEvent.ACTION_MOUSE_DOWN) {
                    this.rootView.dispatchMouseEvent(event);
                }
                else {
                    this.rootView.dispatchTouchEvent(event);
                }
            };
            ActivityManager.prototype.sendStartActivity = function (intent, bundle, requestCode, resultCode) {
                var targetActivity = this.createActivity(intent.getClass());
                var currentActivity = this.stack[this.stack.length - 1];
                if (currentActivity) {
                    currentActivity['onPause'].call(currentActivity);
                }
                this.rootView.removeAllViews();
                this.stack.push(targetActivity);
                targetActivity['attatchRootView'].call(targetActivity, this.rootView);
                targetActivity['onResume'].call(targetActivity);
                // TO DO ...  lanch mode
                targetActivity['onCreate'].call(targetActivity, bundle);
                // this.rootView.background ='white';
                this.rootView.invalidate(true);
            };
            ActivityManager.prototype.createActivity = function (activityClass) {
                var activity = new activityClass(this);
                return activity;
            };
            ActivityManager.prototype.getCurrentActivity = function () {
                return this.stack[this.stack.length - 1];
            };
            return ActivityManager;
        }());
        app.ActivityManager = ActivityManager;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
/// <reference path="./app/Intent.ts" />
/// <reference path="graphics/Canvas.ts" />
/// <reference path="./app/ActivityManager.ts" />
/// <reference path="./util/Log.ts" />
/// <reference path="./view/event/MotionEvent.ts" />
var android;
(function (android) {
    var ActivityManager = android.app.ActivityManager;
    var Canvas = android.graphics.Canvas;
    var RenderType = android.graphics.RenderType;
    var Intent = android.app.Intent;
    var Device = android.device.Device;
    var MotionEvent = android.view.event.MotionEvent;
    var StartUp = (function () {
        function StartUp() {
            this.loadConfig();
            this.element = document.getElementById(this.getRootElement());
            this.element.innerHTML = '';
            if (this.getFill() === 'parent') {
                Device.width = this.element.clientWidth;
                Device.height = this.element.clientHeight;
            }
            if (this.getRenderType() == 'canvas') {
                this.canvas = new Canvas(this.element, RenderType.Canvas);
            }
            else {
                this.canvas = new Canvas(this.element, RenderType.Svg);
            }
            this.activityManager = new ActivityManager(this.canvas);
            // this.element.ontouchstart=null;
            // this.element.ontouchmove=null;
            // this.element.ontouchend=null;
            // this.element.ontouchcancel=null;
            // this.element.onmousedown=null;
            // this.element.onmousemove=null;
            // this.element.onmouseup=null;
            // this.element.onmouseout=null;
            // this.element.onmouseover=null;
            this.element.ontouchstart = this.ontouch.bind(this);
            this.element.ontouchmove = this.ontouch.bind(this);
            this.element.ontouchend = this.ontouch.bind(this);
            this.element.ontouchcancel = this.ontouch.bind(this);
            this.element.onmousedown = this.ontouch.bind(this);
            this.element.onmousemove = this.ontouch.bind(this);
            this.element.onmouseup = this.ontouch.bind(this);
            this.element.onmouseout = this.ontouch.bind(this);
            this.element.onmouseover = this.ontouch.bind(this);
            this.element.onclick = this.ontouch.bind(this);
            // this.element.addEventListener('touchstart', this.ontouch.bind(this));
            // this.element.addEventListener('touchmove', this.ontouch.bind(this));
            // this.element.addEventListener('touchend', this.ontouch.bind(this));
            // this.element.addEventListener('touchcancel', this.ontouch.bind(this));
            // this.element.addEventListener('mousedown', this.ontouch.bind(this));
            // this.element.addEventListener('mousemove', this.ontouch.bind(this));
            // this.element.addEventListener('mouseup', this.ontouch.bind(this));
            // this.element.addEventListener('mouseout', this.ontouch.bind(this));
            // this.element.addEventListener('mouseover', this.ontouch.bind(this));
        }
        StartUp.prototype.ontouch = function (event) {
            event.preventDefault();
            event.stopPropagation();
            var event = event || window.event;
            var str = '';
            var mevent = new MotionEvent(0, 0, 0);
            switch (event.type) {
                case "touchstart":
                    // str= "Touch started (" + event.touches[0].clientX + "," + event.touches[0].clientY + ")";
                    mevent = new MotionEvent(event.touches[0].clientX, event.touches[0].clientY, MotionEvent.ACTION_DOWN);
                    break;
                case "touchend":
                    mevent = new MotionEvent(event.changedTouches[0].clientX, event.changedTouches[0].clientY, MotionEvent.ACTION_UP);
                    break;
                case "touchcancel":
                    mevent = new MotionEvent(event.changedTouches[0].clientX, event.changedTouches[0].clientY, MotionEvent.ACTION_CANCEL);
                    break;
                case "touchmove":
                    mevent = new MotionEvent(event.touches[0].clientX, event.touches[0].clientY, MotionEvent.ACTION_MOVE);
                    break;
                case 'mousedown':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_DOWN);
                    break;
                case 'mousemove':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_MOVE);
                    break;
                case 'mouseup':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_UP);
                    break;
                case 'mouseout':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_OUT);
                    break;
                case 'mouseover':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_OVER);
                    break;
                case 'click':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_CLICK);
                    break;
            }
            mevent.element = this.element;
            var elementrect = this.element.getClientRects();
            mevent.x = mevent.x - elementrect[0].left;
            mevent.y = mevent.y - elementrect[0].top;
            this.activityManager.sendEvent(mevent);
            // Log.d('ontouch ' + str);
        };
        StartUp.prototype.start = function () {
            var intent = new Intent();
            intent.setClass(null, this.getLaunchActivity());
            var bundle = new android.app.Bundle();
            bundle.putDefault(this.getLaunchParams());
            this.activityManager.sendStartActivity(intent, bundle, 0, 0);
        };
        StartUp.prototype.getLaunchActivity = function () {
            return this.config.launchActivity.target;
        };
        StartUp.prototype.getLaunchParams = function () {
            return this.config.launchActivity.params;
        };
        StartUp.prototype.getRootElement = function () {
            return this.config.rootcontainer.target;
        };
        StartUp.prototype.getRenderType = function () {
            return this.config.rendertype ? this.config.rendertype.target : 'svg';
        };
        StartUp.prototype.getFill = function () {
            return this.config.fill;
        };
        StartUp.prototype.loadConfig = function () {
            this.config = window['mainfest'].config;
        };
        StartUp.prototype.getCurrentActivity = function () {
            return this.activityManager.getCurrentActivity();
        };
        return StartUp;
    }());
    android.StartUp = StartUp;
})(android || (android = {}));
var android;
(function (android) {
    var database;
    (function (database) {
        var DataSetObserver = (function () {
            function DataSetObserver() {
            }
            DataSetObserver.prototype.onChanged = function () {
                // Do nothing
            };
            DataSetObserver.prototype.onInvalidated = function () {
                // Do nothing
            };
            return DataSetObserver;
        }());
        database.DataSetObserver = DataSetObserver;
    })(database = android.database || (android.database = {}));
})(android || (android = {}));
/// <reference path="DataSetObserver.ts" />
var android;
(function (android) {
    var database;
    (function (database) {
        var Observable = (function () {
            function Observable() {
                this.mObservers = new Array();
            }
            Observable.prototype.registerObserver = function (observer) {
                if (!observer) {
                    throw "The observer is null or undefine";
                }
                if (this.mObservers.indexOf(observer) > -1) {
                    throw "Observer " + observer + " is already registered ";
                }
                this.mObservers.push(observer);
            };
            Observable.prototype.unregisterObserver = function (observer) {
                if (!observer) {
                    throw "The observer is null or undefine";
                }
                var index = this.mObservers.indexOf(observer);
                if (index === -1) {
                    throw "Observer " + observer + " was not registered ";
                }
                this.mObservers.splice(index, 1);
            };
            Observable.prototype.unregisterAll = function () {
                this.mObservers.length = 0;
            };
            return Observable;
        }());
        database.Observable = Observable;
        var DataSetObservable = (function (_super) {
            __extends(DataSetObservable, _super);
            function DataSetObservable() {
                return _super.apply(this, arguments) || this;
            }
            DataSetObservable.prototype.notifyChanged = function () {
                for (var i = this.mObservers.length - 1; i >= 0; i--) {
                    this.mObservers[i].onChanged();
                }
            };
            DataSetObservable.prototype.notifyInvalidated = function () {
                for (var i = this.mObservers.length - 1; i >= 0; i--) {
                    this.mObservers[i].onInvalidated();
                }
            };
            return DataSetObservable;
        }(Observable));
        database.DataSetObservable = DataSetObservable;
    })(database = android.database || (android.database = {}));
})(android || (android = {}));
/// <reference path="../database/DataSetObservable.ts" />
var android;
(function (android) {
    var adapter;
    (function (adapter) {
        var Adapter = (function () {
            function Adapter() {
            }
            return Adapter;
        }());
        adapter.Adapter = Adapter;
    })(adapter = android.adapter || (android.adapter = {}));
})(android || (android = {}));
/// <reference path="../database/DataSetObservable.ts" />
var android;
(function (android) {
    var adapter;
    (function (adapter) {
        var DataSetObservable = android.database.DataSetObservable;
        var ViewPageAdapter = (function () {
            function ViewPageAdapter() {
                this.mDataSetObservable = new DataSetObservable();
                this.mViewCache = new Array();
                this.mShouldCache = false;
            }
            ViewPageAdapter.prototype.XBaseAdapter = function () {
            };
            /************************************* don't use this  **********************************************/
            ViewPageAdapter.prototype.registerDataSetObserver = function (observer) {
                this.mDataSetObservable.registerObserver(observer);
            };
            ViewPageAdapter.prototype.unregisterDataSetObserver = function (observer) {
                this.mDataSetObservable.unregisterObserver(observer);
            };
            /**********************************************************************************************/
            ViewPageAdapter.prototype.notifyDataSetChanged = function () {
                this.mDataSetObservable.notifyChanged();
            };
            ViewPageAdapter.prototype.notifyDataSetInvalidated = function () {
                this.mDataSetObservable.notifyInvalidated();
            };
            /***
             * set cache
             *
             * @param enable
             */
            ViewPageAdapter.prototype.setCacheEnable = function (enable) {
                this.mShouldCache = enable;
                if (!this.mShouldCache) {
                    this.mViewCache.length = 0;
                }
            };
            ViewPageAdapter.prototype.initItem = function (position, container) {
                var view = null;
                if (this.mShouldCache) {
                    for (var i = 0; i < this.mViewCache.length; ++i) {
                        var info = this.mViewCache[i];
                        if (info != null && info.position == position) {
                            view = info.view;
                            if (view != null) {
                                return this.instantiateItem(position, container, view);
                            }
                        }
                    }
                    if (view == null) {
                        view = this.instantiateItem(position, container, null);
                    }
                    this.mViewCache.push(new ViewInfo(view, position));
                }
                if (view == null) {
                    view = this.instantiateItem(position, container, null);
                }
                return view;
            };
            /**
             * unuseful methods currently
             */
            ViewPageAdapter.prototype.beginUpdata = function () { };
            /**
             * unuseful methods currently
             */
            ViewPageAdapter.prototype.finishUpdata = function () { };
            return ViewPageAdapter;
        }());
        adapter.ViewPageAdapter = ViewPageAdapter;
        var ViewInfo = (function () {
            function ViewInfo(v, pos) {
                this.view = v;
                this.position = pos;
            }
            return ViewInfo;
        }());
        adapter.ViewInfo = ViewInfo;
    })(adapter = android.adapter || (android.adapter = {}));
})(android || (android = {}));
var android;
(function (android) {
    var app;
    (function (app) {
        var Bundle = (function () {
            function Bundle() {
                this.map = {};
            }
            Bundle.prototype.put = function (key, value) {
                this.map[key] = value;
            };
            Bundle.prototype.putDefault = function (value) {
                this.map['default'] = value;
            };
            Bundle.prototype.getDefault = function () {
                return this.map['default'];
            };
            return Bundle;
        }());
        app.Bundle = Bundle;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Align;
        (function (Align) {
            Align[Align["LEFT"] = 0] = "LEFT";
            /**
             * The text is drawn centered horizontally on the x,y origin
             */
            Align[Align["CENTER"] = 1] = "CENTER";
            /**
             * The text is drawn to the left of the x,y origin
             */
            Align[Align["RIGHT"] = 2] = "RIGHT";
        })(Align = graphics.Align || (graphics.Align = {}));
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var AlignElment = (function () {
            function AlignElment(position, element) {
                this.position = position;
                this.element = element;
            }
            return AlignElment;
        }());
        graphics.AlignElment = AlignElment;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Rect.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        'use strict';
        var Size = android.graphics.Size;
        var Point = android.graphics.Point;
        /**
         * Render to canvas.
         */
        var CanvasRenderEngine = (function () {
            function CanvasRenderEngine(element) {
                this._element = element;
                this._create();
            }
            Object.defineProperty(CanvasRenderEngine.prototype, "alpha", {
                set: function (value) {
                    this._canvas2d.globalAlpha = value;
                },
                enumerable: true,
                configurable: true
            });
            CanvasRenderEngine.prototype.beginRender = function () {
                this._canvas2d.clearRect(0, 0, this._canvas.width, this._canvas.height);
            };
            CanvasRenderEngine.prototype.endRender = function () {
            };
            CanvasRenderEngine.prototype.save = function () {
                // console.log('save');
                this._canvas2d.save();
            };
            CanvasRenderEngine.prototype.restore = function () {
                // console.log("restore");
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.getImageData = function (sx, sy, sw, sh) {
                return this._canvas2d.getImageData(sx, sy, sw, sh);
            };
            CanvasRenderEngine.prototype.putImageData = function (imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
                this._canvas2d.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
            };
            CanvasRenderEngine.prototype.clip = function (rect) {
                this._canvas2d.beginPath();
                this._canvas2d.rect(rect.left, rect.top, rect.width, rect.height);
                ;
                this._canvas2d.clip();
            };
            CanvasRenderEngine.prototype.setViewportSize = function (w, h) {
                var _devicePixelRatio = 2;
                this._canvas.width = w * _devicePixelRatio;
                this._canvas.height = h * _devicePixelRatio;
                this._canvas.style.width = w + "px";
                this._canvas.style.height = h + "px";
                this._canvas2d.scale(_devicePixelRatio, _devicePixelRatio);
            };
            Object.defineProperty(CanvasRenderEngine.prototype, "element", {
                get: function () {
                    return this._canvas;
                },
                enumerable: true,
                configurable: true
            });
            CanvasRenderEngine.prototype.drawEllipse = function (cx, cy, rx, ry, className, style) {
            };
            CanvasRenderEngine.prototype.drawRect = function (x, y, w, h, color, fill) {
                if (color) {
                    this._canvas2d.fillStyle = color;
                    this._canvas2d.strokeStyle = color;
                }
                if (fill) {
                    this._canvas2d.fillRect(x, y, w, h);
                }
                else {
                    this._canvas2d.strokeRect(x, y, w, h);
                }
            };
            CanvasRenderEngine.prototype.drawLine = function (x1, y1, x2, y2, strokestyle) {
                this._canvas2d.beginPath();
                this._canvas2d.moveTo(x1, y1);
                this._canvas2d.lineTo(x2, y2);
                this._canvas2d.strokeStyle = strokestyle.strokeColor;
                this._canvas2d.lineWidth = strokestyle.strokeWidth;
                this._canvas2d.stroke();
            };
            CanvasRenderEngine.prototype.drawLines = function (xs, ys, strokestyle) {
                if (xs !== null && ys !== null && xs.length === ys.length && xs.length > 0) {
                    this._canvas2d.beginPath();
                    this._canvas2d.strokeStyle = strokestyle.strokeColor;
                    this._canvas2d.lineWidth = strokestyle.strokeWidth;
                    this._canvas2d.moveTo(xs[0], ys[0]);
                    for (var i = 1; i < xs.length; ++i) {
                        this._canvas2d.lineTo(xs[i], ys[i]);
                    }
                    this._canvas2d.stroke();
                    this._canvas2d.closePath();
                }
            };
            CanvasRenderEngine.prototype.drawPolygon = function (xs, ys, color) {
                this._canvas2d.save();
                this._canvas2d.fillStyle = color;
                this._canvas2d.beginPath();
                this._canvas2d.moveTo(xs[0], ys[0]);
                for (var i = 1; i < xs.length; ++i) {
                    this._canvas2d.lineTo(xs[i], ys[i]);
                }
                this._canvas2d.closePath();
                this._canvas2d.fill();
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.drawPie = function (cx, cy, r, startAngle, sweepAngle, color) {
                this._canvas2d.save();
                this._canvas2d.beginPath();
                this._canvas2d.moveTo(cx, cy);
                this._canvas2d.arc(cx, cy, r, startAngle, startAngle + sweepAngle);
                this._canvas2d.lineTo(cx, cy);
                this._canvas2d.fillStyle = color;
                this._canvas2d.closePath();
                this._canvas2d.fill();
                this._canvas2d.rotate(startAngle);
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.drawDonut = function (cx, cy, radius, innerRadius, startAngle, sweepAngle, color) {
                // this.drawPie(cx, cy, radius, startAngle, sweepAngle, color);
                // this.drawPie(cx, cy, innerRadius, 0, Math.PI * 2, 'rgba(255,255,255,1)');
                var endAngle = startAngle + sweepAngle;
                var p1 = new Point(cx, cy);
                p1.x += innerRadius * Math.cos(startAngle);
                p1.y += innerRadius * Math.sin(startAngle);
                var p2 = new Point(cx, cy);
                p2.x += innerRadius * Math.cos(endAngle);
                p2.y += innerRadius * Math.sin(endAngle);
                this._canvas2d.save();
                this._canvas2d.beginPath();
                this._canvas2d.fillStyle = color;
                this._canvas2d.moveTo(p1.x, p1.y);
                this._canvas2d.arc(cx, cy, radius, startAngle, endAngle, false);
                this._canvas2d.lineTo(p2.x, p2.y);
                this._canvas2d.arc(cx, cy, innerRadius, endAngle, startAngle, true);
                this._canvas2d.fill();
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.drawString = function (s, pt, font) {
                if (font) {
                    this._canvas2d.font = font.fontSize + 'px ' + font.fontFamily;
                    var gradient = this._canvas2d.createLinearGradient(0, 0, this._canvas.width, 0);
                    if (font.fontColor) {
                        gradient.addColorStop(1.0, font.fontColor);
                        this._canvas2d.fillStyle = gradient;
                    }
                }
                this._canvas2d.fillText(s, pt.x, pt.y);
            };
            CanvasRenderEngine.prototype.drawStringRotated = function (s, pt, center, angle, font) {
                this._canvas2d.save();
                this._canvas2d.textBaseline = 'bottom';
                this._canvas2d.translate(center.x, center.y);
                this._canvas2d.rotate(Math.PI / 180 * angle);
                this._canvas2d.translate(-center.x, -center.y);
                if (font) {
                    this._canvas2d.font = font.fontSize + 'px ' + font.fontFamily;
                    var gradient = this._canvas2d.createLinearGradient(0, 0, this._canvas.width, 0);
                    if (font.fontColor) {
                        gradient.addColorStop(1.0, font.fontColor);
                        this._canvas2d.fillStyle = gradient;
                    }
                }
                this._canvas2d.fillText(s, pt.x, pt.y);
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.measureString = function (s, font, maxSize) {
                if (maxSize === void 0) { maxSize = 0; }
                var sz = new Size(0, 0);
                this._canvas2d.font = font.fontSize + "px" + " " + font.fontFamily;
                var tm = this._canvas2d.measureText(s);
                sz.width = tm.width;
                sz.height = font.fontSize;
                return sz;
            };
            CanvasRenderEngine.prototype.drawImage = function (image, x, y, w, h) {
            };
            CanvasRenderEngine.prototype._create = function () {
                this._canvas = document.createElement('canvas');
                this._element.appendChild(this._canvas);
                this._canvas2d = this._canvas.getContext("2d");
            };
            CanvasRenderEngine.prototype.moveTo = function (x, y) {
                this._canvas2d.moveTo(x, y);
            };
            CanvasRenderEngine.prototype.scale = function (sx, sy) {
                this._canvas2d.scale(sx, sy);
            };
            CanvasRenderEngine.prototype.rotate = function (degree) {
                this._canvas2d.rotate(degree);
            };
            CanvasRenderEngine.prototype.translate = function (x, y) {
                this._canvas2d.translate(x, y);
            };
            return CanvasRenderEngine;
        }());
        graphics.CanvasRenderEngine = CanvasRenderEngine;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Rect.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        'use strict';
        var Size = android.graphics.Size;
        var Point = android.graphics.Point;
        /**
         * Render to svg.
         */
        var SvgRenderEngine = (function () {
            function SvgRenderEngine(element) {
                this._strokeWidth = 1;
                this._fontSize = null;
                this._fontFamily = null;
                this.alpha = 1;
                this._element = element;
                this._create();
                this._element.appendChild(this._svg);
                if (SvgRenderEngine._isff === undefined) {
                    SvgRenderEngine._isff = navigator.userAgent.toLowerCase().indexOf('firefox') >= 0;
                }
            }
            SvgRenderEngine.prototype.save = function () {
            };
            SvgRenderEngine.prototype.restore = function () {
            };
            SvgRenderEngine.prototype.clip = function () { };
            SvgRenderEngine.prototype.beginRender = function () {
                while (this._svg.firstChild) {
                    this._svg.removeChild(this._svg.firstChild);
                }
                this._svg.appendChild(this._textGroup);
            };
            SvgRenderEngine.prototype.endRender = function () {
                if (this._textGroup.parentNode) {
                    this._svg.removeChild(this._textGroup);
                }
            };
            SvgRenderEngine.prototype.setViewportSize = function (w, h) {
                this._svg.setAttribute('width', w.toString());
                this._svg.setAttribute('height', h.toString());
            };
            Object.defineProperty(SvgRenderEngine.prototype, "element", {
                get: function () {
                    return this._svg;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "fill", {
                get: function () {
                    return this._fill;
                },
                set: function (value) {
                    this._fill = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "fontSize", {
                get: function () {
                    return this._fontSize;
                },
                set: function (value) {
                    this._fontSize = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "fontFamily", {
                get: function () {
                    return this._fontFamily;
                },
                set: function (value) {
                    this._fontFamily = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "stroke", {
                get: function () {
                    return this._stroke;
                },
                set: function (value) {
                    this._stroke = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "strokeWidth", {
                get: function () {
                    return this._strokeWidth;
                },
                set: function (value) {
                    this._strokeWidth = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "textFill", {
                get: function () {
                    return this._textFill;
                },
                set: function (value) {
                    this._textFill = value;
                },
                enumerable: true,
                configurable: true
            });
            SvgRenderEngine.prototype.addClipRect = function (clipRect, id) {
                if (clipRect && id) {
                    var clipPath = document.createElementNS(SvgRenderEngine.svgNS, 'clipPath');
                    var rect = document.createElementNS(SvgRenderEngine.svgNS, 'rect');
                    rect.setAttribute('x', (clipRect.left - 1).toFixed());
                    rect.setAttribute('y', (clipRect.top - 1).toFixed());
                    rect.setAttribute('width', (clipRect.width + 2).toFixed());
                    rect.setAttribute('height', (clipRect.height + 2).toFixed());
                    clipPath.appendChild(rect);
                    clipPath.setAttribute('id', id);
                    this._svg.appendChild(clipPath);
                }
            };
            SvgRenderEngine.prototype.drawEllipse = function (cx, cy, rx, ry, className, style) {
                var ell = document.createElementNS(SvgRenderEngine.svgNS, 'ellipse');
                ell.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    ell.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                ell.setAttribute('fill', this._fill);
                ell.setAttribute('cx', cx.toFixed(1));
                ell.setAttribute('cy', cy.toFixed(1));
                ell.setAttribute('rx', rx.toFixed(1));
                ell.setAttribute('ry', ry.toFixed(1));
                //ell.setAttribute('cx', cx.toString());
                //ell.setAttribute('cy', cy.toString());
                //ell.setAttribute('rx', rx.toString());
                //ell.setAttribute('ry', ry.toString());
                if (className) {
                    ell.setAttribute('class', className);
                }
                this._applyStyle(ell, style);
                //this._svg.appendChild(ell);
                this._appendChild(ell);
                return ell;
            };
            SvgRenderEngine.prototype.drawRect = function (x, y, w, h, className, style, clipPath) {
                var rect = document.createElementNS(SvgRenderEngine.svgNS, 'rect');
                rect.setAttribute('fill', this._fill);
                rect.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    rect.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                rect.setAttribute('x', x.toFixed(1));
                rect.setAttribute('y', y.toFixed(1));
                if (w > 0 && w < 0.05) {
                    rect.setAttribute('width', '0.1');
                }
                else {
                    rect.setAttribute('width', w.toFixed(1));
                }
                if (h > 0 && h < 0.05) {
                    rect.setAttribute('height', '0.1');
                }
                else {
                    rect.setAttribute('height', h.toFixed(1));
                }
                if (clipPath) {
                    rect.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                if (className) {
                    rect.setAttribute('class', className);
                }
                this._applyStyle(rect, style);
                this._appendChild(rect);
                return rect;
            };
            // this._render.drawLine(startpoint.x, startpoint.y, endpoint.x, endpoint.y,stroke);
            SvgRenderEngine.prototype.drawLine = function (x1, y1, x2, y2, stroke) {
                this._drawLine(x1, y1, x2, y2, null, { 'stroke': stroke.strokeColor, 'stroke-width': stroke.strokeWidth });
            };
            SvgRenderEngine.prototype._drawLine = function (x1, y1, x2, y2, className, style) {
                var line = document.createElementNS(SvgRenderEngine.svgNS, 'line');
                line.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    line.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                line.setAttribute('x1', x1.toFixed(1));
                line.setAttribute('x2', x2.toFixed(1));
                line.setAttribute('y1', y1.toFixed(1));
                line.setAttribute('y2', y2.toFixed(1));
                //line.setAttribute('x1', x1.toString());
                //line.setAttribute('x2', x2.toString());
                //line.setAttribute('y1', y1.toString());
                //line.setAttribute('y2', y2.toString());
                if (className) {
                    line.setAttribute('class', className);
                }
                this._applyStyle(line, style);
                this._appendChild(line);
                return line;
            };
            SvgRenderEngine.prototype.drawLines = function (xs, ys, className, style, clipPath) {
                if (xs && ys) {
                    var len = Math.min(xs.length, ys.length);
                    if (len > 0) {
                        var pline = document.createElementNS(SvgRenderEngine.svgNS, 'polyline');
                        pline.setAttribute('stroke', this._stroke);
                        if (this._strokeWidth !== null) {
                            pline.setAttribute('stroke-width', this._strokeWidth.toString());
                        }
                        pline.setAttribute('fill', 'none');
                        var spts = '';
                        for (var i = 0; i < len; i++) {
                            spts += xs[i].toFixed(1) + ',' + ys[i].toFixed(1) + ' ';
                        }
                        pline.setAttribute('points', spts);
                        if (className) {
                            pline.setAttribute('class', className);
                        }
                        if (clipPath) {
                            pline.setAttribute('clip-path', 'url(#' + clipPath + ')');
                        }
                        this._applyStyle(pline, style);
                        this._appendChild(pline);
                        return pline;
                    }
                }
                return null;
            };
            SvgRenderEngine.prototype.drawPolygon = function (xs, ys, className, style, clipPath) {
                if (xs && ys) {
                    var len = Math.min(xs.length, ys.length);
                    if (len > 0) {
                        var poly = document.createElementNS(SvgRenderEngine.svgNS, 'polygon');
                        poly.setAttribute('stroke', this._stroke);
                        if (this._strokeWidth !== null) {
                            poly.setAttribute('stroke-width', this._strokeWidth.toString());
                        }
                        poly.setAttribute('fill', this._fill);
                        poly.setAttribute('opacity', this.alpha + "");
                        var spts = '';
                        for (var i = 0; i < len; i++) {
                            //spts += xs[i].toString() + ',' + ys[i].toString() + ' ';
                            spts += xs[i].toFixed(1) + ',' + ys[i].toFixed(1) + ' ';
                        }
                        poly.setAttribute('points', spts);
                        if (className) {
                            poly.setAttribute('class', className);
                        }
                        if (clipPath) {
                            poly.setAttribute('clip-path', 'url(#' + clipPath + ')');
                        }
                        this._applyStyle(poly, style);
                        this._appendChild(poly);
                        return poly;
                    }
                }
                return null;
            };
            SvgRenderEngine.prototype.drawPie = function (cx, cy, r, startAngle, sweepAngle, className, style, clipPath) {
                if (sweepAngle >= Math.PI * 2) {
                    return this.drawEllipse(cx, cy, r, r, className, style);
                }
                var path = document.createElementNS(SvgRenderEngine.svgNS, 'path');
                path.setAttribute('fill', this._fill);
                path.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    path.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                var p1 = new Point(cx, cy);
                p1.x += r * Math.cos(startAngle);
                p1.y += r * Math.sin(startAngle);
                var a2 = startAngle + sweepAngle;
                var p2 = new Point(cx, cy);
                p2.x += r * Math.cos(a2);
                p2.y += r * Math.sin(a2);
                var opt = ' 0 0,1 ';
                if (Math.abs(sweepAngle) > Math.PI) {
                    opt = ' 0 1,1 ';
                }
                //var d = 'M ' + cx.toFixed(1) + ',' + cy.toFixed(1);
                //d += ' L ' + p1.x.toFixed(1) + ',' + p1.y.toFixed(1);
                //d += ' A ' + r.toFixed(1) + ',' + r.toFixed(1) + opt;
                //d += p2.x.toFixed(1) + ',' + p2.y.toFixed(1) + ' z';
                var d = 'M ' + p1.x.toFixed(1) + ',' + p1.y.toFixed(1);
                d += ' A ' + r.toFixed(1) + ',' + r.toFixed(1) + opt;
                d += p2.x.toFixed(1) + ',' + p2.y.toFixed(1);
                d += ' L ' + cx.toFixed(1) + ',' + cy.toFixed(1) + ' z';
                path.setAttribute('d', d);
                if (clipPath) {
                    path.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                if (className) {
                    path.setAttribute('class', className);
                }
                this._applyStyle(path, style);
                this._appendChild(path);
                return path;
            };
            SvgRenderEngine.prototype.drawDonut = function (cx, cy, radius, innerRadius, startAngle, sweepAngle, className, style, clipPath) {
                var isFull = false;
                if (startAngle + sweepAngle >= Math.PI * 2) {
                    isFull = true;
                    sweepAngle = Math.PI * 2 - startAngle - 0.01;
                }
                var path = document.createElementNS(SvgRenderEngine.svgNS, 'path');
                path.setAttribute('fill', this._fill);
                path.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    path.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                var p1 = new Point(cx, cy);
                p1.x += radius * Math.cos(startAngle);
                p1.y += radius * Math.sin(startAngle);
                var a2 = startAngle + sweepAngle;
                var p2 = new Point(cx, cy);
                p2.x += radius * Math.cos(a2);
                p2.y += radius * Math.sin(a2);
                var p3 = new Point(cx, cy);
                p3.x += innerRadius * Math.cos(a2);
                p3.y += innerRadius * Math.sin(a2);
                var p4 = new Point(cx, cy);
                p4.x += innerRadius * Math.cos(startAngle);
                p4.y += innerRadius * Math.sin(startAngle);
                var opt1 = ' 0 0,1 ', opt2 = ' 0 0,0 ';
                if (Math.abs(sweepAngle) > Math.PI) {
                    opt1 = ' 0 1,1 ';
                    opt2 = ' 0 1,0 ';
                }
                var d = 'M ' + p1.x.toFixed(3) + ',' + p1.y.toFixed(3);
                d += ' A ' + radius.toFixed(3) + ',' + radius.toFixed(3) + opt1;
                d += p2.x.toFixed(3) + ',' + p2.y.toFixed(3);
                if (isFull) {
                    d += ' M ' + p3.x.toFixed(3) + ',' + p3.y.toFixed(3);
                }
                else {
                    d += ' L ' + p3.x.toFixed(3) + ',' + p3.y.toFixed(3);
                }
                d += ' A ' + innerRadius.toFixed(3) + ',' + innerRadius.toFixed(3) + opt2;
                d += p4.x.toFixed(3) + ',' + p4.y.toFixed(3);
                if (!isFull) {
                    d += ' z';
                }
                path.setAttribute('d', d);
                if (clipPath) {
                    path.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                if (className) {
                    path.setAttribute('class', className);
                }
                this._applyStyle(path, style);
                this._appendChild(path);
                return path;
            };
            SvgRenderEngine.prototype.drawString = function (s, pt, className, style) {
                var text = this._createText(pt, s);
                if (className) {
                    text.setAttribute('class', className);
                }
                this._applyStyle(text, style);
                this._appendChild(text);
                var bb = this._getBBox(text); // text.getBBox();
                text.setAttribute('y', (pt.y - (bb.y + bb.height - pt.y)).toFixed(1));
                return text;
            };
            SvgRenderEngine.prototype.drawStringRotated = function (s, pt, center, angle, className, style) {
                var text = this._createText(pt, s);
                if (className) {
                    text.setAttribute('class', className);
                }
                this._applyStyle(text, style);
                var g = document.createElementNS(SvgRenderEngine.svgNS, 'g');
                g.setAttribute('transform', 'rotate(' + angle.toFixed(1) + ',' + center.x.toFixed(1) + ',' + center.y.toFixed(1) + ')');
                //g.setAttribute('transform', 'rotate(' + angle.toString() + ',' + center.x.toString() + ',' + center.y.toString() + ')');
                g.appendChild(text);
                //this._svg.appendChild(g);
                this._appendChild(g);
                var bb = this._getBBox(text); // text.getBBox();
                text.setAttribute('y', (pt.y - (bb.y + bb.height - pt.y)).toFixed(1));
                return text;
            };
            SvgRenderEngine.prototype.measureString = function (s, font) {
                return this._measureString(s, null, null, { 'font-size': font.fontSize, 'font-family': font.fontFamily });
            };
            SvgRenderEngine.prototype._measureString = function (s, className, groupName, style) {
                var sz = new Size(0, 0);
                if (this._fontSize) {
                    this._text.setAttribute('font-size', this._fontSize);
                }
                if (this._fontFamily) {
                    this._text.setAttribute('font-family', this._fontFamily);
                }
                if (className) {
                    this._text.setAttribute('class', className);
                }
                if (groupName) {
                    this._textGroup.setAttribute('class', groupName);
                }
                this._applyStyle(this._text, style);
                this._setText(this._text, s);
                var rect = this._getBBox(this._text); // this._text.getBBox();
                sz.width = rect.width;
                sz.height = rect.height - 2;
                this._text.removeAttribute('font-size');
                this._text.removeAttribute('font-family');
                this._text.removeAttribute('class');
                if (style) {
                    for (var key in style) {
                        this._text.removeAttribute(this._deCase(key));
                    }
                }
                this._textGroup.removeAttribute('class');
                this._text.textContent = null;
                return sz;
            };
            SvgRenderEngine.prototype.startGroup = function (className, clipPath, createTransform) {
                if (createTransform === void 0) { createTransform = false; }
                var group = document.createElementNS(SvgRenderEngine.svgNS, 'g');
                if (className) {
                    group.setAttribute('class', className);
                }
                if (clipPath) {
                    group.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                this._appendChild(group);
                if (createTransform) {
                    group.transform.baseVal.appendItem(this._svg.createSVGTransform());
                }
                this._group = group;
                return group;
            };
            SvgRenderEngine.prototype.endGroup = function () {
                if (this._group) {
                    var parent = this._group.parentNode;
                    if (parent == this._svg) {
                        this._group = null;
                    }
                    else {
                        this._group = parent;
                    }
                }
            };
            SvgRenderEngine.prototype.drawImage = function (imageHref, x, y, w, h) {
                var img = document.createElementNS(SvgRenderEngine.svgNS, 'image');
                img.setAttributeNS(SvgRenderEngine.xlinkNS, 'href', imageHref);
                img.setAttribute('x', x.toFixed(1));
                img.setAttribute('y', y.toFixed(1));
                img.setAttribute('width', w.toFixed(1));
                img.setAttribute('height', h.toFixed(1));
                this._appendChild(img);
                return img;
            };
            SvgRenderEngine.prototype._appendChild = function (element) {
                var group = this._group;
                if (!group) {
                    group = this._svg;
                }
                group.appendChild(element);
            };
            SvgRenderEngine.prototype._create = function () {
                this._svg = document.createElementNS(SvgRenderEngine.svgNS, 'svg');
                this._defs = document.createElementNS(SvgRenderEngine.svgNS, 'defs');
                this._svg.appendChild(this._defs);
                this._text = this._createText(new Point(-1000, -1000), '');
                this._textGroup = document.createElementNS(SvgRenderEngine.svgNS, 'g');
                this._textGroup.appendChild(this._text);
                this._svg.appendChild(this._textGroup);
            };
            SvgRenderEngine.prototype._setText = function (element, s) {
                var text = s ? s.toString() : null;
                if (text && text.indexOf('tspan') >= 0) {
                    try {
                        element.textContent = null;
                        // Parse the markup into valid nodes.
                        var dXML = new DOMParser();
                        //dXML.async = false;
                        // Wrap the markup into a SVG node to ensure parsing works.
                        var sXML = '<svg xmlns="http://www.w3.org/2000/svg\">' + text + '</svg>';
                        var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;
                        // Now take each node, import it and append to this element.
                        var childNode = svgDocElement.firstChild;
                        while (childNode) {
                            element.appendChild(element.ownerDocument.importNode(childNode, true));
                            childNode = childNode.nextSibling;
                        }
                    }
                    catch (e) {
                        throw new Error('Error parsing XML string.');
                    }
                    ;
                }
                else {
                    element.textContent = text;
                }
            };
            SvgRenderEngine.prototype._createText = function (pos, text) {
                var textel = document.createElementNS(SvgRenderEngine.svgNS, 'text');
                this._setText(textel, text);
                textel.setAttribute('fill', this._textFill);
                textel.setAttribute('x', pos.x.toFixed(1));
                textel.setAttribute('y', pos.y.toFixed(1));
                //textel.setAttribute('x', pos.x.toString());
                //textel.setAttribute('y', pos.y.toString());
                if (this._fontSize) {
                    textel.setAttribute('font-size', this._fontSize);
                }
                if (this._fontFamily) {
                    textel.setAttribute('font-family', this._fontFamily);
                }
                return textel;
            };
            SvgRenderEngine.prototype._applyStyle = function (el, style) {
                if (style) {
                    for (var key in style) {
                        el.setAttribute(this._deCase(key), style[key]);
                    }
                }
            };
            SvgRenderEngine.prototype._deCase = function (s) {
                return s.replace(/[A-Z]/g, function (a) { return '-' + a.toLowerCase(); });
            };
            SvgRenderEngine.prototype._getBBox = function (text) {
                if (SvgRenderEngine._isff) {
                    try {
                        return text.getBBox();
                    }
                    catch (e) {
                        return { x: 0, y: 0, width: 0, height: 0 };
                    }
                }
                else {
                    return text.getBBox();
                }
            };
            return SvgRenderEngine;
        }());
        SvgRenderEngine.svgNS = 'http://www.w3.org/2000/svg';
        SvgRenderEngine.xlinkNS = 'http://www.w3.org/1999/xlink';
        graphics.SvgRenderEngine = SvgRenderEngine;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Util.ts" />
/// <reference path="Canvas.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var TextPaint = (function () {
            function TextPaint(canvas, font) {
                this.canvas = canvas;
                this.font = font;
            }
            TextPaint.prototype.measureString = function (str) {
                return this.canvas.measureString(str, this.font);
            };
            return TextPaint;
        }());
        graphics.TextPaint = TextPaint;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var util;
    (function (util) {
        var ArrayList = (function () {
            function ArrayList() {
                this._array = [];
            }
            ArrayList.prototype.add = function (value) {
                this._array.push(value);
            };
            ArrayList.prototype.remove = function (value) {
                if (typeof (value) === 'number') {
                    this._array.splice(value);
                }
                else {
                    var index = this._array.indexOf(value);
                    if (index > 0) {
                        this._array.splice(index, 1);
                    }
                }
            };
            ArrayList.prototype.clear = function () {
                this._array.length = 0;
            };
            ArrayList.prototype.size = function () {
                return this._array.length;
            };
            ArrayList.prototype.get = function (index) {
                return this._array[index];
            };
            return ArrayList;
        }());
        util.ArrayList = ArrayList;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
var android;
(function (android) {
    var util;
    (function (util) {
        var Message = (function () {
            function Message(what) {
                this.what = 0;
                this.what = what;
            }
            Message.obtain = function (what) {
                return new Message(what);
            };
            return Message;
        }());
        util.Message = Message;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
/// <reference path="Message.ts" />
/// <reference path="Log.ts" />
var android;
(function (android) {
    var util;
    (function (util) {
        var Handler = (function () {
            function Handler() {
                this._hanlderMap = {};
            }
            Handler.prototype.handleMessage = function (msg) {
                // do nothing   
            };
            Handler.prototype.sendMessage = function (msg) {
                return this.sendMessageDelayed(msg, 0);
            };
            Handler.prototype.sendMessageDelayed = function (msg, delay) {
                // Log.d('sendMessageDelayed delay = ' + delay + "   now =" + Date.now());
                return this.sendMessageAtTime(msg, Date.now() + delay);
            };
            Handler.prototype.sendMessageAtTime = function (msg, uptimeMillis) {
                var self = this;
                this._hanlderMap[msg.what] = setTimeout(function () {
                    self.handleMessage(msg);
                }, uptimeMillis - Date.now());
                return true;
            };
            Handler.prototype.removeMessages = function (what) {
                clearTimeout(this._hanlderMap[what]);
            };
            Handler.prototype.obtainMessage = function (what) {
                return util.Message.obtain(what);
            };
            return Handler;
        }());
        util.Handler = Handler;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
var android;
(function (android) {
    var widget;
    (function (widget) {
        var View = android.view.View;
        var MeasureSpec = android.view.MeasureSpec;
        var ScaleType;
        (function (ScaleType) {
            ScaleType[ScaleType["MATRIX"] = 0] = "MATRIX";
            ScaleType[ScaleType["FIT_XY"] = 1] = "FIT_XY";
            ScaleType[ScaleType["FIT_START"] = 2] = "FIT_START";
            ScaleType[ScaleType["FIT_CENTER"] = 3] = "FIT_CENTER";
            ScaleType[ScaleType["FIT_END"] = 4] = "FIT_END";
            ScaleType[ScaleType["CENTER"] = 5] = "CENTER";
            ScaleType[ScaleType["CENTER_CROP"] = 6] = "CENTER_CROP";
            ScaleType[ScaleType["CENTER_INSIDE"] = 7] = "CENTER_INSIDE";
        })(ScaleType = widget.ScaleType || (widget.ScaleType = {}));
        var ImageView = (function (_super) {
            __extends(ImageView, _super);
            function ImageView() {
                return _super.apply(this, arguments) || this;
            }
            ImageView.prototype.onMeasure = function (width, height, canvas) {
                this.setMeasuredDimension(new MeasureSpec(), new MeasureSpec());
                return null;
            };
            ImageView.prototype.onDraw = function (canvas) {
            };
            return ImageView;
        }(View));
        widget.ImageView = ImageView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Gravity = android.graphics.Gravity;
        var ViewGroup = android.view.ViewGroup;
        var Point = android.graphics.Point;
        var MeasureSpec = android.view.MeasureSpec;
        var Orientation = android.graphics.Orientation;
        var LayoutParams = android.view.LayoutParams;
        var LinearLayout = (function (_super) {
            __extends(LinearLayout, _super);
            function LinearLayout() {
                var _this = _super.apply(this, arguments) || this;
                _this._orientation = Orientation.Horizontal;
                return _this;
            }
            LinearLayout.prototype.setOrientation = function (orientation) {
                this._orientation = orientation;
            };
            LinearLayout.prototype.getOrientation = function () {
                return this._orientation;
            };
            LinearLayout.prototype.onMeasure = function (width, height, canvas) {
                if (this._orientation === Orientation.Horizontal) {
                    return this.measureHorizontal(width, height, canvas);
                }
                else {
                    return this.measureVertical(width, height, canvas);
                }
            };
            LinearLayout.prototype.measureHorizontal = function (width, height, canvas) {
                var size;
                for (var i = 0; i < this.children.length; ++i) {
                    var item = this.children[i];
                    var lp = item.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    if (lp.heightMode === LayoutParams.MATCH_PARENT) {
                        h = height.value;
                    }
                    if (lp.widthMode === LayoutParams.MATCH_PARENT) {
                        w = width.value;
                    }
                    var s = item.onMeasure(new MeasureSpec(w, lp.widthMode), new MeasureSpec(h, lp.heightMode), canvas);
                    if (size) {
                        size.width += s.width;
                        if (size.height < s.height) {
                            size.height = s.height;
                        }
                    }
                    else {
                        size = s.clone();
                    }
                }
                // if (size.width > width.value) {
                //     size.width = width.value;
                // }
                // if (size.height > height.value) {
                //     size.height = height.value;
                // }
                if (this.layoutParams.widthMode === LayoutParams.EXACTLY) {
                    size.width = this.layoutParams.width;
                }
                else if (this.layoutParams.widthMode === LayoutParams.MATCH_PARENT) {
                    size.width = width.getMeasureValue();
                }
                if (this.layoutParams.heightMode === LayoutParams.EXACTLY) {
                    size.height = this.layoutParams.height;
                }
                else if (this.layoutParams.heightMode === LayoutParams.MATCH_PARENT) {
                    size.height = height.getMeasureValue();
                }
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            LinearLayout.prototype.measureVertical = function (width, height, canvas) {
                var size;
                for (var i = 0; i < this.children.length; ++i) {
                    var item = this.children[i];
                    var lp = item.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    if (lp.heightMode === LayoutParams.MATCH_PARENT) {
                        h = height.value;
                    }
                    if (lp.widthMode === LayoutParams.MATCH_PARENT) {
                        w = width.value;
                    }
                    var s = item.onMeasure(new MeasureSpec(w, lp.widthMode), new MeasureSpec(h, lp.heightMode), canvas);
                    if (size) {
                        size.height += s.height;
                        if (size.width < s.width) {
                            size.width = s.width;
                        }
                    }
                    else {
                        size = s.clone();
                    }
                }
                if (size.width > width.value) {
                    size.width = width.value;
                }
                if (size.height > height.value) {
                    size.height = height.value;
                }
                if (this.layoutParams.widthMode === LayoutParams.EXACTLY) {
                    size.width = this.layoutParams.width;
                }
                else if (this.layoutParams.widthMode === LayoutParams.MATCH_PARENT) {
                    size.width = width.getMeasureValue();
                }
                if (this.layoutParams.heightMode === LayoutParams.EXACTLY) {
                    size.height = this.layoutParams.height;
                }
                else if (this.layoutParams.heightMode === LayoutParams.MATCH_PARENT) {
                    size.height = height.getMeasureValue();
                }
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            LinearLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                var innerrect = this.layoutInfo.innerrect;
                if (this._orientation === Orientation.Horizontal) {
                    this.layoutHorizontal(innerrect.left, innerrect.top, innerrect.right, innerrect.bottom, canvas);
                }
                else {
                    this.layoutVertical(innerrect.left, innerrect.top, innerrect.right, innerrect.bottom, canvas);
                }
            };
            LinearLayout.prototype.layoutHorizontal = function (l, t, r, b, canvas) {
                var viewItem;
                var m;
                var startpoint = new Point(l, t);
                var length = this.children.length;
                var childWidth = 0;
                for (var i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    childWidth += viewItem.width + (m.marginLeft + m.marginRight);
                }
                viewItem = null;
                m = null;
                var startOffset = 0;
                if (childWidth < (r - l)) {
                    startOffset = ((r - l) - childWidth) / 2;
                }
                for (i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    switch (viewItem.gravity) {
                        case Gravity.Left:
                        case Gravity.Auto:
                            break;
                        case Gravity.Right:
                            break;
                        case Gravity.Top:
                            startpoint.y = t;
                            break;
                        case Gravity.Bottom:
                            startpoint.y = b - viewItem.height - m.marginBottom;
                            break;
                        case Gravity.Center:
                            startpoint.y = t + ((b - t - viewItem.height) > 0 ? b - t - viewItem.height : 0) / 2;
                            break;
                    }
                    startpoint.offset(m.marginLeft > 0 ? m.marginLeft : 0, m.marginTop > 0 ? m.marginTop : 0);
                    viewItem.onLayout(startpoint.x, startpoint.y, startpoint.x + viewItem.width, startpoint.y + viewItem.height, canvas);
                    startpoint.offset(viewItem.width + (m.marginRight > 0 ? m.marginRight : 0), 0);
                }
            };
            LinearLayout.prototype.layoutVertical = function (l, t, r, b, canvas) {
                var viewItem;
                var m;
                var startpoint = new Point(l, t);
                var length = this.children.length;
                var childHeight = 0;
                for (var i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    childHeight += viewItem.height + (m.marginTop + m.marginBottom);
                }
                viewItem = null;
                m = null;
                var startOffset = 0;
                if (childHeight < (b - t)) {
                    startOffset = ((b - t) - childHeight) / 2;
                }
                for (i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    switch (viewItem.gravity) {
                        case Gravity.Left:
                        case Gravity.Auto:
                            startpoint.x = l;
                            break;
                        case Gravity.Right:
                            startpoint.x = r - viewItem.width - m.marginRight;
                            break;
                        case Gravity.Top:
                            // startpoint.y = t;
                            break;
                        case Gravity.Bottom:
                            // startpoint.y = b-viewItem.height-m.marginBottom;
                            break;
                        case Gravity.Center:
                            // startpoint.y = t+((b-t-viewItem.height)>0?b-t-viewItem.height:0)/2;
                            startpoint.x = l + ((r - l - viewItem.width) > 0 ? r - l - viewItem.width : 0) / 2;
                            break;
                    }
                    startpoint.offset(m.marginLeft > 0 ? m.marginLeft : 0, m.marginTop > 0 ? m.marginTop : 0);
                    viewItem.onLayout(startpoint.x, startpoint.y, startpoint.x + viewItem.width, startpoint.y + viewItem.height, canvas);
                    // startpoint.translate(viewItem.width + (m.marginRight>0? m.marginRight:0),0);
                    startpoint.offset(0, viewItem.height + (m.marginBottom > 0 ? m.marginBottom : 0));
                }
            };
            return LinearLayout;
        }(ViewGroup));
        widget.LinearLayout = LinearLayout;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var ViewGroup = android.view.ViewGroup;
        var ListView = (function (_super) {
            __extends(ListView, _super);
            function ListView() {
                return _super.apply(this, arguments) || this;
            }
            return ListView;
        }(ViewGroup));
        widget.ListView = ListView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Size = android.graphics.Size;
        var View = android.view.View;
        var MeasureSpec = android.view.MeasureSpec;
        var Font = android.graphics.Font;
        var LayoutInfo = android.view.LayoutInfo;
        var LayoutParams = android.view.LayoutParams;
        var Ellipsize;
        (function (Ellipsize) {
        })(Ellipsize = widget.Ellipsize || (widget.Ellipsize = {}));
        var TextView = (function (_super) {
            __extends(TextView, _super);
            function TextView() {
                return _super.apply(this, arguments) || this;
            }
            TextView.prototype.onDraw = function (canvas) {
                _super.prototype.onDraw.call(this, canvas);
                canvas.drawText(this.text, this.layoutInfo.innerrect.startPoint, this.font);
            };
            TextView.prototype.setText = function (text) {
                this.text = text;
                this.invalidate(false);
            };
            TextView.prototype.setFont = function (font) {
                this.font = font;
            };
            Object.defineProperty(TextView.prototype, "ellipsize", {
                get: function () {
                    return this._ellipsize;
                },
                set: function (ellipsize) {
                    this._ellipsize = ellipsize;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextView.prototype, "maxWidth", {
                get: function () {
                    return this._maxWidth;
                },
                set: function (maxWidth) {
                    this._maxWidth = maxWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextView.prototype, "linespace", {
                get: function () {
                    return this._linespace;
                },
                set: function (linespace) {
                    this._linespace = linespace;
                },
                enumerable: true,
                configurable: true
            });
            // private _measureString(width:number):Size{
            //     return
            // }
            TextView.prototype.onMeasure = function (width, height, canvas) {
                if (!this.font) {
                    this.font = new Font(16, "", 'white');
                }
                this._layoutInfo = new LayoutInfo(0, 0, 0, 0, this.padding, 0);
                var w = this.layoutParams.width;
                var h = this.layoutParams.height;
                var size = new Size(w, h);
                var widthmode = this.layoutParams.widthMode;
                var heightmode = this.layoutParams.heightMode;
                var textsize = canvas.measureString(this.text, this.font);
                if (widthmode === LayoutParams.MATCH_PARENT) {
                    size.width = width.value;
                }
                else if (widthmode === LayoutParams.WRAP_CONTENT) {
                    size.width = textsize.width > this._maxWidth ? this._maxWidth : textsize.width;
                }
                if (heightmode === LayoutParams.MATCH_PARENT) {
                    size.height = height.value;
                }
                else if (heightmode === LayoutParams.WRAP_CONTENT) {
                    size.height = textsize.height;
                }
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            return TextView;
        }(View));
        widget.TextView = TextView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="../database/DataSetObservable.ts" />
/// <reference path="../adapter/ViewPagerAdapter.ts" />
/// <reference path="../util/ArrayList.ts" />
/// <reference path="../util/Handler.ts" />
/// <reference path="../device/Device.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Size = android.graphics.Size;
        var ViewGroup = android.view.ViewGroup;
        var MeasureSpec = android.view.MeasureSpec;
        var LayoutParams = android.view.LayoutParams;
        var ArrayList = android.util.ArrayList;
        var DataSetObserver = android.database.DataSetObserver;
        var Handler = android.util.Handler;
        var Log = android.util.Log;
        var MotionEvent = android.view.event.MotionEvent;
        var Device = android.device.Device;
        var TAG = "ScaleViewPager";
        var ANIMATION_FRAME_DURATION = 1000 / 80;
        var MIN_SPEED = 10.0;
        var MIN_TOUCH = 12;
        var MOVE_LEFT = 10001;
        var MOVE_RIGHT = 10002;
        var MOVE_BACK = 10003;
        var SCALE_CONSTANT = 100;
        var STATE_MOVE_LEFT = 11001;
        var STATE_MOVE_RIGHT = 11002;
        var ViewPager = (function (_super) {
            __extends(ViewPager, _super);
            function ViewPager(context) {
                var _this = _super.call(this, context) || this;
                _this.mPosition = 0;
                _this.mViewStack = new ArrayList();
                _this.mIndex = 0;
                _this.mSize = 0;
                _this.mAnimationState = 0;
                _this.mScale = 0;
                _this.mIsScaled = false;
                _this.mMin_speed = MIN_SPEED;
                _this.min_touch = MIN_TOUCH;
                _this.mLastAnimationTime = 0;
                _this.mCurrentAnimationTime = 0;
                _this.mSpeed = 130;
                _this.mAnimationEnd = true;
                _this.mCenterX = 0;
                _this.mCenterY = 0;
                _this.direction = 1;
                _this.init();
                return _this;
            }
            ViewPager.prototype.init = function () {
                var _this = this;
                var context = this.getContext();
                this.mMin_speed = MIN_SPEED * Device.density;
                this.mLayoutParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
                this.min_touch = 3;
                this.mHandler = new Handler();
                this.mHandler.handleMessage = function (msg) {
                    switch (msg.what) {
                        case MOVE_LEFT:
                            _this.doLeftOrBounceAnimation();
                            break;
                        case MOVE_RIGHT:
                            _this.doRightOrBounceAnimation();
                            break;
                    }
                };
            };
            ViewPager.prototype.setAreaTouchListener = function (l) {
                this.mAreaTouchListener = l;
            };
            ViewPager.prototype.onInterceptTouchEvent = function (evnt) {
                var action = evnt.action;
                var x = evnt.x;
                var y = evnt.y;
                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                        this.oldx = x;
                        this.oldy = y;
                        this.downX = x;
                        if (this.mAreaTouchListener) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    case MotionEvent.ACTION_MOVE:
                        if (y - this.oldy != 0) {
                            if (Math.abs(x - this.oldx) / Math.abs(y - this.oldy) > 2 && Math.abs(x - this.downX) > this.min_touch) {
                                return true;
                            }
                            else {
                                return false;
                            }
                        }
                        else {
                            return false;
                        }
                }
                return true;
            };
            ViewPager.prototype.onTouchEvent = function (event) {
                if (!this.mAnimationEnd) {
                    return true;
                }
                var action = event.action;
                var x = event.x;
                var y = event.y;
                if (this.mCurrentView == null)
                    return false;
                switch (action) {
                    case MotionEvent.ACTION_MOVE: {
                        Log.d("event", "move ");
                        this.direction = x - this.oldx > 0 ? 1 : -1;
                        this.move(x - this.oldx);
                        this.oldx = x;
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                    case MotionEvent.ACTION_CANCEL:
                        {
                            this.oldx = -1;
                            this.oldy = -1;
                            if (Math.abs(this.downX - x) == 0) {
                                if (x >= this.width / 4 * 3) {
                                    if (this.mAreaTouchListener != null) {
                                        this.mAreaTouchListener.onLeftTouch();
                                    }
                                }
                                else if (x <= this.width / 4) {
                                    if (this.mAreaTouchListener != null) {
                                        this.mAreaTouchListener.onRightTouch();
                                    }
                                }
                                else {
                                    if (this.mAreaTouchListener != null) {
                                        this.mAreaTouchListener.onMiddleTouch();
                                    }
                                }
                            }
                            else {
                                this.prepareToAnimation(this.direction * this.mMin_speed);
                            }
                            break;
                        }
                }
                return true;
            };
            ViewPager.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec, canvas) {
                var width = widthMeasureSpec.getMeasureValue();
                var height = heightMeasureSpec.getMeasureValue();
                this.mCenterX = width / 2;
                this.mCenterY = height / 2;
                for (var i = 0; i < this.mViewStack.size(); ++i) {
                    var child = this.mViewStack.get(i).view;
                    var lp = child.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    if (lp.heightMode === LayoutParams.MATCH_PARENT) {
                        h = height;
                    }
                    if (lp.widthMode === LayoutParams.MATCH_PARENT) {
                        w = width;
                    }
                    child.onMeasure(new MeasureSpec(w, lp.widthMode), new MeasureSpec(h, lp.heightMode), canvas);
                }
                var size = new Size(width, height);
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            ViewPager.prototype.onLayout = function (l, t, r, b, canvas) {
                this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                var innerrect = this.layoutInfo.innerrect;
                var width = r - l;
                var height = b - t;
                for (var i = 0; i < this.mViewStack.size(); ++i) {
                    var view_3 = this.mViewStack.get(i).view;
                    var pos = this.mViewStack.get(i).index;
                    var gap = pos - this.mIndex;
                    var viewleft = view_3.padding.leftPadding + (width - view_3.width) / 2;
                    var viewtop = view_3.padding.topPadding + (height - view_3.height) / 2;
                    gap = gap > 0 ? 0 : gap;
                    view_3.onLayout(viewleft + gap * width, viewtop, viewleft + gap * width + view_3.width, viewtop + view_3.height, canvas);
                }
            };
            ViewPager.prototype.dispatchDraw = function (canvas) {
                // super.dispatchDraw(canvas);
                // Log.d('dispatchDraw ' + this.mPosition);
                if (this.mAnimationState === STATE_MOVE_LEFT) {
                    this.drawChild(canvas, this.mNextView);
                    canvas.save();
                    canvas.translate(this.mPosition, 0);
                    this.drawChild(canvas, this.mCurrentView);
                    canvas.restore();
                }
                else if (this.mAnimationState === STATE_MOVE_RIGHT) {
                    this.drawChild(canvas, this.mCurrentView);
                    canvas.save();
                    canvas.translate(this.mPosition, 0);
                    this.drawChild(canvas, this.mPreView);
                    canvas.restore();
                }
                else {
                    this.drawChild(canvas, this.mCurrentView);
                }
            };
            ViewPager.prototype.setAdapter = function (adapter) {
                this.mOldAdapter = this.mAdapter;
                this.mAdapter = adapter;
                if (this.mAdapter != null) {
                    this.mDataSetObserver = new DataSetObserver();
                    var self = this;
                    this.mDataSetObserver.onChanged = function () {
                        self.mSize = self.mAdapter.getCount();
                    };
                    this.mDataSetObserver.onInvalidated = function () {
                        self.invalidate(false);
                    };
                    this.mAdapter.registerDataSetObserver(this.mDataSetObserver);
                    this.mSize = adapter.getCount();
                    this.refreshNormal();
                }
            };
            ViewPager.prototype.setCurrentItem = function (index) {
                Log.d('setCurrentItem ' + index);
                this.mIndex = index;
                this.refreshNormal();
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.getCurrentItem = function () {
                return this.mIndex;
            };
            ViewPager.prototype.setPagerChangedListener = function (listen) {
                this.listener = listen;
            };
            ViewPager.prototype.refreshNormal = function () {
                if (this.mAdapter) {
                    if (this.mIndex >= 0 && this.mIndex < this.mAdapter.getCount()) {
                        this.preRemove();
                        this.preLoad(this.mIndex);
                        for (var i = 0; i < this.mViewStack.size(); ++i) {
                            var view_4 = this.mViewStack.get(i).view;
                            var index = this.mViewStack.get(i).index;
                            if (index === this.mIndex) {
                                this.mCurrentView = view_4;
                                this.addView(view_4, 1, this.mLayoutParams);
                            }
                            if (index === this.mIndex - 1) {
                                this.mPreView = view_4;
                                this.addView(view_4, 0, this.mLayoutParams);
                            }
                            if (index === this.mIndex + 1) {
                                this.mNextView = view_4;
                                this.addView(view_4, 1, this.mLayoutParams);
                            }
                        }
                    }
                    else if (this.mAdapter.getCount() === 0 && this.mIndex === 0) {
                        return;
                    }
                    else {
                        throw 'current index is ' + this.mIndex + ' size is ' + this.mAdapter.getCount();
                    }
                }
            };
            ViewPager.prototype.preRemove = function () {
                for (var i = 0; i < this.mViewStack.size(); ++i) {
                    var view_5 = this.mViewStack.get(i).view;
                    var position = this.mViewStack.get(i).index;
                    this.removeView(view_5);
                    this.mAdapter.destoryItem(position, this);
                }
            };
            ViewPager.prototype.preLoad = function (position) {
                if (this.mAdapter !== null) {
                    this.mViewStack.clear();
                    this.mViewStack.add(this.preLoadPreView(position));
                    this.mViewStack.add(this.loadView(position));
                    this.mViewStack.add(this.preLoadNextView(position));
                }
            };
            ViewPager.prototype.preLoadPreView = function (position) {
                var pos = position - 1;
                return this.loadView(pos);
            };
            ViewPager.prototype.preLoadNextView = function (position) {
                var pos = position + 1;
                return this.loadView(pos);
            };
            ViewPager.prototype.loadView = function (index) {
                if (this.mAdapter === null) {
                    throw 'Null point Exception adapter is null';
                }
                var pos = index;
                if (pos >= this.mSize) {
                    pos = 0;
                }
                if (pos < 0) {
                    pos += this.mSize;
                }
                var view = this.mAdapter.initItem(pos, this);
                return new ItemInfo(view, index, pos);
            };
            ViewPager.prototype.move = function (dis) {
                Log.d("move " + dis);
                if (this.mPosition === 0 && dis !== 0) {
                    this.pagerChanged(this.mIndex, dis > 0 ? this.mIndex + 1 : this.mIndex - 1);
                }
                this.mPosition += dis;
                if (this.mPosition >= 0) {
                    this.mAnimationState = STATE_MOVE_RIGHT;
                }
                if (this.mPosition < 0) {
                    this.mAnimationState = STATE_MOVE_LEFT;
                }
                var movedegreepreView = this.mPosition / this.width;
                var movedegree = this.mPosition * (this.mIndex + 1) / this.width * this.mAdapter.getCount();
                this.pagerMoving(movedegreepreView, movedegree);
                this.invalidate(false);
            };
            ViewPager.prototype.prepareToAnimation = function (speed) {
                var now = Date.now();
                this.mAnimationEnd = false;
                this.mLastAnimationTime = now;
                this.mCurrentAnimationTime = now;
                this.mSpeed = speed;
                if (this.mSpeed === 0) {
                    this.mSpeed = this.mMin_speed;
                }
                if (speed > 0) {
                    this.mSpeed = Math.abs(this.mSpeed);
                    this.doRightOrBounceAnimation();
                }
                else {
                    this.mSpeed = -1 * Math.abs(this.mSpeed);
                    this.doLeftOrBounceAnimation();
                }
            };
            ViewPager.prototype.flipLeft = function () {
                Log.d("flipLeft " + this.mAnimationEnd);
                if (!this.mAnimationEnd)
                    return;
                this.mPosition = this.mCurrentView.left;
                this.move(-1);
                var now = Date.now();
                this.mAnimationEnd = false;
                this.mLastAnimationTime = now;
                this.mCurrentAnimationTime = now;
                this.mSpeed = -this.mMin_speed;
                this.doLeftOrBounceAnimation();
            };
            ViewPager.prototype.flipRight = function () {
                Log.d("filpRight " + this.mAnimationEnd);
                if (!this.mAnimationEnd)
                    return;
                this.mPosition = this.mCurrentView.left;
                this.move(1);
                var now = Date.now();
                this.mAnimationEnd = false;
                this.mLastAnimationTime = now;
                this.mCurrentAnimationTime = now;
                this.mSpeed = this.mMin_speed;
                this.doRightOrBounceAnimation();
            };
            ViewPager.prototype.doRightOrBounceAnimation = function () {
                var now = Date.now();
                var t = 1;
                var s = this.mSpeed * t;
                if (this.mPosition > 0) {
                    if (this.mPosition === this.width) {
                        this.mHandler.removeMessages(MOVE_RIGHT);
                        this.endRightanimation();
                        return;
                    }
                    if (s + this.mPosition > this.width) {
                        s = this.width - this.mPosition;
                    }
                }
                else {
                    if (this.mPosition === 0) {
                        this.mHandler.removeMessages(MOVE_RIGHT);
                        this.endBounceanimtion();
                        return;
                    }
                    if (s + this.mPosition > 0) {
                        s = -this.mPosition;
                    }
                }
                this.move(s);
                this.mCurrentAnimationTime += ANIMATION_FRAME_DURATION;
                this.mHandler.removeMessages(MOVE_LEFT);
                this.mHandler.removeMessages(MOVE_RIGHT);
                this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(MOVE_RIGHT), ANIMATION_FRAME_DURATION);
            };
            ViewPager.prototype.doLeftOrBounceAnimation = function () {
                // Log.d(TAG, "doleftAnimation  ");
                var now = Date.now();
                var t = 1; //(now - mLastAnimationTime)/1000;
                var s = (this.mSpeed * t);
                if (this.mPosition < 0) {
                    if (this.mPosition + this.width == 0) {
                        this.mHandler.removeMessages(MOVE_LEFT);
                        this.endLeftAnimation();
                        return;
                    }
                    if (s + this.mPosition + this.width < 0) {
                        s = -(this.mPosition + this.width);
                    }
                }
                else {
                    if (this.mPosition == 0) {
                        this.mHandler.removeMessages(MOVE_LEFT);
                        this.endBounceanimtion();
                        return;
                    }
                    if (s + this.mPosition < 0) {
                        s = -this.mPosition;
                    }
                }
                this.move(s);
                this.mCurrentAnimationTime += ANIMATION_FRAME_DURATION;
                this.mHandler.removeMessages(MOVE_LEFT);
                this.mHandler.removeMessages(MOVE_RIGHT);
                this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(MOVE_LEFT), ANIMATION_FRAME_DURATION);
            };
            ViewPager.prototype.endBounceanimtion = function () {
                Log.d("endBounceanimtion  ");
                this.mAnimationEnd = true;
                this.mScale = 0;
                this.mPosition = 0;
                this.mAnimationState = 0;
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.endRightanimation = function () {
                Log.d("endRightanimation   ");
                var index = this.mIndex - 1;
                if (index < 0) {
                    index = this.mAdapter.getCount() + index;
                }
                this.mPosition = 0;
                this.mScale = 0;
                this.mAnimationState = 0;
                this.setCurrentItem(index);
                this.mAnimationEnd = true;
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.endLeftAnimation = function () {
                Log.d("endLeftAnimation   ");
                var index = this.mIndex + 1;
                this.mPosition = 0;
                this.mScale = 0;
                index = index % this.mAdapter.getCount();
                this.mAnimationState = 0;
                this.setCurrentItem(index);
                this.mAnimationEnd = true;
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.pagerChanged = function (position, targetPosition) {
                if (this.listener != null) {
                    this.listener.onPagerChanged(position, targetPosition);
                }
            };
            ViewPager.prototype.pagerMoving = function (movedegreepreView, movedegree) {
                if (this.listener != null) {
                    this.listener.onPagerMoving(-1 * movedegreepreView, -1 * movedegree);
                }
            };
            ViewPager.prototype.pagerMovingEnd = function (position) {
                if (this.listener != null) {
                    this.listener.onPagerMovingEnd(position);
                }
            };
            return ViewPager;
        }(ViewGroup));
        widget.ViewPager = ViewPager;
        var ItemInfo = (function () {
            function ItemInfo(v, i, pos) {
                this.view = v;
                this.index = i;
                this.position = pos;
            }
            return ItemInfo;
        }());
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var animation;
        (function (animation) {
            var AnimationType;
            (function (AnimationType) {
                AnimationType[AnimationType["Alpha"] = 0] = "Alpha";
                AnimationType[AnimationType["Translate"] = 1] = "Translate";
                AnimationType[AnimationType["Scale"] = 2] = "Scale";
                AnimationType[AnimationType["Rotate"] = 3] = "Rotate";
            })(AnimationType = animation.AnimationType || (animation.AnimationType = {}));
        })(animation = view.animation || (view.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view_6) {
        var animation;
        (function (animation) {
            var ScaleAnimation = (function (_super) {
                __extends(ScaleAnimation, _super);
                function ScaleAnimation() {
                    var _this = _super.call(this) || this;
                    _this.duration = 0;
                    return _this;
                }
                Object.defineProperty(ScaleAnimation.prototype, "isAniamtionEnd", {
                    get: function () {
                        return this.start + this.duration < Date.now();
                    },
                    enumerable: true,
                    configurable: true
                });
                ScaleAnimation.prototype.scale = function (now) {
                    console.log("ease " + ((now - this.start) / this.duration));
                    return this.ease.ease((now - this.start) / this.duration);
                };
                ScaleAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                    // canvas.moveto(view.left+view.width/2,view.top +view.height/2);
                    canvas.scale(this.from + (this.to - this.from) * interpolatedTime, this.from + (this.to - this.from) * interpolatedTime);
                };
                return ScaleAnimation;
            }(animation.Animation));
            animation.ScaleAnimation = ScaleAnimation;
        })(animation = view_6.animation || (view_6.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var RenderState = (function () {
            function RenderState(rect, index) {
                this.currentRect = rect;
                this.index = index;
            }
            return RenderState;
        }());
        view.RenderState = RenderState;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZHJvaWQvYXBwL0ludGVudC50cyIsImFuZHJvaWQvZ3JhcGhpY3MvUG9pbnQudHMiLCJhbmRyb2lkL2dyYXBoaWNzL1V0aWwudHMiLCJhbmRyb2lkL2RldmljZS9EZXZpY2UudHMiLCJhbmRyb2lkL3V0aWwvTG9nLnRzIiwiYW5kcm9pZC9kZXZpY2UvRGVmYXVsdC50cyIsImFuZHJvaWQvZ3JhcGhpY3MvQ2FudmFzLnRzIiwiYW5kcm9pZC9hcHAvQ29udGV4dC50cyIsImFuZHJvaWQvdmlldy9pbnRlcmZhY2UvSVZpZXcudHMiLCJhbmRyb2lkL3ZpZXcvaW50ZXJmYWNlL0lWaWV3R3JvdXAudHMiLCJhbmRyb2lkL2dyYXBoaWNzL1NpemUudHMiLCJhbmRyb2lkL2dyYXBoaWNzL01hcmdpbnMudHMiLCJhbmRyb2lkL2dyYXBoaWNzL1JlY3QudHMiLCJhbmRyb2lkL3ZpZXcvaW1wbGVtZW50aW9uL0xheW91dEluZm8udHMiLCJhbmRyb2lkL3ZpZXcvZXZlbnQvTW90aW9uRXZlbnQudHMiLCJhbmRyb2lkL3ZpZXcvYW5pbWF0aW9uL0FuaW1hdGlvbi50cyIsImFuZHJvaWQvdmlldy9hbmltYXRpb24vQW5pbWF0aW9uRWFzZS50cyIsImFuZHJvaWQvdmlldy9pbXBsZW1lbnRpb24vVmlldy50cyIsImFuZHJvaWQvdmlldy9pbXBsZW1lbnRpb24vVmlld0dyb3VwLnRzIiwiYW5kcm9pZC93aWRnZXQvRnJhbWVMYXlvdXQudHMiLCJhbmRyb2lkL2FwcC9BY3Rpdml0eS50cyIsImFuZHJvaWQvd2lkZ2V0L1Jvb3RWaWV3LnRzIiwiYW5kcm9pZC9hcHAvQWN0aXZpdHlNYW5hZ2VyLnRzIiwiYW5kcm9pZC9zdGFydHVwLnRzIiwiYW5kcm9pZC9kYXRhYmFzZS9EYXRhU2V0T2JzZXJ2ZXIudHMiLCJhbmRyb2lkL2RhdGFiYXNlL0RhdGFTZXRPYnNlcnZhYmxlLnRzIiwiYW5kcm9pZC9hZGFwdGVyL0FkYXB0ZXIudHMiLCJhbmRyb2lkL2FkYXB0ZXIvVmlld1BhZ2VyQWRhcHRlci50cyIsImFuZHJvaWQvYXBwL0J1bmRsZS50cyIsImFuZHJvaWQvZ3JhcGhpY3MvQWxpZ24udHMiLCJhbmRyb2lkL2dyYXBoaWNzL0FsaWduRWxlbWVudC50cyIsImFuZHJvaWQvZ3JhcGhpY3MvUmVuZGVyQ2FudmFzLnRzIiwiYW5kcm9pZC9ncmFwaGljcy9SZW5kZXJTdmcudHMiLCJhbmRyb2lkL2dyYXBoaWNzL1RleHRQYWludC50cyIsImFuZHJvaWQvdXRpbC9BcnJheUxpc3QudHMiLCJhbmRyb2lkL3V0aWwvTWVzc2FnZS50cyIsImFuZHJvaWQvdXRpbC9IYW5kbGVyLnRzIiwiYW5kcm9pZC93aWRnZXQvSW1hZ2VWaWV3LnRzIiwiYW5kcm9pZC93aWRnZXQvTGluZWFyTGF5b3V0LnRzIiwiYW5kcm9pZC93aWRnZXQvTGlzdFZpZXcudHMiLCJhbmRyb2lkL3dpZGdldC9UZXh0Vmlldy50cyIsImFuZHJvaWQvd2lkZ2V0L1ZpZXdQYWdlci50cyIsImFuZHJvaWQvdmlldy9hbmltYXRpb24vQW5pbWF0aW9uVHlwZS50cyIsImFuZHJvaWQvdmlldy9hbmltYXRpb24vU2NhbGVBbmltYXRpb24udHMiLCJhbmRyb2lkL3ZpZXcvaW1wbGVtZW50aW9uL1JlbmRlclN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBVSxPQUFPLENBZWhCO0FBZkQsV0FBVSxPQUFPO0lBQUMsSUFBQSxHQUFHLENBZXBCO0lBZmlCLFdBQUEsR0FBRztRQUNqQjtZQUFBO1lBYUEsQ0FBQztZQVZXLHlCQUFRLEdBQWYsVUFBZ0IsQ0FBUyxFQUFFLGFBQWlCO2dCQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFFLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztZQUM1QyxDQUFDO1lBQ00seUJBQVEsR0FBZjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3BDLENBQUM7WUFDTSwyQkFBVSxHQUFqQjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN4QixDQUFDO1lBQ04sYUFBQztRQUFELENBYkEsQUFhQyxJQUFBO1FBYlksVUFBTSxTQWFsQixDQUFBO0lBQ0wsQ0FBQyxFQWZpQixHQUFHLEdBQUgsV0FBRyxLQUFILFdBQUcsUUFlcEI7QUFBRCxDQUFDLEVBZlMsT0FBTyxLQUFQLE9BQU8sUUFlaEI7QUNmRCxJQUFVLE9BQU8sQ0F1RmhCO0FBdkZELFdBQVUsT0FBTztJQUFDLElBQUEsUUFBUSxDQXVGekI7SUF2RmlCLFdBQUEsUUFBUTtRQUV0Qjs7V0FFRztRQUNIO1lBTUksZUFBbUIsQ0FBVSxFQUFFLENBQVU7Z0JBQ3JDLEVBQUUsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztvQkFDVixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDZixDQUFDO2dCQUFBLElBQUksQ0FBQSxDQUFDO29CQUNGLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLENBQUM7Z0JBRUQsRUFBRSxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO29CQUNWLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLENBQUM7Z0JBQUEsSUFBSSxDQUFDLENBQUM7b0JBQ0gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsQ0FBQztZQUVMLENBQUM7WUFFRDs7ZUFFRztZQUNJLG1CQUFHLEdBQVYsVUFBVyxDQUFTLEVBQUUsQ0FBUztnQkFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixDQUFDO1lBRUQ7O2VBRUc7WUFDSSxzQkFBTSxHQUFiO2dCQUNJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNyQixDQUFDO1lBRUQ7O2VBRUc7WUFDSSxzQkFBTSxHQUFiLFVBQWMsRUFBVSxFQUFFLEVBQVU7Z0JBQ2hDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pCLENBQUM7WUFFRDs7ZUFFRztZQUNJLHNCQUFNLEdBQWIsVUFBYyxDQUFTLEVBQUUsQ0FBUztnQkFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RDLENBQUM7WUFFTSwwQkFBVSxHQUFqQixVQUFrQixFQUFRO2dCQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxDQUFDO1lBR00sd0JBQVEsR0FBZjtnQkFDSSxJQUFJLE1BQU0sR0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2xCLENBQUM7WUFHTSx3QkFBUSxHQUFmO2dCQUNJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDbkQsQ0FBQztZQUVEOztlQUVHO1lBRUksZ0NBQWdCLEdBQXZCO2dCQUNJLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDO1lBRU0scUJBQUssR0FBWjtnQkFDSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsQ0FBQztZQUVMLFlBQUM7UUFBRCxDQWhGQSxBQWdGQyxJQUFBO1FBaEZZLGNBQUssUUFnRmpCLENBQUE7SUFFTCxDQUFDLEVBdkZpQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQXVGekI7QUFBRCxDQUFDLEVBdkZTLE9BQU8sS0FBUCxPQUFPLFFBdUZoQjtBQ3JGRCxJQUFVLE9BQU8sQ0EyTWhCO0FBM01ELFdBQVUsT0FBTztJQUFDLElBQUEsUUFBUSxDQTJNekI7SUEzTWlCLFdBQUEsUUFBUTtRQUV0QixJQUFPLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUVwQyxJQUFZLE9BT1g7UUFQRCxXQUFZLE9BQU87WUFDZixxQ0FBSSxDQUFBO1lBQ0oseUNBQU0sQ0FBQTtZQUNOLHVDQUFLLENBQUE7WUFDTCxtQ0FBRyxDQUFBO1lBQ0gseUNBQU0sQ0FBQTtZQUNOLHFDQUFJLENBQUE7UUFDUixDQUFDLEVBUFcsT0FBTyxHQUFQLGdCQUFPLEtBQVAsZ0JBQU8sUUFPbEI7UUFFRDtZQUtJLGlCQUFZLE9BQWdCO2dCQUN4QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUNWLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUMzQixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQixDQUFDO1lBQ0wsQ0FBQztZQUNELHNCQUFJLDRCQUFPO3FCQUFYLFVBQVksT0FBZTtvQkFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7Z0JBQzFGLENBQUM7OztlQUFBO1lBQ0wsY0FBQztRQUFELENBZkEsQUFlQyxJQUFBO1FBZlksZ0JBQU8sVUFlbkIsQ0FBQTtRQUVELElBQVksUUFLWDtRQUxELFdBQVksUUFBUTtZQUNoQix1Q0FBSSxDQUFBO1lBQ0oscUNBQUcsQ0FBQTtZQUNILHlDQUFLLENBQUE7WUFDTCwyQ0FBTSxDQUFBO1FBQ1YsQ0FBQyxFQUxXLFFBQVEsR0FBUixpQkFBUSxLQUFSLGlCQUFRLFFBS25CO1FBRUQsSUFBWSxXQUdYO1FBSEQsV0FBWSxXQUFXO1lBQ25CLHlEQUFVLENBQUE7WUFDVixxREFBUSxDQUFBO1FBQ1osQ0FBQyxFQUhXLFdBQVcsR0FBWCxvQkFBVyxLQUFYLG9CQUFXLFFBR3RCO1FBRUQ7WUFJSSxxQkFBWSxXQUFtQixFQUFFLFdBQW1CO2dCQUNoRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7WUFDbkMsQ0FBQztZQUNELGlDQUFXLEdBQVg7Z0JBQ0ksTUFBTSxDQUFDO29CQUNILGNBQWMsRUFBQyxJQUFJLENBQUMsV0FBVztvQkFDL0IsUUFBUSxFQUFDLElBQUksQ0FBQyxXQUFXO2lCQUM1QixDQUFBO1lBQ0wsQ0FBQztZQUNELDJCQUFLLEdBQUw7Z0JBQ0ksTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzlELENBQUM7WUFDTCxrQkFBQztRQUFELENBakJBLEFBaUJDLElBQUE7UUFqQlksb0JBQVcsY0FpQnZCLENBQUE7UUFFRDtZQUNJLGNBQVksRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVO2dCQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUNwQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQztnQkFDOUIsQ0FBQztZQUNMLENBQUM7WUFJRCx1QkFBUSxHQUFSO2dCQUNJLE1BQU0sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDckgsQ0FBQztZQUNNLG9CQUFLLEdBQVo7Z0JBQ0ksTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDcEUsQ0FBQztZQUNMLFdBQUM7UUFBRCxDQWxCQSxBQWtCQyxJQUFBO1FBbEJZLGFBQUksT0FrQmhCLENBQUE7UUFFRDtZQUNJLGVBQWEsRUFBVSxFQUFFLElBQVUsRUFBQyxNQUFrQjtnQkFFbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztZQUM5QixDQUFDO1lBS0wsWUFBQztRQUFELENBWEEsQUFXQyxJQUFBO1FBWFksY0FBSyxRQVdqQixDQUFBO1FBRUQ7WUFBQTtZQTRHQSxDQUFDO1lBM0dXLGNBQVMsR0FBaEIsVUFBaUIsTUFBVztnQkFDekIsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO29CQUNoQixDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQztvQkFDNUIsQ0FBQyxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUM7b0JBQzVCLENBQUMsT0FBTyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNsQixDQUFDO2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO29CQUNmLEdBQUcsQ0FBQyxDQUFhLFVBQU0sRUFBTixpQkFBTSxFQUFOLG9CQUFNLEVBQU4sSUFBTTt3QkFBbEIsSUFBSSxJQUFJLGVBQUE7d0JBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7cUJBQ3BDO29CQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2pCLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM5QixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3RDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxXQUFXLEdBQVEsRUFBRSxDQUFDO29CQUMxQixHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNyQixFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDOzRCQUNuQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNuQyxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNKLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNuRCxDQUFDO29CQUNMLENBQUM7b0JBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQztnQkFDdkIsQ0FBQztZQUNMLENBQUM7WUFFTSxhQUFRLEdBQWYsVUFBZ0IsSUFBVSxFQUFFLEVBQVM7Z0JBQ2pDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3JGLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixDQUFDO1lBQ00sWUFBTyxHQUFkLFVBQWUsS0FBWSxFQUFFLElBQVU7Z0JBQ25DLElBQUksSUFBSSxHQUFTLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3pGLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUNNLGdCQUFXLEdBQWxCLFVBQW1CLEtBQVk7Z0JBQzNCLE1BQU0sQ0FBQztvQkFDSCxXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFO29CQUNsRCxhQUFhLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFO29CQUN0RCxZQUFZLEVBQUMsS0FBSyxDQUFDLElBQUksR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxPQUFPO29CQUNwRCxNQUFNLEVBQUUsS0FBSyxDQUFDLFVBQVU7b0JBQ3hCLFFBQVEsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFDLEVBQUU7b0JBQzVELGNBQWMsRUFBQyxLQUFLLENBQUMsV0FBVyxHQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFDLENBQUM7aUJBQ25FLENBQUE7WUFDTCxDQUFDO1lBQ00sVUFBSyxHQUFaO2dCQUFhLGVBQWdCO3FCQUFoQixVQUFnQixFQUFoQixxQkFBZ0IsRUFBaEIsSUFBZ0I7b0JBQWhCLDBCQUFnQjs7Z0JBQ3pCLElBQUksSUFBSSxHQUFTLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxJQUFJLEdBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUUsT0FBQSxDQUFDLENBQUMsSUFBSSxFQUFOLENBQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUUsT0FBQSxDQUFDLENBQUMsR0FBRyxFQUFMLENBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUUsT0FBQSxDQUFDLENBQUMsS0FBSyxFQUFQLENBQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUUsT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUVNLGFBQVEsR0FBZixVQUFnQixHQUFHO2dCQUVmLElBQUksY0FBYyxHQUFHLGtDQUFrQyxDQUFDO2dCQUN4RCxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUNsRCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxDQUFDO2dCQUVILElBQUksTUFBTSxHQUFHLDJDQUEyQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkUsTUFBTSxDQUFDLE1BQU0sR0FBRztvQkFDWixDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQzFCLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDMUIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO2lCQUM3QixHQUFHLElBQUksQ0FBQztZQUNiLENBQUM7WUFFTSxhQUFRLEdBQWYsVUFBZ0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNuQixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFGLENBQUM7WUFDTSxtQkFBYyxHQUFyQixVQUFzQixDQUFDO2dCQUNuQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDN0MsQ0FBQztZQUNNLFdBQU0sR0FBYixVQUFjLEtBQWEsRUFBRSxRQUFhLEVBQUUsTUFBYztnQkFBZCx1QkFBQSxFQUFBLGNBQWM7Z0JBQ3RELEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDO29CQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUMvQyxDQUFDO1lBQ00sWUFBTyxHQUFkLFVBQWUsRUFBUSxFQUFFLEVBQVE7Z0JBQzdCLElBQUksT0FBTyxHQUFZLEtBQUssQ0FBQztnQkFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztzQkFDM0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztzQkFDaEYsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEYsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDbkIsQ0FBQztnQkFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ25CLENBQUM7WUFFTSxpQkFBWSxHQUFuQixVQUFvQixFQUFPLEVBQUMsRUFBTztnQkFDL0IsSUFBSSxHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksSUFBRyxFQUFFLENBQUMsSUFBSTtvQkFDakIsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRztvQkFDaEIsRUFBRSxDQUFDLEtBQUssSUFBRyxFQUFFLENBQUMsS0FBSztvQkFDbkIsRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO2dCQUN6QyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ2YsQ0FBQztZQU9MLFdBQUM7UUFBRCxDQTVHQSxBQTRHQyxJQUFBO1FBNUdZLGFBQUksT0E0R2hCLENBQUE7SUFDTCxDQUFDLEVBM01pQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQTJNekI7QUFBRCxDQUFDLEVBM01TLE9BQU8sS0FBUCxPQUFPLFFBMk1oQjtBQzdNRCxJQUFVLE9BQU8sQ0F3Q2hCO0FBeENELFdBQVUsT0FBTztJQUFDLElBQUEsTUFBTSxDQXdDdkI7SUF4Q2lCLFdBQUEsTUFBTTtRQUNwQjtZQUFBO1lBcUNBLENBQUM7WUFoQ0csc0JBQVcsZUFBSztxQkFRaEI7b0JBQ0ksY0FBYztvQkFDZCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDL0UsQ0FBQztvQkFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRTtnQkFDMUIsQ0FBQztxQkFkRCxVQUFpQixLQUFhO29CQUMxQixNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDMUIsQ0FBQzs7O2VBQUE7WUFFRCxzQkFBVyxnQkFBTTtxQkFZakI7b0JBQ0ksY0FBYztvQkFDZCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQzs0QkFDckMsTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO29CQUMzQyxDQUFDO29CQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFFO2dCQUMzQixDQUFDO3FCQW5CRCxVQUFrQixLQUFhO29CQUMzQixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztnQkFDM0IsQ0FBQzs7O2VBQUE7WUFtQkQsc0JBQVcsaUJBQU87cUJBQWxCO29CQUNJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDeEIsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7b0JBQ25HLENBQUM7b0JBQ0QsMEJBQTBCO29CQUMxQixNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNiLENBQUM7OztlQUFBO1lBQ0wsYUFBQztRQUFELENBckNBLEFBcUNDO1FBcENrQixlQUFRLEdBQVcsQ0FBQyxDQUFDO1FBQ3JCLGFBQU0sR0FBVyxDQUFDLENBQUM7UUFDbkIsY0FBTyxHQUFXLENBQUMsQ0FBQztRQUgxQixhQUFNLFNBcUNsQixDQUFBO0lBRUwsQ0FBQyxFQXhDaUIsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBd0N2QjtBQUFELENBQUMsRUF4Q1MsT0FBTyxLQUFQLE9BQU8sUUF3Q2hCO0FDeENELElBQVUsT0FBTyxDQVloQjtBQVpELFdBQVUsT0FBTztJQUFDLElBQUEsSUFBSSxDQVlyQjtJQVppQixXQUFBLElBQUk7UUFDakI7WUFBQTtZQVVBLENBQUM7WUFUVSxLQUFDLEdBQVIsVUFBUyxPQUFjLEVBQUMsR0FBVztnQkFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixDQUFDO1lBQ00sS0FBQyxHQUFSLFVBQVMsT0FBYyxFQUFDLEdBQVc7Z0JBQ2hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNNLEtBQUMsR0FBUixVQUFTLE9BQWMsRUFBQyxHQUFXO2dCQUMvQixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFDTCxVQUFDO1FBQUQsQ0FWQSxBQVVDLElBQUE7UUFWWSxRQUFHLE1BVWYsQ0FBQTtJQUNOLENBQUMsRUFaaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBWXJCO0FBQUQsQ0FBQyxFQVpTLE9BQU8sS0FBUCxPQUFPLFFBWWhCO0FDWkQsNENBQTRDO0FBRTVDLElBQVUsT0FBTyxDQWVoQjtBQWZELFdBQVUsT0FBTztJQUFDLElBQUEsTUFBTSxDQWV2QjtJQWZpQixXQUFBLE1BQU07UUFDcEIsSUFBTyxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbEQsSUFBTyxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdEM7WUFBQTtZQVVBLENBQUM7WUFURyxzQkFBVyxlQUFJO3FCQUFmO29CQUNJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUMsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNsQyxDQUFDOzs7ZUFBQTtZQUNELHNCQUFXLHNCQUFXO3FCQUF0QjtvQkFDSSxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QyxDQUFDOzs7ZUFBQTtZQUNELHNCQUFXLGdCQUFLO3FCQUFoQjtvQkFDSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM5RCxDQUFDOzs7ZUFBQTtZQUNMLGNBQUM7UUFBRCxDQVZBLEFBVUMsSUFBQTtRQVZZLGNBQU8sVUFVbkIsQ0FBQTtJQUNMLENBQUMsRUFmaUIsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBZXZCO0FBQUQsQ0FBQyxFQWZTLE9BQU8sS0FBUCxPQUFPLFFBZWhCO0FDakJELGlDQUFpQztBQUNqQyxnQ0FBZ0M7QUFDaEMsNENBQTRDO0FBQzVDLHVDQUF1QztBQUN2Qyw2Q0FBNkM7QUFHN0MsSUFBVSxPQUFPLENBdVJoQjtBQXZSRCxXQUFVLE9BQU87SUFBQyxJQUFBLFFBQVEsQ0F1UnpCO0lBdlJpQixXQUFBLFFBQVE7UUFFdEIsSUFBTyxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFHdEMsSUFBTyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdEMsSUFBTyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFFeEMsSUFBWSxVQUdYO1FBSEQsV0FBWSxVQUFVO1lBQ2xCLCtDQUFNLENBQUE7WUFDTix5Q0FBRyxDQUFBO1FBQ1AsQ0FBQyxFQUhXLFVBQVUsR0FBVixtQkFBVSxLQUFWLG1CQUFVLFFBR3JCO1FBQ0Q7WUFHSSxxQkFBWSxDQUFDLEVBQUUsQ0FBQztnQkFGaEIsWUFBTyxHQUFXLENBQUMsQ0FBQztnQkFDcEIsWUFBTyxHQUFXLENBQUMsQ0FBQztnQkFFaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLENBQUM7WUFDTCxrQkFBQztRQUFELENBUEEsQUFPQyxJQUFBO1FBRUQsSUFBTSxLQUFLLEdBQUcsVUFBQSxLQUFLLElBQUksT0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQS9CLENBQStCLENBQUM7UUFDdkQ7WUFRSSxnQkFBWSxPQUFvQixFQUFFLElBQWdCO2dCQUoxQyxZQUFPLEdBQVcsQ0FBQyxDQUFDO2dCQUNwQixZQUFPLEdBQVcsQ0FBQyxDQUFDO2dCQUNwQixlQUFVLEdBQWtCLEVBQUUsQ0FBQztnQkFHbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2dCQUN4QixFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxTQUFBLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDMUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7b0JBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQU05RCxDQUFDO2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxTQUFBLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDNUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7b0JBQzFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO29CQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDOUQsQ0FBQztZQUNMLENBQUM7WUFHRCxxQkFBSSxHQUFKO2dCQUNJLElBQUksS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN4QixDQUFDO1lBRUQscUJBQUksR0FBSixVQUFLLElBQVU7Z0JBQ1gsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNyQixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsb0hBQW9IO1lBQ3hILENBQUM7WUFJRCx3QkFBTyxHQUFQO2dCQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO29CQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQ2pDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQixDQUFDO2dCQUNELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0IsQ0FBQztZQUVELGdDQUFlLEdBQWYsVUFBZ0IsQ0FBUyxFQUFFLENBQVM7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QyxDQUFDO1lBRUQsOEJBQWEsR0FBYixVQUFjLEdBQVcsRUFBRSxJQUFVLEVBQUUsT0FBZ0I7Z0JBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDUixJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDaEMsQ0FBQztnQkFDRCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3JCLENBQUMsQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztnQkFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkQsQ0FBQztZQUVELHVDQUFzQixHQUF0QixVQUF1QixHQUFXLEVBQUUsSUFBVTtZQUU5QyxDQUFDO1lBRUQseUJBQVEsR0FBUixVQUFTLEdBQVcsRUFBRSxFQUFTLEVBQUUsQ0FBTyxFQUFFLE1BQWMsRUFBRSxLQUFjO2dCQUNwRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ0wsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzdCLENBQUM7Z0JBQ0QsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksSUFBSSxHQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO2dCQUNoQyxJQUFJLE9BQU8sR0FBVSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3JCLHFGQUFxRjtnQkFDckYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDekMsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN0RSxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ2hELENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUMzQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO29CQUN0SSxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO29CQUNoSCxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1lBRUQsNEJBQVcsR0FBWCxVQUFZLElBQVksRUFBRSxHQUFhLEVBQUUsSUFBVTtnQkFDL0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQy9CLE1BQU0sMkJBQTJCLENBQUM7Z0JBQ3RDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNSLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUN4QixDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLElBQUksRUFBRSxHQUFVLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDaEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQzt3QkFDckMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMzQiw0Q0FBNEM7d0JBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3pDLENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztnQkFFUixDQUFDO1lBQ0wsQ0FBQztZQUVELHlCQUFRLEdBQVIsVUFBUyxHQUFVLEVBQUUsR0FBVSxFQUFFLFdBQXdCO2dCQUNyRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBQ2QsTUFBTSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDakMsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixNQUFNLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDekMsQ0FBQztnQkFDRCxJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzdCLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFFM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDdEYsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM5QyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RixDQUFDO1lBQ0wsQ0FBQztZQUVELDBCQUFTLEdBQVQsVUFBVSxFQUFZLEVBQUUsRUFBWSxFQUFFLFdBQXdCO2dCQUMxRCxvRUFBb0U7Z0JBQ3BFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDbEIsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDZCxNQUFNLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUN6QyxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzNDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osTUFBTSxDQUFDLFNBQVMsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7b0JBQzFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxDQUFDO1lBQ0wsQ0FBQztZQUNELHlCQUFRLEdBQVIsVUFBUyxHQUFVLEVBQUUsR0FBVSxFQUFFLElBQWEsRUFBRSxLQUFhO2dCQUN6RCxJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzdCLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFFM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN6SCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzlDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzVDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ1AsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUMzSSxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUVwSyxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1lBQ0Qsd0JBQU8sR0FBUCxVQUFRLElBQVUsRUFBRSxVQUFrQixFQUFFLFVBQWtCLEVBQUUsS0FBYTtnQkFDckUsSUFBSSxFQUFFLEdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN6RSxJQUFJLEVBQUUsR0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3hFLElBQUksQ0FBQyxHQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDMUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDbkcsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNqRixDQUFDO1lBQ0wsQ0FBQztZQUdELDBCQUFTLEdBQVQsVUFBVSxFQUFVLEVBQUUsRUFBVSxFQUFFLE1BQWMsRUFBRSxXQUFtQixFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxLQUFhO2dCQUN4SCxJQUFJLEdBQUcsR0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDcEMsSUFBSSxHQUFHLEdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3BDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUN6SCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzdGLENBQUM7WUFDTCxDQUFDO1lBRUQseUJBQVEsR0FBUixVQUFTLElBQVUsRUFBRSxLQUFhO1lBRWxDLENBQUM7WUFHRCxzQkFBVyx5QkFBSztnQkFEaEIsMkJBQTJCO3FCQUMzQixVQUFpQixLQUFhO29CQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQy9CLENBQUM7OztlQUFBO1lBQ0QsNEJBQVcsR0FBWCxVQUFZLEVBQVksRUFBRSxFQUFZLEVBQUUsS0FBYTtnQkFDakQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDOUQsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUM1QyxDQUFDO1lBRUwsQ0FBQztZQUVELDBCQUFTLEdBQVQsVUFBVSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO2dCQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QyxDQUFDO1lBRUQseUJBQVEsR0FBUixVQUFTLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVU7Z0JBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNyRCxDQUFDO1lBRUQseUJBQVEsR0FBUixVQUFTLFNBQW9CLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxNQUFlLEVBQUUsTUFBZSxFQUFFLFVBQW1CLEVBQUUsV0FBb0I7Z0JBQzlILElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzFGLENBQUM7WUFFRCxzQkFBSyxHQUFMO2dCQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0IsQ0FBQztZQUVELG9CQUFHLEdBQUg7Z0JBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM3QixDQUFDO1lBQ0QsdUJBQU0sR0FBTixVQUFPLENBQVEsRUFBQyxDQUFRO2dCQUNwQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDO29CQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLENBQUM7WUFDTCxDQUFDO1lBRUQsc0JBQUssR0FBTCxVQUFNLEVBQVUsRUFBRSxFQUFVO2dCQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUM1QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQzlCLENBQUM7WUFDTCxDQUFDO1lBQ0QsdUJBQU0sR0FBTixVQUFPLE1BQWM7Z0JBQ2pCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO1lBQ0wsQ0FBQztZQUVELDBCQUFTLEdBQVQsVUFBVSxDQUFTLEVBQUUsQ0FBUztnQkFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLENBQUM7WUFDTCxDQUFDO1lBR0wsYUFBQztRQUFELENBaFFBLEFBZ1FDLElBQUE7UUFoUVksZUFBTSxTQWdRbEIsQ0FBQTtJQUNMLENBQUMsRUF2UmlCLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBdVJ6QjtBQUFELENBQUMsRUF2UlMsT0FBTyxLQUFQLE9BQU8sUUF1UmhCO0FDOVJELElBQVUsT0FBTyxDQUloQjtBQUpELFdBQVUsT0FBTztJQUFDLElBQUEsR0FBRyxDQUlwQjtJQUppQixXQUFBLEdBQUc7UUFDakI7WUFBQTtZQUVBLENBQUM7WUFBRCxjQUFDO1FBQUQsQ0FGQSxBQUVDLElBQUE7UUFGWSxXQUFPLFVBRW5CLENBQUE7SUFDTCxDQUFDLEVBSmlCLEdBQUcsR0FBSCxXQUFHLEtBQUgsV0FBRyxRQUlwQjtBQUFELENBQUMsRUFKUyxPQUFPLEtBQVAsT0FBTyxRQUloQjtBQ0pELCtDQUErQztBQ0EvQywrQ0FBK0M7QUFDL0MsaUNBQWlDO0FDRGpDLElBQVUsT0FBTyxDQWVoQjtBQWZELFdBQVUsT0FBTztJQUFDLElBQUEsUUFBUSxDQWV6QjtJQWZpQixXQUFBLFFBQVE7UUFDdEI7WUFHSSxjQUFZLENBQVMsRUFBRSxDQUFTO2dCQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDZixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNwQixDQUFDO1lBQ0Qsb0JBQUssR0FBTDtnQkFDSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0MsQ0FBQztZQUNNLHVCQUFRLEdBQWY7Z0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDM0MsQ0FBQztZQUNMLFdBQUM7UUFBRCxDQWJBLEFBYUMsSUFBQTtRQWJZLGFBQUksT0FhaEIsQ0FBQTtJQUNMLENBQUMsRUFmaUIsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFlekI7QUFBRCxDQUFDLEVBZlMsT0FBTyxLQUFQLE9BQU8sUUFlaEI7QUNmRCxJQUFVLE9BQU8sQ0ErQmhCO0FBL0JELFdBQVUsT0FBTztJQUFDLElBQUEsUUFBUSxDQStCekI7SUEvQmlCLFdBQUEsUUFBUTtRQUV0QjtZQUtJLGdCQUFZLFVBQWtCLEVBQzFCLFdBQW1CLEVBQ25CLFNBQWlCLEVBQ2pCLFlBQW9CO2dCQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO2dCQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQTtZQUNwQyxDQUFDO1lBQ0QsZ0NBQWUsR0FBZjtnQkFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUM3QixDQUFDO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzNCLENBQUM7WUFDRCxnQ0FBZSxHQUFmO2dCQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQzNDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQzlCLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDMUIsQ0FBQztZQUVMLGFBQUM7UUFBRCxDQTNCQSxBQTJCQyxJQUFBO1FBM0JZLGVBQU0sU0EyQmxCLENBQUE7SUFFTCxDQUFDLEVBL0JpQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQStCekI7QUFBRCxDQUFDLEVBL0JTLE9BQU8sS0FBUCxPQUFPLFFBK0JoQjtBQy9CRCxpQ0FBaUM7QUFFakMsSUFBVSxPQUFPLENBbUhoQjtBQW5IRCxXQUFVLE9BQU87SUFBQyxJQUFBLFFBQVEsQ0FtSHpCO0lBbkhpQixXQUFBLFFBQVE7UUFFdEIsSUFBTyxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdEM7WUFRSSxjQUFZLElBQVksRUFBRSxHQUFXLEVBQUUsS0FBYSxFQUFFLE1BQWM7Z0JBQ2hFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDekIsQ0FBQztZQUNELG9CQUFLLEdBQUwsVUFBTSxJQUFZLEVBQUUsR0FBVyxFQUFFLEtBQWEsRUFBRSxNQUFjO2dCQUMxRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7Z0JBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2dCQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFDTSxzQkFBTyxHQUFkO2dCQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztvQkFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ25CLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDekIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztvQkFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO29CQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDcEIsQ0FBQztZQUNMLENBQUM7WUFDTSx3QkFBUyxHQUFoQixVQUFpQixDQUFTLEVBQUUsQ0FBUztnQkFDakMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7Z0JBQ2YsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7Z0JBQ2hCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUNkLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO2dCQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFDTSx5QkFBVSxHQUFqQixVQUFrQixDQUFTO2dCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBQ00seUJBQVUsR0FBakIsVUFBa0IsQ0FBUztnQkFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUNNLG9CQUFLLEdBQVosVUFBYSxDQUFTO2dCQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQy9CLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdkIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdEIsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDeEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0IsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDZixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztvQkFDZCxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7Z0JBQ3JCLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBRUQsc0JBQUksdUJBQUs7cUJBQVQ7b0JBQ0ksTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQzt3QkFDbkMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7Z0JBQ3pDLENBQUM7OztlQUFBO1lBQ0Qsc0JBQUksd0JBQU07cUJBQVY7b0JBQ0ksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO3FCQVFELFVBQVcsTUFBYztvQkFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztnQkFFcEMsQ0FBQzs7O2VBWEE7WUFDRCxzQkFBSSx1QkFBSztxQkFBVDtvQkFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLENBQUM7cUJBQ0QsVUFBVSxLQUFhO29CQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUVuQyxDQUFDOzs7ZUFKQTtZQVNELHNCQUFJLDRCQUFVO3FCQUFkO29CQUNJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7d0JBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFBQyxDQUFDO29CQUM3RSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO29CQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDNUIsQ0FBQzs7O2VBQUE7WUFDRCxzQkFBSSwwQkFBUTtxQkFBWjtvQkFDSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQUMsQ0FBQztvQkFDN0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztvQkFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztvQkFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQzFCLENBQUM7OztlQUFBO1lBQ0QsdUJBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTO2dCQUN6QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3pFLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixDQUFDO1lBQ0Qsb0JBQUssR0FBTDtnQkFDSSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xFLENBQUM7WUFDRCxvQkFBSyxHQUFMLFVBQU0sSUFBUztnQkFDWCxFQUFFLENBQUEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUN4SCxDQUFDO2dCQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsQ0FBQztZQUNMLFdBQUM7UUFBRCxDQTlHQSxBQThHQyxJQUFBO1FBOUdZLGFBQUksT0E4R2hCLENBQUE7SUFFTCxDQUFDLEVBbkhpQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQW1IekI7QUFBRCxDQUFDLEVBbkhTLE9BQU8sS0FBUCxPQUFPLFFBbUhoQjtBQ3JIRCxrREFBa0Q7QUFFbEQsK0NBQStDO0FBRS9DLElBQVUsT0FBTyxDQTRKaEI7QUE1SkQsV0FBVSxPQUFPO0lBQUMsSUFBQSxJQUFJLENBNEpyQjtJQTVKaUIsV0FBQSxJQUFJO1FBRWxCLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQU8sT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQzFDLElBQU8sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBRXhDOztXQUVHO1FBQ0g7WUFLSSxvQkFBWSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsT0FBZ0IsRUFBRSxTQUFrQjtnQkFDeEYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsV0FBVyxFQUNoRSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUN4QyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsWUFBWSxFQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUNqRCxDQUFBO2dCQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7Z0JBQy9CLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUM7WUFDTCxDQUFDO1lBQ0QsMEJBQUssR0FBTCxVQUFNLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxPQUFnQixFQUFFLFNBQWtCO2dCQUNsRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQ3hDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQ2pELENBQUE7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDWixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztnQkFDL0IsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFDdkIsQ0FBQztZQUNMLENBQUM7WUFDRCwyQkFBTSxHQUFOLFVBQU8sQ0FBUSxFQUFDLENBQVE7Z0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLENBQUM7WUFDRCwwQkFBSyxHQUFMO2dCQUNJLElBQUksSUFBSSxHQUFFLElBQUksVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFDRCwwQkFBSyxHQUFMLFVBQU0sSUFBZTtnQkFDakIsRUFBRSxDQUFBLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7b0JBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvSCxDQUFDO2dCQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsQ0FBQztZQUNMLGlCQUFDO1FBQUQsQ0FoREEsQUFnREMsSUFBQTtRQWhEWSxlQUFVLGFBZ0R0QixDQUFBO1FBQ0Q7O1dBRUc7UUFDSDtZQUlJLHNCQUFZLEtBQWEsRUFBRSxNQUFjLEVBQUUsTUFBZTtnQkFEMUQsV0FBTSxHQUFXLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEsNEVBQTRFO2dCQUVoSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ1QsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ3pCLENBQUM7WUFDTCxDQUFDO1lBQ0Qsc0JBQUksK0JBQUs7cUJBR1Q7b0JBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNiLENBQUM7b0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ3ZCLENBQUM7cUJBUkQsVUFBVSxDQUFTO29CQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQixDQUFDOzs7ZUFBQTtZQVFELHNCQUFJLG1DQUFTO3FCQUFiO29CQUNJLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7b0JBQ2hDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixLQUFLLFlBQVksQ0FBQyxZQUFZOzRCQUMxQixJQUFJLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQzs0QkFDakMsS0FBSyxDQUFDO3dCQUNWLEtBQUssWUFBWSxDQUFDLFlBQVk7NEJBQzFCLElBQUksR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDOzRCQUNqQyxLQUFLLENBQUM7d0JBQ1YsS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDO3dCQUMxQjs0QkFDSSxJQUFJLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQzs0QkFDNUIsS0FBSyxDQUFDO29CQUNkLENBQUM7b0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDaEIsQ0FBQzs7O2VBQUE7WUFFRCxzQkFBSSxvQ0FBVTtxQkFBZDtvQkFDSSxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO29CQUNoQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzt3QkFDbkIsS0FBSyxZQUFZLENBQUMsWUFBWTs0QkFDMUIsSUFBSSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUM7NEJBQ2pDLEtBQUssQ0FBQzt3QkFDVixLQUFLLFlBQVksQ0FBQyxZQUFZOzRCQUMxQixJQUFJLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQzs0QkFDakMsS0FBSyxDQUFDO3dCQUNWLEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQzt3QkFDMUI7NEJBQ0ksSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7NEJBQzVCLEtBQUssQ0FBQztvQkFDZCxDQUFDO29CQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7OztlQUFBO1lBRUQsc0JBQUksZ0NBQU07cUJBR1Y7b0JBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNuQixNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNiLENBQUM7b0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3hCLENBQUM7cUJBUkQsVUFBVyxDQUFTO29CQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztnQkFDckIsQ0FBQzs7O2VBQUE7WUFXTCxtQkFBQztRQUFELENBcEVBLEFBb0VDO1FBSFUseUJBQVksR0FBVyxDQUFDLENBQUMsQ0FBQztRQUMxQix5QkFBWSxHQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzFCLG9CQUFPLEdBQVcsQ0FBQyxDQUFDLENBQUM7UUFuRW5CLGlCQUFZLGVBb0V4QixDQUFBO1FBQ0Q7WUFHSSxxQkFBWSxDQUFVLEVBQUUsQ0FBVTtnQkFEbEMsU0FBSSxHQUFXLFlBQVksQ0FBQyxPQUFPLENBQUM7Z0JBRWhDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7Z0JBQ2xCLENBQUM7WUFDTCxDQUFDO1lBQ0QscUNBQWUsR0FBZjtnQkFDSSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDaEIsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDO29CQUMvQixLQUFLLFlBQVksQ0FBQyxPQUFPO3dCQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztvQkFDdEIsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDO29CQUMvQjt3QkFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs0QkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzt3QkFDdEIsQ0FBQzt3QkFDRCxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztnQkFDekMsQ0FBQztZQUNMLENBQUM7WUFDTCxrQkFBQztRQUFELENBeEJBLEFBd0JDLElBQUE7UUF4QlksZ0JBQVcsY0F3QnZCLENBQUE7SUFFTCxDQUFDLEVBNUppQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUE0SnJCO0FBQUQsQ0FBQyxFQTVKUyxPQUFPLEtBQVAsT0FBTyxRQTRKaEI7QUNoS0QsSUFBVSxPQUFPLENBK0ZoQjtBQS9GRCxXQUFVLE9BQU87SUFBQyxJQUFBLElBQUksQ0ErRnJCO0lBL0ZpQixXQUFBLElBQUk7UUFBQyxJQUFBLEtBQUssQ0ErRjNCO1FBL0ZzQixXQUFBLEtBQUs7WUFDeEI7Z0JBK0NJLHFCQUFZLENBQVEsRUFBRSxDQUFRLEVBQUUsTUFBYTtvQkFDekMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFDMUIsQ0FBQztnQkEzQkQsc0JBQUksMEJBQUM7eUJBQUw7d0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7b0JBQ25CLENBQUM7eUJBQ0QsVUFBTSxDQUFRO3dCQUNWLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNoQixDQUFDOzs7bUJBSEE7Z0JBSUQsc0JBQUksMEJBQUM7eUJBR0w7d0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7b0JBQ25CLENBQUM7eUJBTEQsVUFBTSxDQUFRO3dCQUNWLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNoQixDQUFDOzs7bUJBQUE7Z0JBSUQsc0JBQUksK0JBQU07eUJBQVY7d0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ3hCLENBQUM7eUJBQ0QsVUFBVyxLQUFZO3dCQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztvQkFDekIsQ0FBQzs7O21CQUhBO2dCQUlNLDJCQUFLLEdBQVo7b0JBQ0ksTUFBTSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3pELENBQUM7Z0JBU0QsNEJBQU0sR0FBTixVQUFPLENBQVEsRUFBQyxDQUFRO29CQUNwQixJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQztvQkFDWCxJQUFJLENBQUMsRUFBRSxJQUFFLENBQUMsQ0FBQztvQkFDWCxJQUFJLENBQUMsT0FBTyxJQUFFLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUM7Z0JBQ3BCLENBQUM7Z0JBRUQsOEJBQVEsR0FBUjtvQkFDSSxNQUFNLENBQUMsT0FBTyxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxFQUFFLEdBQUUsY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDakYsQ0FBQztnQkFDRCxnQ0FBVSxHQUFWO29CQUNJLE1BQU0sQ0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO3dCQUNqQixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLGdCQUFnQixDQUFDO3dCQUN4QixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFFLFdBQVcsQ0FBRTt3QkFDckIsS0FBSyxDQUFDOzRCQUNOLE1BQU0sQ0FBRSxhQUFhLENBQUU7d0JBQ3ZCLEtBQUssQ0FBQzs0QkFDTixNQUFNLENBQUMsZUFBZSxDQUFDO3dCQUN2QixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLGdCQUFnQixDQUFDO3dCQUN4QixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLG1CQUFtQixDQUFDO3dCQUMzQixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLG1CQUFtQixDQUFDO3dCQUMzQixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLGlCQUFpQixDQUFDO3dCQUN6QixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLG1CQUFtQixDQUFDO3dCQUMzQixLQUFLLENBQUM7NEJBQ04sTUFBTSxDQUFDLGtCQUFrQixDQUFDO3dCQUMxQixLQUFLLEVBQUU7NEJBQ1AsTUFBTSxDQUFDLGNBQWMsQ0FBQzt3QkFDdEIsS0FBSyxFQUFFOzRCQUNQLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztvQkFDN0IsQ0FBQztnQkFDTCxDQUFDO2dCQUNMLGtCQUFDO1lBQUQsQ0E3RkEsQUE2RkM7WUExRmlCLHVCQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLHFCQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsdUJBQVcsR0FBRyxDQUFDLENBQUM7WUFDaEIseUJBQWEsR0FBRyxDQUFDLENBQUM7WUFDbEIsMEJBQWMsR0FBRyxDQUFDLENBQUM7WUFFbkIsNkJBQWlCLEdBQUUsQ0FBQyxDQUFDO1lBQ3JCLDZCQUFpQixHQUFHLENBQUMsQ0FBQztZQUN0QiwyQkFBZSxHQUFDLENBQUMsQ0FBQztZQUNsQiw2QkFBaUIsR0FBQyxDQUFDLENBQUM7WUFDcEIsNEJBQWdCLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLDJCQUFlLEdBQUUsRUFBRSxDQUFDO1lBQ3BCLHdCQUFZLEdBQUcsRUFBRSxDQUFDO1lBZnZCLGlCQUFXLGNBNkZ2QixDQUFBO1FBQ0wsQ0FBQyxFQS9Gc0IsS0FBSyxHQUFMLFVBQUssS0FBTCxVQUFLLFFBK0YzQjtJQUFELENBQUMsRUEvRmlCLElBQUksR0FBSixZQUFJLEtBQUosWUFBSSxRQStGckI7QUFBRCxDQUFDLEVBL0ZTLE9BQU8sS0FBUCxPQUFPLFFBK0ZoQjtBQzlGRCxJQUFVLE9BQU8sQ0E4Q2hCO0FBOUNELFdBQVUsT0FBTztJQUFDLElBQUEsSUFBSSxDQThDckI7SUE5Q2lCLFdBQUEsTUFBSTtRQUFDLElBQUEsU0FBUyxDQThDL0I7UUE5Q3NCLFdBQUEsU0FBUztZQUU1QixJQUFZLGNBS1g7WUFMRCxXQUFZLGNBQWM7Z0JBQ3RCLGlFQUFXLENBQUE7Z0JBQ1gsNkRBQVMsQ0FBQTtnQkFDVCxpREFBRyxDQUFBO1lBRVAsQ0FBQyxFQUxXLGNBQWMsR0FBZCx3QkFBYyxLQUFkLHdCQUFjLFFBS3pCO1lBQ0Q7Z0JBU0k7b0JBUkEsYUFBUSxHQUFXLENBQUMsQ0FBQztvQkFTakIsSUFBSSxDQUFDLElBQUksR0FBRSxJQUFJLFVBQUEsYUFBYSxFQUFFLENBQUM7b0JBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO29CQUNmLElBQUksQ0FBQyxRQUFRLEdBQUUsQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQUEsYUFBYSxDQUFDLEtBQUssQ0FBQztvQkFDaEMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7b0JBQ2QsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDO29CQUN4QyxJQUFJLENBQUMsU0FBUyxHQUFFLEtBQUssQ0FBQztnQkFDMUIsQ0FBQztnQkFFRCxzQkFBSSxxQ0FBYzt5QkFBbEI7d0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBQ25ELENBQUM7OzttQkFBQTtnQkFFRCx5QkFBSyxHQUFMLFVBQU0sR0FBVztvQkFDYixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRSxDQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDMUQsTUFBTSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQy9ELENBQUM7Z0JBQ0QsdUNBQW1CLEdBQW5CLFVBQW9CLGdCQUF1QixFQUFFLE1BQWEsRUFBQyxJQUFTO29CQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixHQUFDLGdCQUFnQixHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUNqRyxDQUFDO2dCQUNELG9DQUFnQixHQUFoQixVQUFpQixNQUFhLEVBQUMsSUFBUztnQkFFeEMsQ0FBQztnQkFDRCxrQ0FBYyxHQUFkLFVBQWUsTUFBYSxFQUFDLElBQVM7Z0JBRXRDLENBQUM7Z0JBQ0wsZ0JBQUM7WUFBRCxDQXJDQSxBQXFDQyxJQUFBO1lBckNZLG1CQUFTLFlBcUNyQixDQUFBO1FBQ0wsQ0FBQyxFQTlDc0IsU0FBUyxHQUFULGdCQUFTLEtBQVQsZ0JBQVMsUUE4Qy9CO0lBQUQsQ0FBQyxFQTlDaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBOENyQjtBQUFELENBQUMsRUE5Q1MsT0FBTyxLQUFQLE9BQU8sUUE4Q2hCO0FDL0NELElBQVUsT0FBTyxDQXNDaEI7QUF0Q0QsV0FBVSxPQUFPO0lBQUMsSUFBQSxJQUFJLENBc0NyQjtJQXRDaUIsV0FBQSxJQUFJO1FBQUMsSUFBQSxTQUFTLENBc0MvQjtRQXRDc0IsV0FBQSxTQUFTO1lBRzVCO2dCQUFBO2dCQUlBLENBQUM7Z0JBSFUsNEJBQUksR0FBWCxVQUFZLENBQVM7b0JBQ2pCLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsQ0FBQztnQkFDTCxvQkFBQztZQUFELENBSkEsQUFJQyxJQUFBO1lBSlksdUJBQWEsZ0JBSXpCLENBQUE7WUFFRDtnQkFBeUMsdUNBQWE7Z0JBQXREOztnQkFlQSxDQUFDO2dCQWJVLGtDQUFJLEdBQVgsVUFBWSxDQUFTO29CQUNqQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUNYLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUNYLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUNYLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNWLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUNYLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUNaLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUNaLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUNaLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUNaLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztvQkFDckIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDdEksQ0FBQztnQkFDTCwwQkFBQztZQUFELENBZkEsQUFlQyxDQWZ3QyxhQUFhLEdBZXJEO1lBZlksNkJBQW1CLHNCQWUvQixDQUFBO1lBRUQ7Z0JBQXNDLG9DQUFhO2dCQUFuRDs7Z0JBTUEsQ0FBQztnQkFMVSwrQkFBSSxHQUFYLFVBQVksQ0FBUztvQkFDakIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFDWixNQUFNLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO2dCQUNMLHVCQUFDO1lBQUQsQ0FOQSxBQU1DLENBTnFDLGFBQWEsR0FNbEQ7WUFOWSwwQkFBZ0IsbUJBTTVCLENBQUE7WUFDRDtnQkFBdUMscUNBQWE7Z0JBQXBEOztnQkFJQSxDQUFDO2dCQUhVLGdDQUFJLEdBQVgsVUFBWSxDQUFTO29CQUNqQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNELENBQUM7Z0JBQ0wsd0JBQUM7WUFBRCxDQUpBLEFBSUMsQ0FKc0MsYUFBYSxHQUluRDtZQUpZLDJCQUFpQixvQkFJN0IsQ0FBQTtRQUNMLENBQUMsRUF0Q3NCLFNBQVMsR0FBVCxjQUFTLEtBQVQsY0FBUyxRQXNDL0I7SUFBRCxDQUFDLEVBdENpQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUFzQ3JCO0FBQUQsQ0FBQyxFQXRDUyxPQUFPLEtBQVAsT0FBTyxRQXNDaEI7QUN0Q0QsK0NBQStDO0FBQy9DLDhDQUE4QztBQUM5Qyx3Q0FBd0M7QUFDeEMsZ0RBQWdEO0FBQ2hELDBDQUEwQztBQUMxQyxrREFBa0Q7QUFDbEQsc0RBQXNEO0FBR3RELElBQVUsT0FBTyxDQW9PaEI7QUFwT0QsV0FBVSxPQUFPO0lBQUMsSUFBQSxJQUFJLENBb09yQjtJQXBPaUIsV0FBQSxJQUFJO1FBQ2xCLElBQU8sT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBRzFDLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRXBDLElBQU8sT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBTzFDLHVDQUF1QztRQUN2QywwQ0FBMEM7UUFDMUMsbUNBQW1DO1FBQ25DLElBQVksU0FJWDtRQUpELFdBQVksU0FBUztZQUNqQixpREFBUSxDQUFBO1lBQ1IscURBQVUsQ0FBQTtZQUNWLHlDQUFJLENBQUE7UUFDUixDQUFDLEVBSlcsU0FBUyxHQUFULGNBQVMsS0FBVCxjQUFTLFFBSXBCO1FBQ0Q7WUF1QkksY0FBWSxPQUFnQjtnQkFsQmxCLGFBQVEsR0FBWSxJQUFJLE9BQU8sRUFBRSxDQUFDO2dCQU01QyxpQkFBWSxHQUFpQixJQUFJLEtBQUEsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ2xELFlBQU8sR0FBYyxJQUFJLENBQUM7Z0JBSzFCLGlCQUFZLEdBQVMsQ0FBQyxDQUFDO2dCQUUvQixlQUFVLEdBQVMsQ0FBQyxDQUFDO2dCQUNyQixjQUFTLEdBQVMsQ0FBQyxDQUFDO2dCQUNiLGFBQVEsR0FBYyxTQUFTLENBQUMsUUFBUSxDQUFDO2dCQUc1QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ2pDLENBQUM7WUFDTSx5QkFBVSxHQUFqQjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN6QixDQUFDO1lBRUQ7O2VBRUc7WUFDSCx3QkFBUyxHQUFULFVBQVUsS0FBa0IsRUFBRSxNQUFtQixFQUFFLE1BQWM7Z0JBQzdELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxLQUFBLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDL0QsSUFBSSxDQUFDLEdBQVcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2dCQUN6QyxJQUFJLElBQUksR0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO2dCQUM1QyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDOUMsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLEtBQUEsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQzFDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDN0IsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssS0FBQSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUMvQixDQUFDO2dCQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEtBQUEsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBQSxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxLQUFBLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUEsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2pJLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUVNLDZCQUFjLEdBQXJCO2dCQUNJLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztvQkFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQzdCLENBQUM7Z0JBQUEsSUFBSSxDQUFBLENBQUM7b0JBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQztZQUNMLENBQUM7WUFDTSw2QkFBYyxHQUFyQixVQUFzQixLQUFZO2dCQUM5QixJQUFJLENBQUMsWUFBWSxHQUFDLEtBQUssQ0FBQztZQUM1QixDQUFDO1lBRUQsdUJBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjO2dCQUMvRCxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxjQUFjLEdBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDakQsQ0FBQztnQkFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JILENBQUM7WUFDUyw4QkFBZSxHQUF6QjtnQkFDSSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdkQsQ0FBQztZQUNELHFCQUFNLEdBQU4sVUFBTyxNQUFjO2dCQUNqQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUFDLE1BQU0sQ0FBQztnQkFBQyxDQUFDO2dCQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUN6SCxDQUFDO1lBQ0wsQ0FBQztZQUNELG1DQUFvQixHQUFwQixVQUFxQixLQUFrQixFQUFFLE1BQW1CO2dCQUN4RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDMUIsQ0FBQztZQUVNLDJCQUFZLEdBQW5CLFVBQW9CLEtBQWtCO2dCQUNsQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUM7WUFDTSwyQkFBWSxHQUFuQixVQUFvQixLQUFrQjtnQkFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixDQUFDO1lBRU0seUJBQVUsR0FBakIsVUFBa0IsS0FBYTtnQkFDM0IsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDYixFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDO29CQUNOLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNsQyxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztvQkFDeEIsQ0FBQztnQkFDTCxDQUFDO2dCQUFBLElBQUksQ0FBQSxDQUFDO29CQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM3RCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3hCLENBQUM7WUFDTCxDQUFDO1lBRU0sMEJBQVcsR0FBbEI7Z0JBQ0ksRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQSxDQUFDO29CQUNwQixJQUFJLFFBQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO29CQUN6QixHQUFHLENBQUM7d0JBQ0EsUUFBTSxHQUFHLFFBQU0sQ0FBQyxNQUFNLENBQUM7b0JBQzNCLENBQUMsUUFBUSxRQUFNLENBQUMsTUFBTSxJQUFJLElBQUksRUFBQztvQkFDL0IsTUFBTSxDQUFDLFFBQU0sQ0FBQztnQkFDbEIsQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFTSwyQkFBWSxHQUFuQjtZQUNBLENBQUM7WUFFTSw0QkFBYSxHQUFwQjtnQkFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNoQyxDQUFDO1lBQ0wsQ0FBQztZQUdNLDZCQUFjLEdBQXJCLFVBQXNCLFNBQW1CO2dCQUNyQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksSUFBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFBLENBQUM7b0JBQ3ZELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO29CQUMzQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7d0JBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ2pELENBQUM7b0JBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0IsQ0FBQztZQUNMLENBQUM7WUFFTSx3QkFBUyxHQUFoQixVQUFpQixDQUFZO2dCQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNyQixDQUFDO1lBQ00scUJBQU0sR0FBYixVQUFjLElBQVksRUFBRSxHQUFXO2dCQUNuQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUM7Z0JBQ3RCLEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUEsQ0FBQztvQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDNUIsTUFBTSxlQUFlLENBQUM7Z0JBQzFCLENBQUM7Z0JBQ0Qsb0NBQW9DO1lBQ3hDLENBQUM7WUFFRCxzQkFBSSx3QkFBTTtxQkFBVjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDeEIsQ0FBQzs7O2VBQUE7WUFDRCxzQkFBSSx1QkFBSztxQkFBVDtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDekMsQ0FBQzs7O2VBQUE7WUFDRCxzQkFBSSx3QkFBTTtxQkFBVjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDMUMsQ0FBQzs7O2VBQUE7WUFFRCxzQkFBSSx5QkFBTztxQkFHWDtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDekIsQ0FBQztxQkFMRCxVQUFZLE9BQWdCO29CQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztnQkFDNUIsQ0FBQzs7O2VBQUE7WUFJRCxzQkFBSSxzQkFBSTtxQkFBUjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUM1QyxDQUFDOzs7ZUFBQTtZQUVELHNCQUFJLHFCQUFHO3FCQUFQO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7Z0JBQzNDLENBQUM7OztlQUFBO1lBRUQsc0JBQUksdUJBQUs7cUJBQVQ7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztnQkFDN0MsQ0FBQzs7O2VBQUE7WUFFRCxzQkFBSSx3QkFBTTtxQkFBVjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO2dCQUM5QyxDQUFDOzs7ZUFBQTtZQUVELHNCQUFJLDRCQUFVO3FCQUdkO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUM1QixDQUFDO3FCQUxELFVBQWUsVUFBa0I7b0JBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUNsQyxDQUFDOzs7ZUFBQTtZQUlELHNCQUFJLDRCQUFVO3FCQUFkO29CQUNJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7d0JBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxLQUFBLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDbkUsQ0FBQztvQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztnQkFDNUIsQ0FBQzs7O2VBQUE7WUFHRCxzQkFBSSx5QkFBTztxQkFHWDtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDekIsQ0FBQztxQkFMRCxVQUFZLE9BQWdCO29CQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztnQkFDNUIsQ0FBQzs7O2VBQUE7WUFJRCxzQkFBSSxzQkFBSTtxQkFHUjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDdEIsQ0FBQztxQkFMRCxVQUFTLEtBQWE7b0JBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixDQUFDOzs7ZUFBQTtZQUlMLFdBQUM7UUFBRCxDQTlNQSxBQThNQyxJQUFBO1FBOU1ZLFNBQUksT0E4TWhCLENBQUE7SUFDTCxDQUFDLEVBcE9pQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUFvT3JCO0FBQUQsQ0FBQyxFQXBPUyxPQUFPLEtBQVAsT0FBTyxRQW9PaEI7QUM3T0QsK0NBQStDO0FBQy9DLG1EQUFtRDtBQUNuRCxnQ0FBZ0M7QUFFaEMsSUFBVSxPQUFPLENBa2NoQjtBQWxjRCxXQUFVLE9BQU87SUFBQyxJQUFBLElBQUksQ0FrY3JCO0lBbGNpQixXQUFBLE1BQUk7UUFLbEIsSUFBTyxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBR3BELElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQU8sY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUM5RDtZQUErQiw2QkFBSTtZQUFuQztnQkFBQSxrREFxYkM7Z0JBbmJhLGNBQVEsR0FBZ0IsSUFBSSxLQUFLLEVBQVEsQ0FBQztnQkFFNUMsMEJBQW9CLEdBQVEsSUFBSSxDQUFDO2dCQUVqQyxrQkFBWSxHQUFZLEtBQUssQ0FBQztnQkFFOUIsd0JBQWtCLEdBQWtCLEVBQUUsQ0FBQzs7Z0JBMlUvQywyREFBMkQ7Z0JBRTNELDBGQUEwRjtnQkFDMUYsdUNBQXVDO2dCQUV2QyxrQ0FBa0M7Z0JBQ2xDLGtEQUFrRDtnQkFDbEQsb0RBQW9EO2dCQUNwRCx3RkFBd0Y7Z0JBQ3hGLDhEQUE4RDtnQkFDOUQsdUNBQXVDO2dCQUN2Qyw0RkFBNEY7Z0JBQzVGLHFFQUFxRTtnQkFDckUsZ0NBQWdDO2dCQUNoQyw0QkFBNEI7Z0JBQzVCLHdCQUF3QjtnQkFDeEIsb0JBQW9CO2dCQUNwQixvREFBb0Q7Z0JBQ3BELG1DQUFtQztnQkFDbkMsb0JBQW9CO2dCQUNwQiwyRUFBMkU7Z0JBQzNFLHFDQUFxQztnQkFDckMsMkJBQTJCO2dCQUMzQix1RkFBdUY7Z0JBQ3ZGLG9CQUFvQjtnQkFDcEIsZ0NBQWdDO2dCQUNoQyxxRUFBcUU7Z0JBQ3JFLGtEQUFrRDtnQkFDbEQsbUNBQW1DO2dCQUNuQywyQkFBMkI7Z0JBQzNCLG1GQUFtRjtnQkFDbkYsb0NBQW9DO2dCQUNwQyxvQkFBb0I7Z0JBRXBCLGtEQUFrRDtnQkFDbEQsbURBQW1EO2dCQUNuRCwrQ0FBK0M7Z0JBQy9DLHlFQUF5RTtnQkFDekUsdUNBQXVDO2dCQUN2Qyx3QkFBd0I7Z0JBRXhCLCtFQUErRTtnQkFDL0UseUNBQXlDO2dCQUN6QywrQkFBK0I7Z0JBQy9CLDJGQUEyRjtnQkFDM0Ysd0JBQXdCO2dCQUN4QixvQ0FBb0M7Z0JBQ3BDLHNEQUFzRDtnQkFDdEQsaUVBQWlFO2dCQUNqRSx5RUFBeUU7Z0JBQ3pFLDhCQUE4QjtnQkFDOUIsOERBQThEO2dCQUM5RCx5RUFBeUU7Z0JBQ3pFLHVDQUF1QztnQkFDdkMsK0JBQStCO2dCQUMvQixpRUFBaUU7Z0JBQ2pFLG9GQUFvRjtnQkFDcEYsbUZBQW1GO2dCQUNuRixnQ0FBZ0M7Z0JBQ2hDLDhCQUE4QjtnQkFDOUIsOERBQThEO2dCQUM5RCxnRkFBZ0Y7Z0JBQ2hGLDBGQUEwRjtnQkFDMUYsbUNBQW1DO2dCQUNuQyw0Q0FBNEM7Z0JBQzVDLDRCQUE0QjtnQkFDNUIsd0JBQXdCO2dCQUN4QixvQkFBb0I7Z0JBSXBCLGlEQUFpRDtnQkFDakQsZ0RBQWdEO2dCQUNoRCxtREFBbUQ7Z0JBQ25ELDZEQUE2RDtnQkFDN0QsbURBQW1EO2dCQUNuRCx5RUFBeUU7Z0JBQ3pFLG1DQUFtQztnQkFDbkMsK0VBQStFO2dCQUMvRSw0QkFBNEI7Z0JBQzVCLDBCQUEwQjtnQkFDMUIsK0NBQStDO2dCQUMvQyx5RUFBeUU7Z0JBQ3pFLHlDQUF5QztnQkFDekMsK0JBQStCO2dCQUMvQix3RkFBd0Y7Z0JBQ3hGLHdCQUF3QjtnQkFHeEIsd0RBQXdEO2dCQUN4RCwwREFBMEQ7Z0JBQzFELGlEQUFpRDtnQkFDakQscUNBQXFDO2dCQUNyQyxvQkFBb0I7Z0JBQ3BCLFlBQVk7Z0JBQ1osUUFBUTtnQkFDUixvQkFBb0I7Z0JBQ3BCLElBQUk7WUFDUixDQUFDO1lBM2FVLGdDQUFZLEdBQW5CLFVBQW9CLE1BQWM7Z0JBRTlCLElBQUksSUFBVSxDQUFDO2dCQUNmLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDNUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7b0JBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksT0FBQSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFBQyxRQUFRLENBQUM7b0JBQUMsQ0FBQztvQkFDbEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQzFCLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUNoRCxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzt3QkFDN0IsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUNyQixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUNqQyxDQUFDO2dCQUNULENBQUM7WUFDTCxDQUFDO1lBRUQsNkJBQVMsR0FBVCxVQUFVLE1BQWMsRUFBRSxJQUFVO2dCQUVoQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUEsQ0FBQztvQkFDekQsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNkLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDO3dCQUNwRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDO3dCQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDO29CQUNwRCxDQUFDO29CQUNELElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxDQUFDO29CQUU1RixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNwQixFQUFFLENBQUMsQ0FBQyxJQUFJLFlBQVksU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDOUIsQ0FBQztvQkFDRCxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3JCLENBQUM7Z0JBQUEsSUFBSSxDQUFBLENBQUM7b0JBQ0YsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7d0JBQ3RHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7d0JBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDM0MsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUM7NEJBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDbkQsQ0FBQztvQkFFTCxDQUFDO29CQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxTQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUM5QixDQUFDO2dCQUNMLENBQUM7WUFFTCxDQUFDO1lBRUQsZ0NBQVksR0FBWjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3BDLENBQUM7WUFDTCxDQUFDO1lBRU0sbUNBQWUsR0FBdEIsVUFBdUIsS0FBVyxFQUFFLEtBQVc7Z0JBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2RCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO29CQUM1RCxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQzVDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDeEIsQ0FBQztnQkFBQSxJQUFJLENBQUEsQ0FBQztvQkFDRixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDcEMsQ0FBQztZQUNMLENBQUM7WUFFTSxpQ0FBYSxHQUFwQjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDaEMsQ0FBQztZQUVNLDhCQUFVLEdBQWpCLFVBQWtCLEtBQWE7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLENBQUM7WUFFTyxnQ0FBWSxHQUFwQjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN6QixDQUFDO1lBRUQsNEJBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjO2dCQUMvRCxpQkFBTSxRQUFRLFlBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7WUFFRCw2QkFBUyxHQUFULFVBQVUsS0FBa0IsRUFBRSxNQUFtQixFQUFFLE1BQWM7Z0JBQzdELElBQUksT0FBYSxDQUFDO2dCQUNsQiwrQ0FBK0M7Z0JBQy9DLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDNUMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxFQUFFLEdBQWlCLElBQUksQ0FBQyxZQUFZLENBQUM7b0JBQ3pDLElBQUksQ0FBQyxHQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUM7b0JBQ3pCLElBQUksQ0FBQyxHQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQzFCLFVBQVU7b0JBQ1YsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsS0FBSyxPQUFBLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO3dCQUM5QyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO29CQUN6SixDQUFDO29CQUNELEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEtBQUssT0FBQSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzt3QkFDN0MsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztvQkFDeEosQ0FBQztvQkFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksT0FBQSxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLE9BQUEsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ3ZHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBQSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDMUIsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3dCQUNWLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7NEJBQzdCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQzt3QkFDL0IsQ0FBQzt3QkFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUMvQixPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7d0JBQ2pDLENBQUM7b0JBQ0wsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUNuQixDQUFDO2dCQUNMLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUNYLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEtBQUssT0FBQSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDdkQsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztnQkFDNUMsQ0FBQztnQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEtBQUssT0FBQSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDbkUsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQzVDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEtBQUssT0FBQSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDeEQsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDOUMsQ0FBQztnQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEtBQUssT0FBQSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDcEUsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQzlDLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksT0FBQSxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFBLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLE9BQUEsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBQSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDdkksTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuQixDQUFDO1lBRU0sMkJBQU8sR0FBZCxVQUFlLElBQVUsRUFBRSxLQUFpQixFQUFFLFlBQWlDO2dCQUFwRCxzQkFBQSxFQUFBLFNBQWlCO2dCQUFFLDZCQUFBLEVBQUEsbUJBQWlDO2dCQUMzRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFDLEtBQUssRUFBQyxZQUFZLENBQUMsQ0FBQztnQkFDckQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUM7WUFFTSwwQ0FBc0IsR0FBN0IsVUFBOEIsSUFBUyxFQUFDLEtBQWMsRUFBQyxZQUFnQztnQkFBL0Msc0JBQUEsRUFBQSxTQUFjO2dCQUFDLDZCQUFBLEVBQUEsbUJBQWdDO2dCQUNuRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekIsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ3RDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztnQkFDckMsQ0FBQztnQkFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUM7WUFFTSxrQ0FBYyxHQUFyQjtnQkFDSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDN0IsQ0FBQztZQUVNLDhCQUFVLEdBQWpCLFVBQWtCLElBQVU7Z0JBQ3hCLElBQUksS0FBSyxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUNNLHlDQUFxQixHQUE1QixVQUE2QixLQUFrQjtnQkFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixDQUFDO1lBRU0sc0NBQWtCLEdBQXpCLFVBQTBCLEtBQWtCO2dCQUE1QyxpQkFpR0M7Z0JBL0ZHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixJQUFJLElBQUksQ0FBQyxvQkFBb0IsWUFBWSxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUMvRSxJQUFJLE1BQU0sR0FBWSxLQUFLLENBQUM7b0JBRTVCLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNuQixLQUFLLFdBQVcsQ0FBQyxXQUFXOzRCQUN4QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0NBQzdCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO29DQUM3RCxJQUFJLEtBQUssR0FBUyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29DQUNuQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO3dDQUNSLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7NENBQ3pELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7d0NBQ3RDLENBQUM7b0NBQ0wsQ0FBQztnQ0FDTCxDQUFDOzRCQUNMLENBQUM7NEJBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO2dDQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDOzRCQUNoQixDQUFDOzRCQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLFlBQVksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNwRCxNQUFNLEdBQUcsSUFBSSxDQUFDOzRCQUNsQixDQUFDOzRCQUFDLElBQUksQ0FBQyxDQUFDO2dDQUNKLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQ3BFLENBQUM7NEJBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQ0FDVCxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dDQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztnQ0FDM0IsTUFBTSxDQUFDLElBQUksQ0FBQzs0QkFDaEIsQ0FBQzs0QkFBQyxJQUFJLENBQUMsQ0FBQztnQ0FDSixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUEsZ0JBQWdCO2dDQUM1RCxNQUFNLENBQUMsS0FBSyxDQUFDOzRCQUNqQixDQUFDO3dCQUVMLEtBQUssV0FBVyxDQUFDLFdBQVc7NEJBQ3hCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0NBQzVCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29DQUNwQixJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO29DQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDO2dDQUNoQixDQUFDO2dDQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLFlBQVksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29DQUNwRCxNQUFNLEdBQUcsSUFBSSxDQUFDO2dDQUNsQixDQUFDO2dDQUFDLElBQUksQ0FBQyxDQUFDO29DQUNKLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0NBQ3BFLENBQUM7Z0NBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQ0FDVCxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztvQ0FDM0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7d0NBQzdCLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQzlDLENBQUMsQ0FBQyxDQUFDO29DQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29DQUNuQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO29DQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDO2dDQUNoQixDQUFDO2dDQUFDLElBQUksQ0FBQyxDQUFDO29DQUNKLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO3dDQUM3QixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsb0JBQW9CLFlBQVksU0FBUyxDQUFDLENBQUMsQ0FBQzs0Q0FDakQsS0FBSSxDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO3dDQUNwRCxDQUFDO29DQUNMLENBQUMsQ0FBQyxDQUFDO29DQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29DQUNuQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLFlBQVksU0FBUyxDQUFDLENBQUMsQ0FBQzt3Q0FDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQ0FDL0QsQ0FBQztvQ0FBQyxJQUFJLENBQUMsQ0FBQzt3Q0FDSixNQUFNLENBQUMsS0FBSyxDQUFDO29DQUNqQixDQUFDO2dDQUNMLENBQUM7NEJBQ0wsQ0FBQzt3QkFJTCxLQUFLLFdBQVcsQ0FBQyxTQUFTLENBQUM7d0JBQzNCLEtBQUssV0FBVyxDQUFDLGFBQWE7NEJBQzFCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7Z0NBQzVCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO29DQUM3QixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzt3Q0FDcEIsS0FBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQ0FDOUMsQ0FBQztvQ0FBQyxJQUFJLENBQUMsQ0FBQzt3Q0FDSixLQUFJLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQ3BELENBQUM7Z0NBQ0wsQ0FBQyxDQUFDLENBQUM7Z0NBQ0gsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7b0NBQ3BCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7b0NBQzlDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0NBQ2xCLENBQUM7Z0NBQUMsSUFBSSxDQUFDLENBQUM7b0NBQ0osTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQ0FDakUsQ0FBQztnQ0FHRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO2dDQUNqQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQ0FDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7Z0NBQzFCLE1BQU0sQ0FBQyxNQUFNLENBQUM7NEJBQ2xCLENBQUM7b0JBQ1QsQ0FBQztnQkFDTCxDQUFDO2dCQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsQ0FBQztZQUdNLHlDQUFxQixHQUE1QixVQUE2QixLQUFrQjtnQkFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixDQUFDO1lBQ00sZ0NBQVksR0FBbkIsVUFBb0IsS0FBa0I7Z0JBQ2xDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsQ0FBQztZQUNNLHNDQUFrQixHQUF6QixVQUEwQixLQUFrQjtnQkFDeEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztvQkFDaEcsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLG9CQUFvQixJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7d0JBQ2xDLElBQUksU0FBUyxHQUFjLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDekMsU0FBUyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7d0JBQ2hELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ3RELENBQUM7b0JBQ0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztnQkFDckMsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7d0JBQzdELElBQUksS0FBSyxHQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ25DLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7NEJBQ1IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDekQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQzs0QkFDdEMsQ0FBQzt3QkFDTCxDQUFDO29CQUNMLENBQUM7b0JBQ0QsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLG9CQUFvQixJQUFJLElBQUksQ0FBQyxDQUFBLENBQUM7d0JBQ2xDLElBQUksUUFBUSxHQUFjLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDeEMsUUFBUSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDO3dCQUM5QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixZQUFZLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQzVELENBQUM7d0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQzVELENBQUM7d0JBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDbEUsQ0FBQztvQkFDTCxDQUFDO2dCQUNMLENBQUM7Z0JBQUEsSUFBSSxDQUFBLENBQUM7b0JBQ0YsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO3dCQUMzRSxJQUFJLFNBQVMsR0FBYyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQ3pDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixDQUFDO3dCQUNoRCxJQUFJLEdBQUcsR0FBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUMzRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO3dCQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDO29CQUVmLENBQUM7Z0JBQ0wsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3BDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsWUFBWSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6RCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN6RCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9ELENBQUM7WUFFTCxDQUFDO1lBc0dMLGdCQUFDO1FBQUQsQ0FyYkEsQUFxYkMsQ0FyYjhCLE9BQUEsSUFBSSxHQXFibEM7UUFyYlksZ0JBQVMsWUFxYnJCLENBQUE7SUFDTCxDQUFDLEVBbGNpQixJQUFJLEdBQUosWUFBSSxLQUFKLFlBQUksUUFrY3JCO0FBQUQsQ0FBQyxFQWxjUyxPQUFPLEtBQVAsT0FBTyxRQWtjaEI7QUNyY0QsMERBQTBEO0FBQzFELDRDQUE0QztBQUU1QyxJQUFVLE9BQU8sQ0E4RWhCO0FBOUVELFdBQVUsT0FBTztJQUFDLElBQUEsTUFBTSxDQThFdkI7SUE5RWlCLFdBQUEsTUFBTTtRQUdwQixJQUFPLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQVExQyxJQUFPLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUcxQyxJQUFPLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUV0QztZQUFpQywrQkFBUztZQUExQzs7WUE2REEsQ0FBQztZQTNERywrQkFBUyxHQUFULFVBQVUsS0FBa0IsRUFBRSxNQUFtQixFQUFFLE1BQWM7Z0JBQzdELE1BQU0sQ0FBQyxpQkFBTSxTQUFTLFlBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsRCxDQUFDO1lBRUQsOEJBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjO2dCQUMvRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxRQUFjLENBQUM7Z0JBRW5CLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUMxQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUM5QixRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM3QyxDQUFDO1lBQ0wsQ0FBQztZQUdNLGdDQUFVLEdBQWpCLFVBQWtCLFFBQWEsRUFBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsTUFBYztnQkFFdEYsSUFBSSxLQUFLLEdBQVUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1RixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztnQkFDMUMsSUFBSSxNQUFNLEdBQVcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxHQUFXLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2dCQUM3QyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDdkIsS0FBSyxPQUFPLENBQUMsSUFBSTt3QkFDYixLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUN2QyxLQUFLLENBQUM7b0JBQ1YsS0FBSyxPQUFPLENBQUMsSUFBSTt3QkFDYixLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QyxLQUFLLENBQUM7b0JBQ1YsS0FBSyxPQUFPLENBQUMsS0FBSzt3QkFDZCxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQzNELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDekMsS0FBSyxDQUFDO29CQUNWLEtBQUssT0FBTyxDQUFDLEdBQUc7d0JBQ1osS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDeEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDdkMsS0FBSyxDQUFDO29CQUNWLEtBQUssT0FBTyxDQUFDLE1BQU07d0JBQ2YsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUM5RCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7d0JBQzNDLEtBQUssQ0FBQztvQkFDVixLQUFLLE9BQU8sQ0FBQyxNQUFNO3dCQUNmLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFDLENBQUMsQ0FBQzt3QkFDN0UsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsR0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUMsQ0FBQyxDQUFDO3dCQUNqRixFQUFFLENBQUEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBQzs0QkFDVCxJQUFJLEdBQUcsQ0FBQyxDQUFDO3dCQUNiLENBQUM7d0JBQ0QsRUFBRSxDQUFBLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7NEJBQ1QsSUFBSSxHQUFFLENBQUMsQ0FBQzt3QkFDWixDQUFDO3dCQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNyQixLQUFLLENBQUM7Z0JBQ1YsQ0FBQztnQkFDRCwwREFBMEQ7Z0JBQzFELDJDQUEyQztnQkFDM0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBQyxNQUFNLENBQUMsQ0FBQztZQUNwRyxDQUFDO1lBRVQsa0JBQUM7UUFBRCxDQTdEQSxBQTZEQyxDQTdEZ0MsU0FBUyxHQTZEekM7UUE3RFksa0JBQVcsY0E2RHZCLENBQUE7SUFDTCxDQUFDLEVBOUVpQixNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUE4RXZCO0FBQUQsQ0FBQyxFQTlFUyxPQUFPLEtBQVAsT0FBTyxRQThFaEI7QUNsRkQsbUNBQW1DO0FBQ25DLGlEQUFpRDtBQUNqRCx1Q0FBdUM7QUFFdkMsSUFBVSxPQUFPLENBMkRoQjtBQTNERCxXQUFVLE9BQU87SUFBQyxJQUFBLEdBQUcsQ0EyRHBCO0lBM0RpQixXQUFBLEdBQUc7UUFjakIsSUFBTyxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFJaEQsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDaEQsSUFBTyxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFFOUI7WUFBOEIsNEJBQU87WUFHakMsa0JBQVksRUFBa0I7Z0JBQTlCLFlBQ0ksaUJBQU8sU0FVVjtnQkFURyxFQUFFLENBQUEsQ0FBQyxFQUFFLFlBQVksSUFBQSxlQUFlLENBQUMsQ0FBQSxDQUFDO29CQUM5QixLQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztnQkFDOUIsQ0FBQztnQkFBQSxJQUFJLENBQUEsQ0FBQztvQkFDRixNQUFNLDRCQUE0QixDQUFDO2dCQUN2QyxDQUFDO2dCQUNELEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSSxDQUFDLENBQUM7Z0JBQ3RDLElBQUksRUFBRSxHQUFrQixJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25HLEtBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQzs7Z0JBQ2hDLDBDQUEwQztZQUM5QyxDQUFDO1lBQ08sa0NBQWUsR0FBdkIsVUFBd0IsSUFBYTtnQkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLENBQUM7WUFDUywyQkFBUSxHQUFsQixVQUFtQixNQUFhO2dCQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7WUFDUywwQkFBTyxHQUFqQjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JCLENBQUM7WUFDUywyQkFBUSxHQUFsQjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RCLENBQUM7WUFDUyw0QkFBUyxHQUFuQjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7WUFDUyxpQ0FBYyxHQUF4QixVQUF5QixJQUFTO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsQ0FBQztZQUNTLHlDQUFzQixHQUFoQyxVQUFpQyxNQUFhLEVBQUMsTUFBYSxFQUFDLFdBQWtCLEVBQUMsVUFBaUI7Z0JBQzdGLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFDLE1BQU0sRUFBQyxXQUFXLEVBQUMsVUFBVSxDQUFDLENBQUM7WUFDakYsQ0FBQztZQUVMLGVBQUM7UUFBRCxDQXJDQSxBQXFDQyxDQXJDNkIsSUFBQSxPQUFPLEdBcUNwQztRQXJDWSxZQUFRLFdBcUNwQixDQUFBO0lBQ0wsQ0FBQyxFQTNEaUIsR0FBRyxHQUFILFdBQUcsS0FBSCxXQUFHLFFBMkRwQjtBQUFELENBQUMsRUEzRFMsT0FBTyxLQUFQLE9BQU8sUUEyRGhCO0FDL0RELDBEQUEwRDtBQUMxRCx5Q0FBeUM7QUFJekMsSUFBVSxPQUFPLENBbUhoQjtBQW5IRCxXQUFVLE9BQU87SUFBQyxJQUFBLE1BQU0sQ0FtSHZCO0lBbkhpQixXQUFBLE1BQU07UUFDcEIsSUFBTyxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFjMUMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDOUMsSUFBTyxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFJaEQ7WUFBOEIsNEJBQVc7WUFBekM7O1lBOEZBLENBQUM7WUF4RkcsMEJBQU8sR0FBUCxVQUFRLElBQVksRUFBRSxHQUFXLEVBQUUsS0FBYSxFQUFFLE1BQWM7Z0JBQzVELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNmLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUNkLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQztnQkFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsQ0FBQztZQUVNLCtCQUFZLEdBQW5CLFVBQW9CLE1BQWM7Z0JBQzlCLGlCQUFNLFlBQVksWUFBQyxNQUFNLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7Z0JBQ3RDLFVBQVU7Z0JBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BFLENBQUM7WUFDRCwyQkFBUSxHQUFSLFVBQVMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLE1BQWM7Z0JBQy9ELGlCQUFNLFFBQVEsWUFBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkMsQ0FBQztZQUdELCtCQUFZLEdBQVo7Z0JBQ0ksaUJBQU0sWUFBWSxXQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLENBQUM7WUFFTSxnQ0FBYSxHQUFwQjtnQkFDSSxJQUFJLEtBQUssR0FBZ0IsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzdFLElBQUksTUFBTSxHQUFnQixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDckIsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzNGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUV4QixDQUFDO1lBQ0Qsc0JBQUksMEJBQUk7cUJBQVI7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7OztlQUFBO1lBQ0Qsc0JBQUkseUJBQUc7cUJBQVA7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7OztlQUFBO1lBQ0Qsc0JBQUksMkJBQUs7cUJBQVQ7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7OztlQUFBO1lBQ0Qsc0JBQUksNEJBQU07cUJBQVY7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7OztlQUFBO1lBQ00saUNBQWMsR0FBckIsVUFBc0IsU0FBb0I7Z0JBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO2dCQUMzQixVQUFVLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7Z0JBQ25DLDBCQUEwQjtZQUM5QixDQUFDO1lBRU8sa0NBQWUsR0FBdkI7Z0JBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO29CQUNwRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7d0JBQzVHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO29CQUM5RyxDQUFDO2dCQUNMLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNyQyxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDM0QsQ0FBQztZQUVMLENBQUM7WUFDTywyQkFBUSxHQUFoQjtnQkFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ2hELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO29CQUNyRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN2QixNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDM0QsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztvQkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNCLENBQUM7WUFDTCxDQUFDO1lBRU0sMEJBQU8sR0FBZCxVQUFlLElBQVUsRUFBRSxLQUFhO2dCQUNwQyxpQkFBTSxPQUFPLFlBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUM7WUFDTSwrQkFBWSxHQUFuQixVQUFvQixDQUFTO2dCQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNyQixDQUFDO1lBQ0wsZUFBQztRQUFELENBOUZBLEFBOEZDLENBOUY2QixPQUFBLFdBQVcsR0E4RnhDO1FBOUZZLGVBQVEsV0E4RnBCLENBQUE7SUFDTCxDQUFDLEVBbkhpQixNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUFtSHZCO0FBQUQsQ0FBQyxFQW5IUyxPQUFPLEtBQVAsT0FBTyxRQW1IaEI7QUN4SEQsb0NBQW9DO0FBQ3BDLDhDQUE4QztBQUM5Qyw0Q0FBNEM7QUFDNUMscURBQXFEO0FBR3JELElBQVUsT0FBTyxDQStEaEI7QUEvREQsV0FBVSxPQUFPO0lBQUMsSUFBQSxHQUFHLENBK0RwQjtJQS9EaUIsV0FBQSxHQUFHO1FBZWpCLElBQU8sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBRzFDLElBQU8sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3RDLElBQU8sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUVwRDtZQUlJLHlCQUFZLE1BQWE7Z0JBSGpCLFVBQUssR0FBZSxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUlwQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsaUNBQWlDO2dCQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxNQUFNLENBQUMsS0FBSyxFQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUxRCxDQUFDO1lBQ00sbUNBQVMsR0FBaEIsVUFBaUIsS0FBaUI7Z0JBRTlCLEVBQUUsQ0FBQSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUEsQ0FBQztvQkFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUMsQ0FBQztnQkFBQSxJQUFJLENBQUEsQ0FBQztvQkFDRixJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QyxDQUFDO1lBQ0wsQ0FBQztZQUNNLDJDQUFpQixHQUF4QixVQUF5QixNQUFjLEVBQUMsTUFBYyxFQUFFLFdBQW1CLEVBQUUsVUFBaUI7Z0JBQzFGLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQzVELElBQUksZUFBZSxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xFLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ3JELENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ2hDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0RSxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNoRCx3QkFBd0I7Z0JBQ3hCLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN2RCxxQ0FBcUM7Z0JBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRW5DLENBQUM7WUFDTyx3Q0FBYyxHQUF0QixVQUF1QixhQUFrQjtnQkFDckMsSUFBSSxRQUFRLEdBQWEsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pELE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDcEIsQ0FBQztZQUNNLDRDQUFrQixHQUF6QjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxDQUFDO1lBQ0wsc0JBQUM7UUFBRCxDQXpDQSxBQXlDQyxJQUFBO1FBekNZLG1CQUFlLGtCQXlDM0IsQ0FBQTtJQUNMLENBQUMsRUEvRGlCLEdBQUcsR0FBSCxXQUFHLEtBQUgsV0FBRyxRQStEcEI7QUFBRCxDQUFDLEVBL0RTLE9BQU8sS0FBUCxPQUFPLFFBK0RoQjtBQ3JFRCx3Q0FBd0M7QUFFeEMsMkNBQTJDO0FBQzNDLGlEQUFpRDtBQUNqRCxzQ0FBc0M7QUFDdEMsb0RBQW9EO0FBR3BELElBQVUsT0FBTyxDQTJJaEI7QUEzSUQsV0FBVSxPQUFPO0lBQ2IsSUFBTyxlQUFlLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDckQsSUFBTyxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDeEMsSUFBTyxVQUFVLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDaEQsSUFBTyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFbkMsSUFBTyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDdEMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBR3BEO1FBS0k7WUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztZQUM1QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDOUIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztnQkFDeEMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUM5QyxDQUFDO1lBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0QsQ0FBQztZQUNELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELGtDQUFrQztZQUNsQyxpQ0FBaUM7WUFDakMsZ0NBQWdDO1lBQ2hDLG1DQUFtQztZQUNuQyxpQ0FBaUM7WUFDakMsaUNBQWlDO1lBQ2pDLCtCQUErQjtZQUMvQixnQ0FBZ0M7WUFDaEMsaUNBQWlDO1lBRWpDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JELElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRy9DLHdFQUF3RTtZQUN4RSx1RUFBdUU7WUFDdkUsc0VBQXNFO1lBQ3RFLHlFQUF5RTtZQUN6RSx1RUFBdUU7WUFDdkUsdUVBQXVFO1lBQ3ZFLHFFQUFxRTtZQUNyRSxzRUFBc0U7WUFDdEUsdUVBQXVFO1FBRTNFLENBQUM7UUFDTyx5QkFBTyxHQUFmLFVBQWdCLEtBQUs7WUFDakIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN4QixJQUFJLEtBQUssR0FBRyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNsQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixJQUFJLE1BQU0sR0FBZ0IsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDakIsS0FBSyxZQUFZO29CQUNiLDRGQUE0RjtvQkFDNUYsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDdEcsS0FBSyxDQUFDO2dCQUNWLEtBQUssVUFBVTtvQkFDWCxNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUNsSCxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxhQUFhO29CQUNkLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3RILEtBQUssQ0FBQztnQkFDVixLQUFLLFdBQVc7b0JBQ1osTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDdEcsS0FBSyxDQUFDO2dCQUNWLEtBQUssV0FBVztvQkFDWixNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO29CQUN0RixLQUFLLENBQUM7Z0JBQ1YsS0FBSyxXQUFXO29CQUNaLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7b0JBQ3RGLEtBQUssQ0FBQztnQkFDVixLQUFLLFNBQVM7b0JBQ1YsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7b0JBQ3BGLEtBQUssQ0FBQztnQkFDVixLQUFLLFVBQVU7b0JBQ1gsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztvQkFDckYsS0FBSyxDQUFDO2dCQUNWLEtBQUssV0FBVztvQkFDWixNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO29CQUN0RixLQUFLLENBQUM7Z0JBQ1YsS0FBSyxPQUFPO29CQUNSLE1BQU0sR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNoRixLQUFLLENBQUM7WUFFZCxDQUFDO1lBQ0QsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzlCLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDaEQsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdkMsMkJBQTJCO1FBQy9CLENBQUM7UUFDTSx1QkFBSyxHQUFaO1lBQ0ksSUFBSSxNQUFNLEdBQVcsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1lBQ2hELElBQUksTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN0QyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUNPLG1DQUFpQixHQUF6QjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7UUFDN0MsQ0FBQztRQUNPLGlDQUFlLEdBQXZCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUM3QyxDQUFDO1FBQ08sZ0NBQWMsR0FBdEI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBQzVDLENBQUM7UUFDTywrQkFBYSxHQUFyQjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQzFFLENBQUM7UUFDTyx5QkFBTyxHQUFmO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzVCLENBQUM7UUFDTyw0QkFBVSxHQUFsQjtZQUNJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUM1QyxDQUFDO1FBQ00sb0NBQWtCLEdBQXpCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNyRCxDQUFDO1FBRUwsY0FBQztJQUFELENBaElBLEFBZ0lDLElBQUE7SUFoSVksZUFBTyxVQWdJbkIsQ0FBQTtBQUNMLENBQUMsRUEzSVMsT0FBTyxLQUFQLE9BQU8sUUEySWhCO0FDbkpELElBQVUsT0FBTyxDQVloQjtBQVpELFdBQVUsT0FBTztJQUFDLElBQUEsUUFBUSxDQVl6QjtJQVppQixXQUFBLFFBQVE7UUFFdEI7WUFBQTtZQVNBLENBQUM7WUFQVSxtQ0FBUyxHQUFoQjtnQkFDSSxhQUFhO1lBQ2pCLENBQUM7WUFFTSx1Q0FBYSxHQUFwQjtnQkFDSSxhQUFhO1lBQ2pCLENBQUM7WUFDTCxzQkFBQztRQUFELENBVEEsQUFTQyxJQUFBO1FBVGEsd0JBQWUsa0JBUzVCLENBQUE7SUFDTCxDQUFDLEVBWmlCLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBWXpCO0FBQUQsQ0FBQyxFQVpTLE9BQU8sS0FBUCxPQUFPLFFBWWhCO0FDWkQsMkNBQTJDO0FBRTNDLElBQVUsT0FBTyxDQXlDaEI7QUF6Q0QsV0FBVSxPQUFPO0lBQUMsSUFBQSxRQUFRLENBeUN6QjtJQXpDaUIsV0FBQSxRQUFRO1FBQ3RCO1lBQUE7Z0JBQ3VCLGVBQVUsR0FBYSxJQUFJLEtBQUssRUFBSyxDQUFDO1lBdUI3RCxDQUFDO1lBdEJVLHFDQUFnQixHQUF2QixVQUF3QixRQUFXO2dCQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ1osTUFBTSxrQ0FBa0MsQ0FBQztnQkFDN0MsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLE1BQU0sV0FBVyxHQUFHLFFBQVEsR0FBRyx5QkFBeUIsQ0FBQztnQkFDN0QsQ0FBQztnQkFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBQ00sdUNBQWtCLEdBQXpCLFVBQTBCLFFBQVc7Z0JBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDWixNQUFNLGtDQUFrQyxDQUFDO2dCQUM3QyxDQUFDO2dCQUNELElBQUksS0FBSyxHQUFXLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0RCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNmLE1BQU0sV0FBVyxHQUFHLFFBQVEsR0FBRyxzQkFBc0IsQ0FBQztnQkFDMUQsQ0FBQztnQkFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQztZQUNNLGtDQUFhLEdBQXBCO2dCQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0wsaUJBQUM7UUFBRCxDQXhCQSxBQXdCQyxJQUFBO1FBeEJhLG1CQUFVLGFBd0J2QixDQUFBO1FBRUQ7WUFBdUMscUNBQTJCO1lBQWxFOztZQWFBLENBQUM7WUFaVSx5Q0FBYSxHQUFwQjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUNuQyxDQUFDO1lBRUwsQ0FBQztZQUVNLDZDQUFpQixHQUF4QjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBVyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN2QyxDQUFDO1lBQ0wsQ0FBQztZQUNMLHdCQUFDO1FBQUQsQ0FiQSxBQWFDLENBYnNDLFVBQVUsR0FhaEQ7UUFiWSwwQkFBaUIsb0JBYTdCLENBQUE7SUFDTCxDQUFDLEVBekNpQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQXlDekI7QUFBRCxDQUFDLEVBekNTLE9BQU8sS0FBUCxPQUFPLFFBeUNoQjtBQzNDRCx5REFBeUQ7QUFFekQsSUFBVSxPQUFPLENBTWhCO0FBTkQsV0FBVSxPQUFPO0lBQUMsSUFBQSxPQUFPLENBTXhCO0lBTmlCLFdBQUEsT0FBTztRQUlyQjtZQUFBO1lBQ0EsQ0FBQztZQUFELGNBQUM7UUFBRCxDQURBLEFBQ0MsSUFBQTtRQURhLGVBQU8sVUFDcEIsQ0FBQTtJQUNMLENBQUMsRUFOaUIsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBTXhCO0FBQUQsQ0FBQyxFQU5TLE9BQU8sS0FBUCxPQUFPLFFBTWhCO0FDUkQseURBQXlEO0FBRXpELElBQVUsT0FBTyxDQWtHaEI7QUFsR0QsV0FBVSxPQUFPO0lBQUMsSUFBQSxPQUFPLENBa0d4QjtJQWxHaUIsV0FBQSxPQUFPO1FBQ3JCLElBQU8saUJBQWlCLEdBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQztRQUcvRDtZQUFBO2dCQUNRLHVCQUFrQixHQUFxQixJQUFJLGlCQUFpQixFQUFFLENBQUM7Z0JBQ2xFLGVBQVUsR0FBcUIsSUFBSSxLQUFLLEVBQVksQ0FBQztnQkFDcEQsaUJBQVksR0FBVyxLQUFLLENBQUM7WUFpRm5DLENBQUM7WUEvRUcsc0NBQVksR0FBbkI7WUFDQSxDQUFDO1lBRUQsc0dBQXNHO1lBRXJHLGlEQUF1QixHQUF2QixVQUF3QixRQUF3QjtnQkFDaEQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELENBQUM7WUFFQSxtREFBeUIsR0FBekIsVUFBMEIsUUFBd0I7Z0JBQ2xELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0RCxDQUFDO1lBRUQsZ0dBQWdHO1lBRXpGLDhDQUFvQixHQUEzQjtnQkFDQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDekMsQ0FBQztZQUVPLGtEQUF3QixHQUFoQztnQkFDQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM3QyxDQUFDO1lBQ0Q7Ozs7ZUFJRztZQUNLLHdDQUFjLEdBQXRCLFVBQXdCLE1BQWM7Z0JBQ3JDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO2dCQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUM7Z0JBQzNCLENBQUM7WUFDRixDQUFDO1lBWUEsa0NBQVEsR0FBUixVQUFTLFFBQWUsRUFBRyxTQUFjO2dCQUN6QyxJQUFJLElBQUksR0FBUSxJQUFJLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN2QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7d0JBQzVDLElBQUksSUFBSSxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3BELEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUMvQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzs0QkFDakIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0NBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7NEJBQ3hELENBQUM7d0JBQ0YsQ0FBQztvQkFDRixDQUFDO29CQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN4RCxDQUFDO29CQUNELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN4RCxDQUFDO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDYixDQUFDO1lBQ0Q7O2VBRUc7WUFFTSxxQ0FBVyxHQUFwQixjQUF1QixDQUFDO1lBRXhCOztlQUVHO1lBRU0sc0NBQVksR0FBckIsY0FBd0IsQ0FBQztZQUd0QixzQkFBQztRQUFELENBcEZBLEFBb0ZDLElBQUE7UUFwRnFCLHVCQUFlLGtCQW9GcEMsQ0FBQTtRQUNEO1lBSUYsa0JBQWEsQ0FBTSxFQUFHLEdBQVU7Z0JBQy9CLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO2dCQUNkLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1lBQ3JCLENBQUM7WUFDRixlQUFDO1FBQUQsQ0FSRyxBQVFGLElBQUE7UUFSZSxnQkFBUSxXQVF2QixDQUFBO0lBQ0YsQ0FBQyxFQWxHaUIsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBa0d4QjtBQUFELENBQUMsRUFsR1MsT0FBTyxLQUFQLE9BQU8sUUFrR2hCO0FDcEdELElBQVUsT0FBTyxDQWFoQjtBQWJELFdBQVUsT0FBTztJQUFDLElBQUEsR0FBRyxDQWFwQjtJQWJpQixXQUFBLEdBQUc7UUFDakI7WUFBQTtnQkFDWSxRQUFHLEdBQU8sRUFBRSxDQUFDO1lBVXpCLENBQUM7WUFUVSxvQkFBRyxHQUFWLFVBQVcsR0FBVSxFQUFDLEtBQVM7Z0JBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUUsS0FBSyxDQUFDO1lBQ3pCLENBQUM7WUFDTSwyQkFBVSxHQUFqQixVQUFrQixLQUFTO2dCQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFDLEtBQUssQ0FBQztZQUM5QixDQUFDO1lBQ00sMkJBQVUsR0FBakI7Z0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0IsQ0FBQztZQUNMLGFBQUM7UUFBRCxDQVhBLEFBV0MsSUFBQTtRQVhZLFVBQU0sU0FXbEIsQ0FBQTtJQUNMLENBQUMsRUFiaUIsR0FBRyxHQUFILFdBQUcsS0FBSCxXQUFHLFFBYXBCO0FBQUQsQ0FBQyxFQWJTLE9BQU8sS0FBUCxPQUFPLFFBYWhCO0FDYkQsSUFBVSxPQUFPLENBYWhCO0FBYkQsV0FBVSxPQUFPO0lBQUMsSUFBQSxRQUFRLENBYXpCO0lBYmlCLFdBQUEsUUFBUTtRQUN0QixJQUFZLEtBV1g7UUFYRCxXQUFZLEtBQUs7WUFDYixpQ0FBUSxDQUFBO1lBQ1I7O2VBRUc7WUFDSCxxQ0FBVSxDQUFBO1lBQ1Y7O2VBRUc7WUFDSCxtQ0FBUyxDQUFBO1FBRWIsQ0FBQyxFQVhXLEtBQUssR0FBTCxjQUFLLEtBQUwsY0FBSyxRQVdoQjtJQUNMLENBQUMsRUFiaUIsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFhekI7QUFBRCxDQUFDLEVBYlMsT0FBTyxLQUFQLE9BQU8sUUFhaEI7QUNiRCxJQUFVLE9BQU8sQ0FXaEI7QUFYRCxXQUFVLE9BQU87SUFBQyxJQUFBLFFBQVEsQ0FXekI7SUFYaUIsV0FBQSxRQUFRO1FBRXBCO1lBR0UscUJBQVksUUFBaUIsRUFBQyxPQUFlO2dCQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFFLFFBQVEsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDM0IsQ0FBQztZQUNMLGtCQUFDO1FBQUQsQ0FQRSxBQU9ELElBQUE7UUFQYyxvQkFBVyxjQU96QixDQUFBO0lBRUwsQ0FBQyxFQVhpQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQVd6QjtBQUFELENBQUMsRUFYUyxPQUFPLEtBQVAsT0FBTyxRQVdoQjtBQ1hELGdDQUFnQztBQUVoQyxJQUFPLE9BQU8sQ0F3T2I7QUF4T0QsV0FBTyxPQUFPO0lBQUMsSUFBQSxRQUFRLENBd090QjtJQXhPYyxXQUFBLFFBQVE7UUFDbkIsWUFBWSxDQUFDO1FBRWIsSUFBTyxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBTyxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFHdEM7O1dBRUc7UUFDSDtZQVFJLDRCQUFZLE9BQW9CO2dCQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztnQkFDeEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRW5CLENBQUM7WUFFRCxzQkFBVyxxQ0FBSztxQkFBaEIsVUFBaUIsS0FBYTtvQkFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2dCQUN2QyxDQUFDOzs7ZUFBQTtZQUVELHdDQUFXLEdBQVg7Z0JBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVFLENBQUM7WUFFRCxzQ0FBUyxHQUFUO1lBQ0EsQ0FBQztZQUVELGlDQUFJLEdBQUo7Z0JBQ0ksdUJBQXVCO2dCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLENBQUM7WUFFRCxvQ0FBTyxHQUFQO2dCQUNJLDBCQUEwQjtnQkFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixDQUFDO1lBR0QseUNBQVksR0FBWixVQUFhLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVU7Z0JBRXZELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2RCxDQUFDO1lBQ0QseUNBQVksR0FBWixVQUFhLFNBQW9CLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxNQUFlLEVBQUUsTUFBZSxFQUFFLFVBQW1CLEVBQUUsV0FBb0I7Z0JBQ2xJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzVGLENBQUM7WUFDRCxpQ0FBSSxHQUFKLFVBQUssSUFBVTtnQkFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQUEsQ0FBQztnQkFDbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixDQUFDO1lBQ0QsNENBQWUsR0FBZixVQUFnQixDQUFTLEVBQUUsQ0FBUztnQkFDaEMsSUFBSSxpQkFBaUIsR0FBVyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO2dCQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDL0QsQ0FBQztZQUVELHNCQUFJLHVDQUFPO3FCQUFYO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN4QixDQUFDOzs7ZUFBQTtZQUVELHdDQUFXLEdBQVgsVUFBWSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVLEVBQUUsU0FBa0IsRUFBRSxLQUFXO1lBQzNGLENBQUM7WUFFRCxxQ0FBUSxHQUFSLFVBQVMsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLEtBQWEsRUFBRSxJQUFhO2dCQUM3RSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztvQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO2dCQUN2QyxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLENBQUM7WUFDTCxDQUFDO1lBSUQscUNBQVEsR0FBUixVQUFTLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxXQUF3QjtnQkFDN0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7Z0JBQ25ELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFNUIsQ0FBQztZQUVELHNDQUFTLEdBQVQsVUFBVSxFQUFZLEVBQUUsRUFBWSxFQUFFLFdBQXdCO2dCQUMxRCxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsS0FBSyxJQUFJLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztvQkFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztvQkFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQzt3QkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QyxDQUFDO29CQUNELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQy9CLENBQUM7WUFDTCxDQUFDO1lBRUQsd0NBQVcsR0FBWCxVQUFZLEVBQVksRUFBRSxFQUFZLEVBQUUsS0FBYTtnQkFDakQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixDQUFDO1lBRUQsb0NBQU8sR0FBUCxVQUFRLEVBQVUsRUFBRSxFQUFVLEVBQUUsQ0FBUyxFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxLQUFhO2dCQUM1RixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUU3QixDQUFDO1lBR0Qsc0NBQVMsR0FBVCxVQUFVLEVBQVUsRUFBRSxFQUFVLEVBQUUsTUFBYyxFQUFFLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxVQUFrQixFQUFFLEtBQWE7Z0JBQ3hILCtEQUErRDtnQkFDL0QsNEVBQTRFO2dCQUM1RSxJQUFJLFFBQVEsR0FBVyxVQUFVLEdBQUcsVUFBVSxDQUFDO2dCQUMvQyxJQUFJLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzNDLElBQUksRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDekMsRUFBRSxDQUFDLENBQUMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDaEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBRXBFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsQ0FBQztZQUVELHVDQUFVLEdBQVYsVUFBVyxDQUFTLEVBQUUsRUFBUyxFQUFFLElBQVU7Z0JBQ3ZDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztvQkFDOUQsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNoRixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDakIsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUMzQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7b0JBQ3hDLENBQUM7Z0JBQ0wsQ0FBQztnQkFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsQ0FBQztZQUVELDhDQUFpQixHQUFqQixVQUFrQixDQUFTLEVBQUUsRUFBUyxFQUFFLE1BQWEsRUFBRSxLQUFhLEVBQUUsSUFBVTtnQkFDNUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO2dCQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0MsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUM5RCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ2hGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO3dCQUNqQixRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzNDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztvQkFDeEMsQ0FBQztnQkFDTCxDQUFDO2dCQUNELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixDQUFDO1lBRUQsMENBQWEsR0FBYixVQUFjLENBQVMsRUFBRSxJQUFVLEVBQUUsT0FBbUI7Z0JBQW5CLHdCQUFBLEVBQUEsV0FBbUI7Z0JBQ3BELElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQ25FLElBQUksRUFBRSxHQUFnQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEQsRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUNwQixFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDZCxDQUFDO1lBR0Qsc0NBQVMsR0FBVCxVQUFVLEtBQVUsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1lBR2hFLENBQUM7WUFFTyxvQ0FBTyxHQUFmO2dCQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELENBQUM7WUFHRCxtQ0FBTSxHQUFOLFVBQU8sQ0FBUSxFQUFDLENBQVE7Z0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDO1lBQ0Qsa0NBQUssR0FBTCxVQUFNLEVBQVUsRUFBRSxFQUFVO2dCQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsQ0FBQztZQUNELG1DQUFNLEdBQU4sVUFBTyxNQUFjO2dCQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQyxDQUFDO1lBRUQsc0NBQVMsR0FBVCxVQUFVLENBQVMsRUFBRSxDQUFTO2dCQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbkMsQ0FBQztZQUtMLHlCQUFDO1FBQUQsQ0E3TkEsQUE2TkMsSUFBQTtRQTdOWSwyQkFBa0IscUJBNk45QixDQUFBO0lBQ0wsQ0FBQyxFQXhPYyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQXdPdEI7QUFBRCxDQUFDLEVBeE9NLE9BQU8sS0FBUCxPQUFPLFFBd09iO0FDMU9ELGdDQUFnQztBQUVoQyxJQUFPLE9BQU8sQ0ErbkJiO0FBL25CRCxXQUFPLE9BQU87SUFBQyxJQUFBLFFBQVEsQ0ErbkJ0QjtJQS9uQmMsV0FBQSxRQUFRO1FBQ25CLFlBQVksQ0FBQztRQUViLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQU8sS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBR3RDOztXQUVHO1FBQ0g7WUEwQkkseUJBQVksT0FBb0I7Z0JBWHhCLGlCQUFZLEdBQVcsQ0FBQyxDQUFDO2dCQUV6QixjQUFTLEdBQVcsSUFBSSxDQUFDO2dCQUN6QixnQkFBVyxHQUFXLElBQUksQ0FBQztnQkFNNUIsVUFBSyxHQUFVLENBQUMsQ0FBQztnQkFHcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDZixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRXJDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDdEMsZUFBZSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3RGLENBQUM7WUFDTCxDQUFDO1lBRUQsOEJBQUksR0FBSjtZQUVBLENBQUM7WUFDRCxpQ0FBTyxHQUFQO1lBRUEsQ0FBQztZQUNELDhCQUFJLEdBQUosY0FBTyxDQUFDO1lBRVIscUNBQVcsR0FBWDtnQkFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7b0JBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ2hELENBQUM7Z0JBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLENBQUM7WUFFRCxtQ0FBUyxHQUFUO2dCQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMzQyxDQUFDO1lBQ0wsQ0FBQztZQUVELHlDQUFlLEdBQWYsVUFBZ0IsQ0FBUyxFQUFFLENBQVM7Z0JBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELENBQUM7WUFFRCxzQkFBSSxvQ0FBTztxQkFBWDtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDckIsQ0FBQzs7O2VBQUE7WUFFRCxzQkFBSSxpQ0FBSTtxQkFBUjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtnQkFDckIsQ0FBQztxQkFDRCxVQUFTLEtBQWE7b0JBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixDQUFDOzs7ZUFIQTtZQUtELHNCQUFJLHFDQUFRO3FCQUFaO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUMxQixDQUFDO3FCQUNELFVBQWEsS0FBYTtvQkFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQzNCLENBQUM7OztlQUhBO1lBS0Qsc0JBQUksdUNBQVU7cUJBQWQ7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQzVCLENBQUM7cUJBQ0QsVUFBZSxLQUFhO29CQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztnQkFDN0IsQ0FBQzs7O2VBSEE7WUFLRCxzQkFBSSxtQ0FBTTtxQkFBVjtvQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDeEIsQ0FBQztxQkFDRCxVQUFXLEtBQWE7b0JBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUN6QixDQUFDOzs7ZUFIQTtZQUtELHNCQUFJLHdDQUFXO3FCQUFmO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUM3QixDQUFDO3FCQUNELFVBQWdCLEtBQWE7b0JBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixDQUFDOzs7ZUFIQTtZQUtELHNCQUFJLHFDQUFRO3FCQUFaO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUMxQixDQUFDO3FCQUNELFVBQWEsS0FBYTtvQkFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQzNCLENBQUM7OztlQUhBO1lBS0QscUNBQVcsR0FBWCxVQUFZLFFBQWMsRUFBRSxFQUFVO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDakIsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUMzRSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ25FLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztvQkFDckQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7b0JBQzNELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUM3RCxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUUzQixRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFFaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXBDLENBQUM7WUFDTCxDQUFDO1lBRUQscUNBQVcsR0FBWCxVQUFZLEVBQVUsRUFBRSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxTQUFrQixFQUFFLEtBQVc7Z0JBQ3ZGLElBQUksR0FBRyxHQUFlLFFBQVEsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDakYsR0FBRyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzdCLEdBQUcsQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDbkUsQ0FBQztnQkFDRCxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsd0NBQXdDO2dCQUN4Qyx3Q0FBd0M7Z0JBQ3hDLHdDQUF3QztnQkFDeEMsd0NBQXdDO2dCQUV4QyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNaLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDO2dCQUNELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUU3Qiw2QkFBNkI7Z0JBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRXZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDZixDQUFDO1lBRUQsa0NBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxTQUFrQixFQUFFLEtBQVcsRUFBRSxRQUFpQjtnQkFDbkcsSUFBSSxJQUFJLEdBQWUsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUUvRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ3BFLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDdkMsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUM3RCxDQUFDO2dCQUVELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQzFDLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBRTlCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRXhCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUNPLG9GQUFvRjtZQUU1RixrQ0FBUSxHQUFSLFVBQVMsRUFBUyxFQUFFLEVBQVMsRUFBRSxFQUFTLEVBQUUsRUFBUyxFQUFFLE1BQWtCO2dCQUNuRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUMsRUFBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLFdBQVcsRUFBQyxjQUFjLEVBQUMsTUFBTSxDQUFDLFdBQVcsRUFBQyxDQUFDLENBQUM7WUFDckcsQ0FBQztZQUNELG1DQUFTLEdBQVQsVUFBVSxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVLEVBQUUsU0FBa0IsRUFBRSxLQUFXO2dCQUNyRixJQUFJLElBQUksR0FBZ0IsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNoRixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNwRSxDQUFDO2dCQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkMseUNBQXlDO2dCQUN6Qyx5Q0FBeUM7Z0JBQ3pDLHlDQUF5QztnQkFDekMseUNBQXlDO2dCQUV6QyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUMxQyxDQUFDO2dCQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUU5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV4QixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFRCxtQ0FBUyxHQUFULFVBQVUsRUFBWSxFQUFFLEVBQVksRUFBRSxTQUFrQixFQUFFLEtBQVcsRUFBRSxRQUFpQjtnQkFDcEYsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ1gsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDekMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ1YsSUFBSSxLQUFLLEdBQWUsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO3dCQUVwRixLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQzs0QkFDN0IsS0FBSyxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO3dCQUNyRSxDQUFDO3dCQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO3dCQUNuQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7d0JBQ2QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs0QkFDM0IsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO3dCQUU1RCxDQUFDO3dCQUNELEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO3dCQUVuQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOzRCQUNaLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO3dCQUMzQyxDQUFDO3dCQUNELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7NEJBQ1gsS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsT0FBTyxHQUFHLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQzt3QkFDOUQsQ0FBQzt3QkFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQzt3QkFFL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFFekIsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDakIsQ0FBQztnQkFDTCxDQUFDO2dCQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUlELHFDQUFXLEdBQVgsVUFBWSxFQUFZLEVBQUUsRUFBWSxFQUFFLFNBQWtCLEVBQUUsS0FBVyxFQUFFLFFBQWlCO2dCQUN0RixFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDWCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUN6QyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDVixJQUFJLElBQUksR0FBZSxRQUFRLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7d0JBRWxGLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDOzRCQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7d0JBQ3BFLENBQUM7d0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBQyxJQUFJLENBQUMsS0FBSyxHQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUUzQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7d0JBQ2QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs0QkFDM0IsMERBQTBEOzRCQUMxRCxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7d0JBQzVELENBQUM7d0JBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7d0JBRWxDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7NEJBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7d0JBQzFDLENBQUM7d0JBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs0QkFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO3dCQUM3RCxDQUFDO3dCQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO3dCQUU5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUV4QixNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNoQixDQUFDO2dCQUNMLENBQUM7Z0JBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBRUQsaUNBQU8sR0FBUCxVQUFRLEVBQVUsRUFBRSxFQUFVLEVBQUUsQ0FBUyxFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFDN0UsU0FBa0IsRUFBRSxLQUFXLEVBQUUsUUFBaUI7Z0JBRWxELEVBQUUsQ0FBQyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzVELENBQUM7Z0JBRUQsSUFBSSxJQUFJLEdBQWUsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUUvRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ3BFLENBQUM7Z0JBRUQsSUFBSSxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNqQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUVqQyxJQUFJLEVBQUUsR0FBRyxVQUFVLEdBQUcsVUFBVSxDQUFDO2dCQUNqQyxJQUFJLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3pCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBRXpCLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDakMsR0FBRyxHQUFHLFNBQVMsQ0FBQztnQkFDcEIsQ0FBQztnQkFFRCxxREFBcUQ7Z0JBQ3JELHVEQUF1RDtnQkFDdkQsdURBQXVEO2dCQUN2RCxzREFBc0Q7Z0JBQ3RELElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3JELENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBRXhELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUcxQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE9BQU8sR0FBRyxRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQzdELENBQUM7Z0JBRUQsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDWixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDMUMsQ0FBQztnQkFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFFOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFeEIsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBRUQsbUNBQVMsR0FBVCxVQUFVLEVBQVUsRUFBRSxFQUFVLEVBQUUsTUFBYyxFQUFFLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxVQUFrQixFQUN6RyxTQUFrQixFQUFFLEtBQVcsRUFBRSxRQUFpQjtnQkFFbEQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixFQUFFLENBQUMsQ0FBQyxVQUFVLEdBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkMsTUFBTSxHQUFHLElBQUksQ0FBQztvQkFDZCxVQUFVLEdBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUUsVUFBVSxHQUFDLElBQUksQ0FBQztnQkFDNUMsQ0FBQztnQkFDRCxJQUFJLElBQUksR0FBZSxRQUFRLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBRS9FLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMxQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDcEUsQ0FBQztnQkFFRCxJQUFJLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3RDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBRXRDLElBQUksRUFBRSxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUM7Z0JBQ2pDLElBQUksRUFBRSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFOUIsSUFBSSxFQUFFLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuQyxFQUFFLENBQUMsQ0FBQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUVuQyxJQUFJLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBRTNDLElBQUksSUFBSSxHQUFHLFNBQVMsRUFDaEIsSUFBSSxHQUFHLFNBQVMsQ0FBQztnQkFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDakMsSUFBSSxHQUFHLFNBQVMsQ0FBQztvQkFDakIsSUFBSSxHQUFHLFNBQVMsQ0FBQztnQkFDckIsQ0FBQztnQkFFRCxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV2RCxDQUFDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUNoRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNULENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDO2dCQUNELENBQUMsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQzFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDVixDQUFDLElBQUksSUFBSSxDQUFDO2dCQUNkLENBQUM7Z0JBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRTFCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsT0FBTyxHQUFHLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDN0QsQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUMxQyxDQUFDO2dCQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUU5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV4QixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFRCxvQ0FBVSxHQUFWLFVBQVcsQ0FBUyxFQUFFLEVBQVMsRUFBRSxTQUFrQixFQUFFLEtBQVc7Z0JBQzVELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUMxQyxDQUFDO2dCQUVELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUU5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV4QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsa0JBQWtCO2dCQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXRFLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUVELDJDQUFpQixHQUFqQixVQUFrQixDQUFTLEVBQUUsRUFBUyxFQUFFLE1BQWEsRUFBRSxLQUFhLEVBQUUsU0FBa0IsRUFBRSxLQUFXO2dCQUNqRyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDWixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDMUMsQ0FBQztnQkFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFFOUIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM3RCxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUN4SCwwSEFBMEg7Z0JBQzFILENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBR3BCLDJCQUEyQjtnQkFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLGtCQUFrQjtnQkFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUV0RSxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFRCx1Q0FBYSxHQUFiLFVBQWMsQ0FBUSxFQUFDLElBQVM7Z0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQzdHLENBQUM7WUFFRCx3Q0FBYyxHQUFkLFVBQWUsQ0FBUyxFQUFFLFNBQWtCLEVBQUUsU0FBa0IsRUFBRSxLQUFXO2dCQUN6RSxJQUFJLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRXhCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO29CQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM3RCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNoRCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNyRCxDQUFDO2dCQUVELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFFcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUU3QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtnQkFDOUQsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUN0QixFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDO2dCQUUxQixJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUVwQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNSLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7d0JBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDbEQsQ0FBQztnQkFDTCxDQUFDO2dCQUVELElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQzlCLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDZCxDQUFDO1lBRUQsb0NBQVUsR0FBVixVQUFXLFNBQWtCLEVBQUUsUUFBaUIsRUFBRSxlQUFnQztnQkFBaEMsZ0NBQUEsRUFBQSx1QkFBZ0M7Z0JBQzlFLElBQUksS0FBSyxHQUFnQixRQUFRLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzlFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQzNDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDWCxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUM5RCxDQUFDO2dCQUNELElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3pCLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBaUIsSUFBSSxDQUFDLElBQUssQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7Z0JBQ3hGLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsQ0FBQztZQUVELGtDQUFRLEdBQVI7Z0JBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ2QsSUFBSSxNQUFNLEdBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7b0JBQzdDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7b0JBQ3ZCLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7b0JBQ3pCLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUM7WUFFRCxtQ0FBUyxHQUFULFVBQVUsU0FBaUIsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO2dCQUNuRSxJQUFJLEdBQUcsR0FBZ0IsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUVoRixHQUFHLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUMvRCxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEMsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXpDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRXZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDZixDQUFDO1lBRU8sc0NBQVksR0FBcEIsVUFBcUIsT0FBZ0I7Z0JBQ2pDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ3hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDVCxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDdEIsQ0FBQztnQkFDRCxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9CLENBQUM7WUFFTyxpQ0FBTyxHQUFmO2dCQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUNuRSxJQUFJLENBQUMsS0FBSyxHQUFtQixRQUFRLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3JGLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNELElBQUksQ0FBQyxVQUFVLEdBQWdCLFFBQVEsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDcEYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0MsQ0FBQztZQUVPLGtDQUFRLEdBQWhCLFVBQWlCLE9BQWdCLEVBQUUsQ0FBUztnQkFDeEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ25DLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3JDLElBQUksQ0FBQzt3QkFDRCxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzt3QkFFM0IscUNBQXFDO3dCQUNyQyxJQUFJLElBQUksR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO3dCQUUzQixxQkFBcUI7d0JBQ3JCLDJEQUEyRDt3QkFDM0QsSUFBSSxJQUFJLEdBQUcsMkNBQTJDLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQzt3QkFDekUsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsZUFBZSxDQUFDO3dCQUUzRSw0REFBNEQ7d0JBQzVELElBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUM7d0JBRXpDLE9BQU8sU0FBUyxFQUFFLENBQUM7NEJBQ2YsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQzs0QkFDdkUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7d0JBQ3RDLENBQUM7b0JBRUwsQ0FBRTtvQkFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztvQkFDakQsQ0FBQztvQkFBQSxDQUFDO2dCQUNOLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0YsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQy9CLENBQUM7WUFDTCxDQUFDO1lBRU8scUNBQVcsR0FBbkIsVUFBb0IsR0FBVSxFQUFFLElBQVk7Z0JBQ3hDLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFFckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzVCLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDNUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsNkNBQTZDO2dCQUM3Qyw2Q0FBNkM7Z0JBRTdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUNqQixNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3JELENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBQ25CLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDekQsQ0FBQztnQkFDRCxNQUFNLENBQWlCLE1BQU0sQ0FBQztZQUNsQyxDQUFDO1lBRU8scUNBQVcsR0FBbkIsVUFBb0IsRUFBYyxFQUFFLEtBQVU7Z0JBQzFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ1IsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDcEIsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNuRCxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1lBRU8saUNBQU8sR0FBZixVQUFnQixDQUFTO2dCQUNyQixNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5RSxDQUFDO1lBRU8sa0NBQVEsR0FBaEIsVUFBaUIsSUFBb0I7Z0JBQ2pDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUM7d0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDMUIsQ0FBRTtvQkFBQSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNULE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDL0MsQ0FBQztnQkFDTCxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzFCLENBQUM7WUFDTCxDQUFDO1lBQ0wsc0JBQUM7UUFBRCxDQXBuQkEsQUFvbkJDO1FBbm5Ca0IscUJBQUssR0FBRyw0QkFBNEIsQ0FBQztRQUNyQyx1QkFBTyxHQUFHLDhCQUE4QixDQUFDO1FBRi9DLHdCQUFlLGtCQW9uQjNCLENBQUE7SUFDTCxDQUFDLEVBL25CYyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQStuQnRCO0FBQUQsQ0FBQyxFQS9uQk0sT0FBTyxLQUFQLE9BQU8sUUErbkJiO0FDam9CRCxnQ0FBZ0M7QUFDaEMsa0NBQWtDO0FBRWxDLElBQVUsT0FBTyxDQWVoQjtBQWZELFdBQVUsT0FBTztJQUFDLElBQUEsUUFBUSxDQWV6QjtJQWZpQixXQUFBLFFBQVE7UUFHdEI7WUFHSSxtQkFBWSxNQUFhLEVBQUUsSUFBUztnQkFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLENBQUM7WUFDRCxpQ0FBYSxHQUFiLFVBQWMsR0FBVTtnQkFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEQsQ0FBQztZQUNMLGdCQUFDO1FBQUQsQ0FWQSxBQVVDLElBQUE7UUFWWSxrQkFBUyxZQVVyQixDQUFBO0lBRUwsQ0FBQyxFQWZpQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQWV6QjtBQUFELENBQUMsRUFmUyxPQUFPLEtBQVAsT0FBTyxRQWVoQjtBQ2xCRCxJQUFVLE9BQU8sQ0E2QmhCO0FBN0JELFdBQVUsT0FBTztJQUFDLElBQUEsSUFBSSxDQTZCckI7SUE3QmlCLFdBQUEsSUFBSTtRQUNsQjtZQUVJO2dCQURRLFdBQU0sR0FBTyxFQUFFLENBQUM7WUFHeEIsQ0FBQztZQUNNLHVCQUFHLEdBQVYsVUFBVyxLQUFPO2dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFDTSwwQkFBTSxHQUFiLFVBQWlCLEtBQVM7Z0JBQ3RCLEVBQUUsQ0FBQSxDQUFDLE9BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQSxDQUFDO29CQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUIsQ0FBQztnQkFBQSxJQUFJLENBQUMsQ0FBQztvQkFDSCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDdkMsRUFBRSxDQUFBLENBQUMsS0FBSyxHQUFFLENBQUMsQ0FBQyxDQUFBLENBQUM7d0JBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoQyxDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1lBQ00seUJBQUssR0FBWjtnQkFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDM0IsQ0FBQztZQUNNLHdCQUFJLEdBQVg7Z0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQzlCLENBQUM7WUFDTSx1QkFBRyxHQUFWLFVBQVcsS0FBWTtnQkFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsQ0FBQztZQUNMLGdCQUFDO1FBQUQsQ0EzQkEsQUEyQkMsSUFBQTtRQTNCWSxjQUFTLFlBMkJyQixDQUFBO0lBQ0wsQ0FBQyxFQTdCaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBNkJyQjtBQUFELENBQUMsRUE3QlMsT0FBTyxLQUFQLE9BQU8sUUE2QmhCO0FDN0JELElBQVUsT0FBTyxDQWVoQjtBQWZELFdBQVUsT0FBTztJQUFDLElBQUEsSUFBSSxDQWVyQjtJQWZpQixXQUFBLElBQUk7UUFDbEI7WUFFSSxpQkFBWSxJQUFZO2dCQURqQixTQUFJLEdBQVUsQ0FBQyxDQUFDO2dCQUVuQixJQUFJLENBQUMsSUFBSSxHQUFFLElBQUksQ0FBQztZQUNwQixDQUFDO1lBRWEsY0FBTSxHQUFwQixVQUFxQixJQUFZO2dCQUM3QixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0IsQ0FBQztZQUVMLGNBQUM7UUFBRCxDQVZBLEFBVUMsSUFBQTtRQVZZLFlBQU8sVUFVbkIsQ0FBQTtJQUlMLENBQUMsRUFmaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBZXJCO0FBQUQsQ0FBQyxFQWZTLE9BQU8sS0FBUCxPQUFPLFFBZWhCO0FDZkQsbUNBQW1DO0FBQ25DLCtCQUErQjtBQUUvQixJQUFVLE9BQU8sQ0FvQ2hCO0FBcENELFdBQVUsT0FBTztJQUFDLElBQUEsSUFBSSxDQW9DckI7SUFwQ2lCLFdBQUEsSUFBSTtRQUNsQjtZQUFBO2dCQUNZLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1lBaUM3QixDQUFDO1lBaENVLCtCQUFhLEdBQXBCLFVBQXFCLEdBQVk7Z0JBQzdCLGdCQUFnQjtZQUNwQixDQUFDO1lBRU0sNkJBQVcsR0FBbEIsVUFBbUIsR0FBWTtnQkFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDM0MsQ0FBQztZQUVNLG9DQUFrQixHQUF6QixVQUEwQixHQUFZLEVBQUUsS0FBYTtnQkFDakQsMEVBQTBFO2dCQUMxRSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7WUFDM0QsQ0FBQztZQUVNLG1DQUFpQixHQUF4QixVQUF5QixHQUFZLEVBQUUsWUFBb0I7Z0JBQ3ZELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDO29CQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QixDQUFDLEVBQUUsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFTSxnQ0FBYyxHQUFyQixVQUFzQixJQUFZO2dCQUM5QixZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7WUFHTSwrQkFBYSxHQUFwQixVQUFxQixJQUFZO2dCQUM3QixNQUFNLENBQUMsS0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhDLENBQUM7WUFHTCxjQUFDO1FBQUQsQ0FsQ0EsQUFrQ0MsSUFBQTtRQWxDWSxZQUFPLFVBa0NuQixDQUFBO0lBQ0wsQ0FBQyxFQXBDaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBb0NyQjtBQUFELENBQUMsRUFwQ1MsT0FBTyxLQUFQLE9BQU8sUUFvQ2hCO0FDdkNELElBQVUsT0FBTyxDQW9EaEI7QUFwREQsV0FBVSxPQUFPO0lBQUMsSUFBQSxNQUFNLENBb0R2QjtJQXBEaUIsV0FBQSxNQUFNO1FBWXBCLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBR2hDLElBQU8sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBSzlDLElBQVksU0FTWDtRQVRELFdBQVksU0FBUztZQUNqQiw2Q0FBTSxDQUFBO1lBQ04sNkNBQU0sQ0FBQTtZQUNOLG1EQUFTLENBQUE7WUFDVCxxREFBVSxDQUFBO1lBQ1YsK0NBQU8sQ0FBQTtZQUNQLDZDQUFNLENBQUE7WUFDTix1REFBVyxDQUFBO1lBQ1gsMkRBQWEsQ0FBQTtRQUNqQixDQUFDLEVBVFcsU0FBUyxHQUFULGdCQUFTLEtBQVQsZ0JBQVMsUUFTcEI7UUFRRDtZQUErQiw2QkFBSTtZQUFuQzs7WUFjQSxDQUFDO1lBUEcsNkJBQVMsR0FBVCxVQUFVLEtBQWtCLEVBQUUsTUFBbUIsRUFBRSxNQUFjO2dCQUU3RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxXQUFXLEVBQUUsRUFBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUM7Z0JBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUNELDBCQUFNLEdBQU4sVUFBTyxNQUFhO1lBQ3BCLENBQUM7WUFDTCxnQkFBQztRQUFELENBZEEsQUFjQyxDQWQ4QixJQUFJLEdBY2xDO1FBZFksZ0JBQVMsWUFjckIsQ0FBQTtJQUNMLENBQUMsRUFwRGlCLE1BQU0sR0FBTixjQUFNLEtBQU4sY0FBTSxRQW9EdkI7QUFBRCxDQUFDLEVBcERTLE9BQU8sS0FBUCxPQUFPLFFBb0RoQjtBQ3BERCwwREFBMEQ7QUFJMUQsSUFBVSxPQUFPLENBa09oQjtBQWxPRCxXQUFVLE9BQU87SUFBQyxJQUFBLE1BQU0sQ0FrT3ZCO0lBbE9pQixXQUFBLE1BQU07UUFFcEIsSUFBTyxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFTMUMsSUFBTyxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFHMUMsSUFBTyxLQUFLLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdEMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFOUMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbEQsSUFBTyxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFaEQ7WUFBa0MsZ0NBQVM7WUFBM0M7Z0JBQUEsa0RBNk1DO2dCQTVNVyxrQkFBWSxHQUFnQixXQUFXLENBQUMsVUFBVSxDQUFDOztZQTRNL0QsQ0FBQztZQTNNVSxxQ0FBYyxHQUFyQixVQUFzQixXQUF3QjtnQkFDMUMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7WUFDcEMsQ0FBQztZQUVNLHFDQUFjLEdBQXJCO2dCQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQzdCLENBQUM7WUFHRCxnQ0FBUyxHQUFULFVBQVUsS0FBa0IsRUFBRSxNQUFtQixFQUFFLE1BQWM7Z0JBQzdELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDekQsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN2RCxDQUFDO1lBQ0wsQ0FBQztZQUVELHdDQUFpQixHQUFqQixVQUFrQixLQUFrQixFQUFFLE1BQW1CLEVBQUUsTUFBYztnQkFDckUsSUFBSSxJQUFVLENBQUM7Z0JBQ2YsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUM1QyxJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsQyxJQUFJLEVBQUUsR0FBaUIsSUFBSSxDQUFDLFlBQVksQ0FBQztvQkFDekMsSUFBSSxDQUFDLEdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQztvQkFDekIsSUFBSSxDQUFDLEdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzt3QkFDOUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7b0JBQ3JCLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzt3QkFDN0MsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7b0JBQ3BCLENBQUM7b0JBQ0QsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ3BHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ1AsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO3dCQUN0QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzRCQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7d0JBQzNCLENBQUM7b0JBQ0wsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNyQixDQUFDO2dCQUNMLENBQUM7Z0JBQ0Qsa0NBQWtDO2dCQUNsQyxnQ0FBZ0M7Z0JBQ2hDLElBQUk7Z0JBQ0osb0NBQW9DO2dCQUNwQyxrQ0FBa0M7Z0JBQ2xDLElBQUk7Z0JBQ0osRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ3ZELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7Z0JBQ3pDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUNuRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDekMsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDM0MsQ0FBQztnQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQ3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUMzQyxDQUFDO2dCQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNqSSxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFRCxzQ0FBZSxHQUFmLFVBQWdCLEtBQWtCLEVBQUUsTUFBbUIsRUFBRSxNQUFjO2dCQUNuRSxJQUFJLElBQVUsQ0FBQztnQkFDZixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQzVDLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xDLElBQUksRUFBRSxHQUFpQixJQUFJLENBQUMsWUFBWSxDQUFDO29CQUN6QyxJQUFJLENBQUMsR0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDO29CQUN6QixJQUFJLENBQUMsR0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDO29CQUMxQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO3dCQUM5QyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDckIsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO3dCQUM3QyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztvQkFDcEIsQ0FBQztvQkFDRCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDcEcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDUCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7d0JBQ3hCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7NEJBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzt3QkFDekIsQ0FBQztvQkFDTCxDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNKLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3JCLENBQUM7Z0JBQ0wsQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQzdCLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUMvQixDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUN2RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO2dCQUN6QyxDQUFDO2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQkFDbkUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3pDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7Z0JBQzNDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUNwRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDM0MsQ0FBQztnQkFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDakksTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBQ0QsK0JBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjO2dCQUMvRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxTQUFTLEdBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7Z0JBQ2hELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEtBQUssV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQy9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNuRyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBQyxNQUFNLENBQUMsQ0FBQztnQkFDakcsQ0FBQztZQUNMLENBQUM7WUFFRCx1Q0FBZ0IsR0FBaEIsVUFBaUIsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLE1BQWM7Z0JBQ3ZFLElBQUksUUFBYyxDQUFDO2dCQUNuQixJQUFJLENBQVMsQ0FBQztnQkFDZCxJQUFJLFVBQVUsR0FBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUMxQyxJQUFJLFVBQVUsR0FBVyxDQUFDLENBQUM7Z0JBRTNCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQzlCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7b0JBQ2pDLFVBQVUsSUFBSSxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ2xFLENBQUM7Z0JBQ0QsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDaEIsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDVCxJQUFJLFdBQVcsR0FBVyxDQUFDLENBQUM7Z0JBQzVCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0MsQ0FBQztnQkFDRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDMUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztvQkFDakMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDbEIsS0FBSyxPQUFPLENBQUMsSUFBSTs0QkFFYixLQUFLLENBQUM7d0JBQ1YsS0FBSyxPQUFPLENBQUMsS0FBSzs0QkFDZCxLQUFLLENBQUM7d0JBQ1YsS0FBSyxPQUFPLENBQUMsR0FBRzs0QkFDWixVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDakIsS0FBSyxDQUFDO3dCQUNWLEtBQUssT0FBTyxDQUFDLE1BQU07NEJBQ2YsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDOzRCQUNwRCxLQUFLLENBQUM7d0JBQ1YsS0FBSyxPQUFPLENBQUMsTUFBTTs0QkFDZixVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7NEJBQ3JGLEtBQUssQ0FBQztvQkFDZCxDQUFDO29CQUNELFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDMUYsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBQyxNQUFNLENBQUMsQ0FBQztvQkFDcEgsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkYsQ0FBQztZQUVMLENBQUM7WUFFRCxxQ0FBYyxHQUFkLFVBQWUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLE1BQWM7Z0JBQ3JFLElBQUksUUFBYyxDQUFDO2dCQUNuQixJQUFJLENBQVMsQ0FBQztnQkFDZCxJQUFJLFVBQVUsR0FBVSxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUMxQyxJQUFJLFdBQVcsR0FBVyxDQUFDLENBQUM7Z0JBRTVCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQzlCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7b0JBQ2pDLFdBQVcsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3BFLENBQUM7Z0JBQ0QsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDaEIsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDVCxJQUFJLFdBQVcsR0FBVyxDQUFDLENBQUM7Z0JBQzVCLEVBQUUsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDOUMsQ0FBQztnQkFDRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztvQkFDMUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztvQkFDakMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDbEIsS0FBSyxPQUFPLENBQUMsSUFBSTs0QkFDYixVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDakIsS0FBSyxDQUFDO3dCQUNWLEtBQUssT0FBTyxDQUFDLEtBQUs7NEJBQ2QsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDOzRCQUNsRCxLQUFLLENBQUM7d0JBQ1YsS0FBSyxPQUFPLENBQUMsR0FBRzs0QkFDWixvQkFBb0I7NEJBQ3BCLEtBQUssQ0FBQzt3QkFDVixLQUFLLE9BQU8sQ0FBQyxNQUFNOzRCQUNmLG1EQUFtRDs0QkFDbkQsS0FBSyxDQUFDO3dCQUNWLEtBQUssT0FBTyxDQUFDLE1BQU07NEJBQ2Ysc0VBQXNFOzRCQUN0RSxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7NEJBQ25GLEtBQUssQ0FBQztvQkFDZCxDQUFDO29CQUNELFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDMUYsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBQyxNQUFNLENBQUMsQ0FBQztvQkFDcEgsK0VBQStFO29CQUMvRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0RixDQUFDO1lBQ0wsQ0FBQztZQUNMLG1CQUFDO1FBQUQsQ0E3TUEsQUE2TUMsQ0E3TWlDLFNBQVMsR0E2TTFDO1FBN01ZLG1CQUFZLGVBNk14QixDQUFBO0lBQ0wsQ0FBQyxFQWxPaUIsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBa092QjtBQUFELENBQUMsRUFsT1MsT0FBTyxLQUFQLE9BQU8sUUFrT2hCO0FDdE9ELDBEQUEwRDtBQUkxRCxJQUFVLE9BQU8sQ0FtQmhCO0FBbkJELFdBQVUsT0FBTztJQUFDLElBQUEsTUFBTSxDQW1CdkI7SUFuQmlCLFdBQUEsTUFBTTtRQVNwQixJQUFPLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQU8xQztZQUE4Qiw0QkFBUztZQUF2Qzs7WUFFQSxDQUFDO1lBQUQsZUFBQztRQUFELENBRkEsQUFFQyxDQUY2QixTQUFTLEdBRXRDO1FBRlksZUFBUSxXQUVwQixDQUFBO0lBQ0wsQ0FBQyxFQW5CaUIsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBbUJ2QjtBQUFELENBQUMsRUFuQlMsT0FBTyxLQUFQLE9BQU8sUUFtQmhCO0FDdkJELElBQVUsT0FBTyxDQStGaEI7QUEvRkQsV0FBVSxPQUFPO0lBQUMsSUFBQSxNQUFNLENBK0Z2QjtJQS9GaUIsV0FBQSxNQUFNO1FBU3BCLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBR3BDLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBR2hDLElBQU8sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzlDLElBQU8sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQU8sVUFBVSxHQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzdDLElBQU8sWUFBWSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ2hELElBQVksU0FFWDtRQUZELFdBQVksU0FBUztRQUVyQixDQUFDLEVBRlcsU0FBUyxHQUFULGdCQUFTLEtBQVQsZ0JBQVMsUUFFcEI7UUFDRDtZQUE4Qiw0QkFBSTtZQUFsQzs7WUF3RUEsQ0FBQztZQWxFRyx5QkFBTSxHQUFOLFVBQU8sTUFBYTtnQkFDaEIsaUJBQU0sTUFBTSxZQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5RSxDQUFDO1lBRU0sMEJBQU8sR0FBZCxVQUFlLElBQVc7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFFTSwwQkFBTyxHQUFkLFVBQWUsSUFBUztnQkFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDckIsQ0FBQztZQUVELHNCQUFJLCtCQUFTO3FCQUliO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUMzQixDQUFDO3FCQU5ELFVBQWMsU0FBbUI7b0JBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO2dCQUNoQyxDQUFDOzs7ZUFBQTtZQU1ELHNCQUFJLDhCQUFRO3FCQUlaO29CQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUMxQixDQUFDO3FCQU5ELFVBQWEsUUFBZTtvQkFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7Z0JBQzlCLENBQUM7OztlQUFBO1lBTUQsc0JBQUksK0JBQVM7cUJBQWI7b0JBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQzNCLENBQUM7cUJBRUQsVUFBYyxTQUFnQjtvQkFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7Z0JBQ2hDLENBQUM7OztlQUpBO1lBTUQsNkNBQTZDO1lBQzdDLGFBQWE7WUFDYixJQUFJO1lBRUosNEJBQVMsR0FBVCxVQUFVLEtBQWtCLEVBQUUsTUFBbUIsRUFBRSxNQUFjO2dCQUM3RCxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDO29CQUNYLElBQUksQ0FBQyxJQUFJLEdBQUksSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBQztnQkFDekMsQ0FBQztnQkFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxRCxJQUFJLENBQUMsR0FBVSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztnQkFDdkMsSUFBSSxDQUFDLEdBQVUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7Z0JBQ3hDLElBQUksSUFBSSxHQUFTLElBQUksSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7Z0JBQzVDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6RCxFQUFFLENBQUEsQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUM7b0JBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDN0IsQ0FBQztnQkFBQSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDO29CQUM5QyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsU0FBUyxHQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7Z0JBQzdFLENBQUM7Z0JBQ0QsRUFBRSxDQUFBLENBQUMsVUFBVSxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDO29CQUN6QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQy9CLENBQUM7Z0JBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFDLFVBQVUsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQztvQkFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUNsQyxDQUFDO2dCQUNELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUM5SCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFDTCxlQUFDO1FBQUQsQ0F4RUEsQUF3RUMsQ0F4RTZCLElBQUksR0F3RWpDO1FBeEVZLGVBQVEsV0F3RXBCLENBQUE7SUFDTCxDQUFDLEVBL0ZpQixNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUErRnZCO0FBQUQsQ0FBQyxFQS9GUyxPQUFPLEtBQVAsT0FBTyxRQStGaEI7QUM5RkQseURBQXlEO0FBQ3pELHVEQUF1RDtBQUN2RCw2Q0FBNkM7QUFDN0MsMkNBQTJDO0FBQzNDLDRDQUE0QztBQUU1QyxJQUFVLE9BQU8sQ0EraEJoQjtBQS9oQkQsV0FBVSxPQUFPO0lBQUMsSUFBQSxNQUFNLENBK2hCdkI7SUEvaEJpQixXQUFBLE1BQU07UUFPcEIsSUFBTyxJQUFJLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBTyxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFHMUMsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFOUMsSUFBTyxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFaEQsSUFBTyxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUMsSUFBTyxlQUFlLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7UUFDMUQsSUFBTyxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFdEMsSUFBTyxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFFOUIsSUFBTyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3BELElBQU8sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3RDLElBQUksR0FBRyxHQUFXLGdCQUFnQixDQUFDO1FBQ25DLElBQU0sd0JBQXdCLEdBQVcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNuRCxJQUFNLFNBQVMsR0FBVyxJQUFJLENBQUM7UUFDL0IsSUFBTSxTQUFTLEdBQVcsRUFBRSxDQUFDO1FBRTdCLElBQU0sU0FBUyxHQUFXLEtBQUssQ0FBQztRQUNoQyxJQUFNLFVBQVUsR0FBVyxLQUFLLENBQUM7UUFDakMsSUFBTSxTQUFTLEdBQVcsS0FBSyxDQUFDO1FBQ2hDLElBQU0sY0FBYyxHQUFXLEdBQUcsQ0FBQztRQUNuQyxJQUFNLGVBQWUsR0FBVyxLQUFLLENBQUM7UUFDdEMsSUFBTSxnQkFBZ0IsR0FBVyxLQUFLLENBQUM7UUFDdkM7WUFBK0IsNkJBQVM7WUFnQ3BDLG1CQUFZLE9BQWdCO2dCQUE1QixZQUNJLGtCQUFNLE9BQU8sQ0FBQyxTQUVqQjtnQkFqQ08sZUFBUyxHQUFXLENBQUMsQ0FBQztnQkFHdEIsZ0JBQVUsR0FBd0IsSUFBSSxTQUFTLEVBQVksQ0FBQztnQkFDNUQsWUFBTSxHQUFXLENBQUMsQ0FBQztnQkFDbkIsV0FBSyxHQUFXLENBQUMsQ0FBQztnQkFDbEIscUJBQWUsR0FBVyxDQUFDLENBQUM7Z0JBQzVCLFlBQU0sR0FBVyxDQUFDLENBQUM7Z0JBQ25CLGVBQVMsR0FBWSxLQUFLLENBQUM7Z0JBQzNCLGdCQUFVLEdBQVcsU0FBUyxDQUFDO2dCQUMvQixlQUFTLEdBQVcsU0FBUyxDQUFDO2dCQUU5Qix3QkFBa0IsR0FBVyxDQUFDLENBQUM7Z0JBQy9CLDJCQUFxQixHQUFXLENBQUMsQ0FBQztnQkFDbEMsWUFBTSxHQUFXLEdBQUcsQ0FBQztnQkFJckIsbUJBQWEsR0FBWSxJQUFJLENBQUM7Z0JBQzlCLGNBQVEsR0FBVyxDQUFDLENBQUM7Z0JBQ3JCLGNBQVEsR0FBVyxDQUFDLENBQUM7Z0JBS3JCLGVBQVMsR0FBRyxDQUFDLENBQUM7Z0JBT2xCLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7WUFDaEIsQ0FBQztZQUVPLHdCQUFJLEdBQVo7Z0JBQUEsaUJBaUJDO2dCQWhCRyxJQUFJLE9BQU8sR0FBWSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxHQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzVGLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7Z0JBRTlCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLFVBQUMsR0FBWTtvQkFDdkMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ2YsS0FBSyxTQUFTOzRCQUNWLEtBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDOzRCQUMvQixLQUFLLENBQUM7d0JBQ1YsS0FBSyxVQUFVOzRCQUNYLEtBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDOzRCQUNoQyxLQUFLLENBQUM7b0JBQ2QsQ0FBQztnQkFDTCxDQUFDLENBQUM7WUFDTixDQUFDO1lBRU0sd0NBQW9CLEdBQTNCLFVBQTRCLENBQW9CO2dCQUM1QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO1lBQ2hDLENBQUM7WUFFTSx5Q0FBcUIsR0FBNUIsVUFBNkIsSUFBaUI7Z0JBRTFDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFFZixNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNiLEtBQUssV0FBVyxDQUFDLFdBQVc7d0JBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO3dCQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO3dCQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO3dCQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7NEJBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUM7d0JBQ2hCLENBQUM7d0JBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ0osTUFBTSxDQUFDLEtBQUssQ0FBQzt3QkFDakIsQ0FBQztvQkFDTCxLQUFLLFdBQVcsQ0FBQyxXQUFXO3dCQUN4QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNyQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3JHLE1BQU0sQ0FBQyxJQUFJLENBQUM7NEJBQ2hCLENBQUM7NEJBQUMsSUFBSSxDQUFDLENBQUM7Z0NBRUosTUFBTSxDQUFDLEtBQUssQ0FBQzs0QkFDakIsQ0FBQzt3QkFDTCxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUM7d0JBQ2pCLENBQUM7Z0JBQ1QsQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFTSxnQ0FBWSxHQUFuQixVQUFvQixLQUFrQjtnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztvQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDaEIsQ0FBQztnQkFDRCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFBO2dCQUN6QixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQztvQkFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUM1QyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO29CQUNiLEtBQUssV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO3dCQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQzt3QkFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO3dCQUNkLEtBQUssQ0FBQztvQkFDVixDQUFDO29CQUNELEtBQUssV0FBVyxDQUFDLFNBQVMsQ0FBQztvQkFDM0IsS0FBSyxXQUFXLENBQUMsYUFBYTt3QkFDMUIsQ0FBQzs0QkFDRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQ2YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29DQUMxQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQzt3Q0FDbEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO29DQUMxQyxDQUFDO2dDQUNMLENBQUM7Z0NBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0NBQzdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO3dDQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7b0NBQzNDLENBQUM7Z0NBQ0wsQ0FBQztnQ0FBQyxJQUFJLENBQUMsQ0FBQztvQ0FDSixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQzt3Q0FDbEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDO29DQUM1QyxDQUFDO2dDQUNMLENBQUM7NEJBQ0wsQ0FBQzs0QkFBQyxJQUFJLENBQUMsQ0FBQztnQ0FDSixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7NEJBQzlELENBQUM7NEJBQ0QsS0FBSyxDQUFDO3dCQUNWLENBQUM7Z0JBRVQsQ0FBQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFFRCw2QkFBUyxHQUFULFVBQVUsZ0JBQTZCLEVBQUUsaUJBQThCLEVBQUUsTUFBYztnQkFDbkYsSUFBSSxLQUFLLEdBQVcsZ0JBQWdCLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3ZELElBQUksTUFBTSxHQUFXLGlCQUFpQixDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDM0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQzlDLElBQUksS0FBSyxHQUFTLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDOUMsSUFBSSxFQUFFLEdBQWlCLEtBQUssQ0FBQyxZQUFZLENBQUM7b0JBQzFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ2xCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEtBQUssWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7d0JBQzlDLENBQUMsR0FBRyxNQUFNLENBQUM7b0JBQ2YsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO3dCQUM3QyxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNkLENBQUM7b0JBQ0QsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ2pHLENBQUM7Z0JBQ0QsSUFBSSxJQUFJLEdBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDakksTUFBTSxDQUFDLElBQUksQ0FBQztZQUNoQixDQUFDO1lBRUQsNEJBQVEsR0FBUixVQUFTLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxNQUFjO2dCQUMvRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxTQUFTLEdBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7Z0JBQ2hELElBQUksS0FBSyxHQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzFCLElBQUksTUFBTSxHQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUM5QyxJQUFJLE1BQUksR0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQzdDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDdkMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQzVCLElBQUksUUFBUSxHQUFHLE1BQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsS0FBSyxHQUFHLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ25FLElBQUksT0FBTyxHQUFHLE1BQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsTUFBTSxHQUFHLE1BQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ25FLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7b0JBQ3hCLE1BQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLE1BQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxHQUFHLE1BQUksQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3RILENBQUM7WUFDTCxDQUFDO1lBRU0sZ0NBQVksR0FBbkIsVUFBb0IsTUFBYztnQkFDOUIsOEJBQThCO2dCQUM5QiwyQ0FBMkM7Z0JBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLEtBQUssZUFBZSxDQUFDLENBQUMsQ0FBQztvQkFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUN2QyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDckIsQ0FBQztnQkFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7b0JBRWpELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDMUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNkLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3JCLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUM5QyxDQUFDO1lBRUwsQ0FBQztZQUVNLDhCQUFVLEdBQWpCLFVBQWtCLE9BQXdCO2dCQUN0QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO2dCQUN4QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO29CQUM5QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7b0JBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEdBQUc7d0JBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDMUMsQ0FBQyxDQUFBO29CQUNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEdBQUc7d0JBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzNCLENBQUMsQ0FBQTtvQkFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUM3RCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDaEMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN6QixDQUFDO1lBQ0wsQ0FBQztZQUVNLGtDQUFjLEdBQXJCLFVBQXNCLEtBQWE7Z0JBQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFFTSxrQ0FBYyxHQUFyQjtnQkFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN2QixDQUFDO1lBRU0sMkNBQXVCLEdBQTlCLFVBQStCLE1BQTRCO2dCQUN2RCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztZQUMzQixDQUFDO1lBRU8saUNBQWEsR0FBckI7Z0JBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ2hCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQzdELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzt3QkFDakIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQzFCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDOzRCQUM5QyxJQUFJLE1BQUksR0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7NEJBQzdDLElBQUksS0FBSyxHQUFXLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs0QkFDakQsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dDQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQUksQ0FBQztnQ0FDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUMsQ0FBQzs0QkFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQUksQ0FBQztnQ0FDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUMsQ0FBQzs0QkFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQUksQ0FBQztnQ0FDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDOUMsQ0FBQzt3QkFDTCxDQUFDO29CQUNMLENBQUM7b0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDN0QsTUFBTSxDQUFDO29CQUNYLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUNyRixDQUFDO2dCQUNMLENBQUM7WUFDTCxDQUFDO1lBRU8sNkJBQVMsR0FBakI7Z0JBQ0ksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7b0JBQzlDLElBQUksTUFBSSxHQUFTLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDN0MsSUFBSSxRQUFRLEdBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQUksQ0FBQyxDQUFDO29CQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzlDLENBQUM7WUFDTCxDQUFDO1lBRU8sMkJBQU8sR0FBZixVQUFnQixRQUFnQjtnQkFDNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQ25ELElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxDQUFDO1lBQ0wsQ0FBQztZQUVPLGtDQUFjLEdBQXRCLFVBQXVCLFFBQWdCO2dCQUNuQyxJQUFJLEdBQUcsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixDQUFDO1lBRU8sbUNBQWUsR0FBdkIsVUFBd0IsUUFBZ0I7Z0JBQ3BDLElBQUksR0FBRyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLENBQUM7WUFFTyw0QkFBUSxHQUFoQixVQUFpQixLQUFhO2dCQUMxQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLE1BQU0sc0NBQXNDLENBQUM7Z0JBQ2pELENBQUM7Z0JBQ0QsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ3BCLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ1osQ0FBQztnQkFDRCxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDVixHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDdEIsQ0FBQztnQkFDRCxJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ25ELE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLENBQUM7WUFFTyx3QkFBSSxHQUFaLFVBQWEsR0FBVztnQkFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNoRixDQUFDO2dCQUNELElBQUksQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDO2dCQUN0QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQzVDLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztnQkFDM0MsQ0FBQztnQkFDRCxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDcEQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUM1RixJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFFTyxzQ0FBa0IsR0FBMUIsVUFBMkIsS0FBYTtnQkFDcEMsSUFBSSxHQUFHLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQztnQkFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNsQyxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNaLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3BDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO2dCQUNwQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3pDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2dCQUNuQyxDQUFDO1lBQ0wsQ0FBQztZQUVNLDRCQUFRLEdBQWY7Z0JBQ0ksR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUN4QyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7b0JBQUMsTUFBTSxDQUFDO2dCQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO2dCQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQztnQkFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQy9CLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQ25DLENBQUM7WUFFTSw2QkFBUyxHQUFoQjtnQkFDSSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztvQkFBQyxNQUFNLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEdBQVcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQztnQkFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUM5QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUNwQyxDQUFDO1lBRU8sNENBQXdCLEdBQWhDO2dCQUNJLElBQUksR0FBRyxHQUFXLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3JCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7d0JBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUN6QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzt3QkFDekIsTUFBTSxDQUFDO29CQUNYLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7d0JBQ2xDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ3BDLENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUN6QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzt3QkFDekIsTUFBTSxDQUFDO29CQUNYLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDekIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDeEIsQ0FBQztnQkFDTCxDQUFDO2dCQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLHFCQUFxQixJQUFJLHdCQUF3QixDQUFDO2dCQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztZQUN4RyxDQUFDO1lBRU8sMkNBQXVCLEdBQS9CO2dCQUNJLG1DQUFtQztnQkFDbkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxrQ0FBa0M7Z0JBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDMUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO3dCQUN4QixNQUFNLENBQUM7b0JBQ1gsQ0FBQztvQkFDRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3ZDLENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUN4QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzt3QkFDekIsTUFBTSxDQUFDO29CQUVYLENBQUM7b0JBQ0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDekIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDeEIsQ0FBQztnQkFFTCxDQUFDO2dCQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLHFCQUFxQixJQUFJLHdCQUF3QixDQUFDO2dCQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztZQUN2RyxDQUFDO1lBRU8scUNBQWlCLEdBQXpCO2dCQUNJLEdBQUcsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFFTyxxQ0FBaUIsR0FBekI7Z0JBQ0ksR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2dCQUM5QixJQUFJLEtBQUssR0FBVyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1osS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUM3QyxDQUFDO2dCQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO2dCQUMxQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVyQyxDQUFDO1lBRU8sb0NBQWdCLEdBQXhCO2dCQUNJLEdBQUcsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDaEIsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztnQkFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLENBQUM7WUFFTyxnQ0FBWSxHQUFwQixVQUFxQixRQUFnQixFQUFFLGNBQXNCO2dCQUN6RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztnQkFDM0QsQ0FBQztZQUNMLENBQUM7WUFFTywrQkFBVyxHQUFuQixVQUFvQixpQkFBeUIsRUFBRSxVQUFrQjtnQkFDN0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztnQkFDekUsQ0FBQztZQUNMLENBQUM7WUFFTyxrQ0FBYyxHQUF0QixVQUF1QixRQUFnQjtnQkFDbkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM3QyxDQUFDO1lBQ0wsQ0FBQztZQUVMLGdCQUFDO1FBQUQsQ0FuZUEsQUFtZUMsQ0FuZThCLFNBQVMsR0FtZXZDO1FBbmVZLGdCQUFTLFlBbWVyQixDQUFBO1FBY0Q7WUFJSSxrQkFBWSxDQUFPLEVBQUUsQ0FBUyxFQUFFLEdBQVc7Z0JBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO2dCQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNmLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1lBQ3hCLENBQUM7WUFDTCxlQUFDO1FBQUQsQ0FUQSxBQVNDLElBQUE7SUFFTCxDQUFDLEVBL2hCaUIsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBK2hCdkI7QUFBRCxDQUFDLEVBL2hCUyxPQUFPLEtBQVAsT0FBTyxRQStoQmhCO0FDcmlCRCxJQUFVLE9BQU8sQ0FPaEI7QUFQRCxXQUFVLE9BQU87SUFBQyxJQUFBLElBQUksQ0FPckI7SUFQaUIsV0FBQSxJQUFJO1FBQUMsSUFBQSxTQUFTLENBTy9CO1FBUHNCLFdBQUEsU0FBUztZQUM1QixJQUFZLGFBS1g7WUFMRCxXQUFZLGFBQWE7Z0JBQ3RCLG1EQUFLLENBQUE7Z0JBQ0wsMkRBQVMsQ0FBQTtnQkFDVCxtREFBSyxDQUFBO2dCQUNMLHFEQUFNLENBQUE7WUFDVCxDQUFDLEVBTFcsYUFBYSxHQUFiLHVCQUFhLEtBQWIsdUJBQWEsUUFLeEI7UUFDTCxDQUFDLEVBUHNCLFNBQVMsR0FBVCxjQUFTLEtBQVQsY0FBUyxRQU8vQjtJQUFELENBQUMsRUFQaUIsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBT3JCO0FBQUQsQ0FBQyxFQVBTLE9BQU8sS0FBUCxPQUFPLFFBT2hCO0FDUEQsSUFBVSxPQUFPLENBeUJoQjtBQXpCRCxXQUFVLE9BQU87SUFBQyxJQUFBLElBQUksQ0F5QnJCO0lBekJpQixXQUFBLE1BQUk7UUFBQyxJQUFBLFNBQVMsQ0F5Qi9CO1FBekJzQixXQUFBLFNBQVM7WUFFNUI7Z0JBQW9DLGtDQUFTO2dCQUt6QztvQkFBQSxZQUNJLGlCQUFPLFNBQ1Y7b0JBTkQsY0FBUSxHQUFXLENBQUMsQ0FBQzs7Z0JBTXJCLENBQUM7Z0JBRUQsc0JBQUksMENBQWM7eUJBQWxCO3dCQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUNuRCxDQUFDOzs7bUJBQUE7Z0JBRUQsOEJBQUssR0FBTCxVQUFNLEdBQVc7b0JBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUUsQ0FBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQzFELE1BQU0sQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMvRCxDQUFDO2dCQUNELDRDQUFtQixHQUFuQixVQUFvQixnQkFBdUIsRUFBRSxNQUFhLEVBQUMsSUFBUztvQkFDaEUsaUVBQWlFO29CQUNqRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsRUFBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztnQkFDeEgsQ0FBQztnQkFFTCxxQkFBQztZQUFELENBdEJBLEFBc0JDLENBdEJtQyxVQUFBLFNBQVMsR0FzQjVDO1lBdEJZLHdCQUFjLGlCQXNCMUIsQ0FBQTtRQUNMLENBQUMsRUF6QnNCLFNBQVMsR0FBVCxnQkFBUyxLQUFULGdCQUFTLFFBeUIvQjtJQUFELENBQUMsRUF6QmlCLElBQUksR0FBSixZQUFJLEtBQUosWUFBSSxRQXlCckI7QUFBRCxDQUFDLEVBekJTLE9BQU8sS0FBUCxPQUFPLFFBeUJoQjtBQzFCRCxJQUFVLE9BQU8sQ0FVaEI7QUFWRCxXQUFVLE9BQU87SUFBQyxJQUFBLElBQUksQ0FVckI7SUFWaUIsV0FBQSxJQUFJO1FBRWxCO1lBR0kscUJBQVksSUFBUyxFQUFDLEtBQVk7Z0JBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2dCQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUN2QixDQUFDO1lBQ0wsa0JBQUM7UUFBRCxDQVBBLEFBT0MsSUFBQTtRQVBZLGdCQUFXLGNBT3ZCLENBQUE7SUFDTCxDQUFDLEVBVmlCLElBQUksR0FBSixZQUFJLEtBQUosWUFBSSxRQVVyQjtBQUFELENBQUMsRUFWUyxPQUFPLEtBQVAsT0FBTyxRQVVoQiIsImZpbGUiOiJhbmRyb2lkLmpzIiwic291cmNlc0NvbnRlbnQiOlsibmFtZXNwYWNlIGFuZHJvaWQuYXBwe1xuICAgIGV4cG9ydCBjbGFzcyBJbnRlbnR7XG4gICAgICAgICBwcml2YXRlIGNvbnRleHQ6Q29udGV4dDtcbiAgICAgICAgIHByaXZhdGUgdGFyZ2V0QWN0aXZpdHlDbGFzczphbnk7XG4gICAgICAgICBwdWJsaWMgc2V0Q2xhc3MoYzpDb250ZXh0LCBhY3Rpdml0eUNsYXNzOmFueSk6dm9pZHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCA9YztcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0QWN0aXZpdHlDbGFzcyA9IGFjdGl2aXR5Q2xhc3M7XG4gICAgICAgICB9XG4gICAgICAgICBwdWJsaWMgZ2V0Q2xhc3MoKXtcbiAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRBY3Rpdml0eUNsYXNzO1xuICAgICAgICAgfVxuICAgICAgICAgcHVibGljIGdldENvbnRleHQoKXtcbiAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0O1xuICAgICAgICAgfVxuICAgIH1cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC5ncmFwaGljcyB7XG5cbiAgICAvKipcbiAgICAgKiBQb2ludCBob2xkcyB0d28gaW50ZWdlciBjb29yZGluYXRlc1xuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBQb2ludCB7XG4gICAgICAgIHB1YmxpYyB4OiBudW1iZXI7XG4gICAgICAgIHB1YmxpYyB5OiBudW1iZXI7XG5cblxuXG4gICAgICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4PzogbnVtYmVyLCB5PzogbnVtYmVyKSB7XG4gICAgICAgICAgICBpZighaXNOYU4oeCkpe1xuICAgICAgICAgICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIWlzTmFOKHkpKXtcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMueSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHBvaW50J3MgeCBhbmQgeSBjb29yZGluYXRlc1xuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTmVnYXRlIHRoZSBwb2ludCdzIGNvb3JkaW5hdGVzXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgbmVnYXRlKCkge1xuICAgICAgICAgICAgdGhpcy54ID0gLXRoaXMueDtcbiAgICAgICAgICAgIHRoaXMueSA9IC10aGlzLnk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogT2Zmc2V0IHRoZSBwb2ludCdzIGNvb3JkaW5hdGVzIGJ5IGR4LCBkeVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIG9mZnNldChkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLnggKz0gZHg7XG4gICAgICAgICAgICB0aGlzLnkgKz0gZHk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCdzIGNvb3JkaW5hdGVzIGVxdWFsICh4LHkpXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaWMgZXF1YWxzKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy54ID09IHggJiYgdGhpcy55ID09IHk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZXF1YWxQb2ludChwdDpQb2ludCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcXVhbHMocHQueCxwdC55KTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIGhhc2hDb2RlKCk6IG51bWJlciB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBudW1iZXIgPSB0aGlzLng7XG4gICAgICAgICAgICByZXN1bHQgPSAzMSAqIHJlc3VsdCArIHRoaXMueTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIFwiUG9pbnQoXCIgKyB0aGlzLnggKyBcIiwgXCIgKyB0aGlzLnkgKyBcIilcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQYXJjZWxhYmxlIGludGVyZmFjZSBtZXRob2RzXG4gICAgICAgICAqL1xuXG4gICAgICAgIHB1YmxpYyBkZXNjcmliZUNvbnRlbnRzKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjbG9uZSgpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLngsdGhpcy55KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59IiwiXG5cbm5hbWVzcGFjZSBhbmRyb2lkLmdyYXBoaWNzIHtcblxuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuXG4gICAgZXhwb3J0IGVudW0gR3Jhdml0eSB7XG4gICAgICAgIExlZnQsXG4gICAgICAgIENlbnRlcixcbiAgICAgICAgUmlnaHQsXG4gICAgICAgIFRvcCxcbiAgICAgICAgQm90dG9tLFxuICAgICAgICBBdXRvLFxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBQYWRkaW5nIHtcbiAgICAgICAgbGVmdFBhZGRpbmc6IG51bWJlcjtcbiAgICAgICAgcmlnaHRQYWRkaW5nOiBudW1iZXI7XG4gICAgICAgIHRvcFBhZGRpbmc6IG51bWJlcjtcbiAgICAgICAgYm90dG9tUGFkZGluZzogbnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3RvcihwYWRkaW5nPzogbnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAocGFkZGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGFkZGluZyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHBhZGRpbmcocGFkZGluZzogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxlZnRQYWRkaW5nID0gdGhpcy5yaWdodFBhZGRpbmcgPSB0aGlzLnRvcFBhZGRpbmcgPSB0aGlzLmJvdHRvbVBhZGRpbmcgPSBwYWRkaW5nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGVudW0gUG9zaXRpb24ge1xuICAgICAgICBMZWZ0LFxuICAgICAgICBUb3AsXG4gICAgICAgIFJpZ2h0LFxuICAgICAgICBCb3R0b21cbiAgICB9XG5cbiAgICBleHBvcnQgZW51bSBPcmllbnRhdGlvbiB7XG4gICAgICAgIEhvcml6b250YWwsXG4gICAgICAgIFZlcnRpY2FsXG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIFN0cm9rZVN0eWxlIHtcblxuICAgICAgICBzdHJva2VXaWR0aDogbnVtYmVyO1xuICAgICAgICBzdHJva2VDb2xvcjogc3RyaW5nO1xuICAgICAgICBjb25zdHJ1Y3RvcihzdHJva2V3aWR0aDogbnVtYmVyLCBzdHJva2Vjb2xvcjogc3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnN0cm9rZVdpZHRoID0gc3Ryb2tld2lkdGg7XG4gICAgICAgICAgICB0aGlzLnN0cm9rZUNvbG9yID0gc3Ryb2tlY29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0Q3NzU3R5bGUoKXtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ3N0cm9rZS13aWR0aCc6dGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICAgICAgICAnc3Ryb2tlJzp0aGlzLnN0cm9rZUNvbG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2xvbmUoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cm9rZVN0eWxlKHRoaXMuc3Ryb2tlV2lkdGgsIHRoaXMuc3Ryb2tlQ29sb3IpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgRm9udCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGZ6OiBudW1iZXIsIGZtOiBzdHJpbmcsIGZjOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZm9udFNpemUgPSBmejtcbiAgICAgICAgICAgIHRoaXMuZm9udEZhbWlseSA9IGZtO1xuICAgICAgICAgICAgdGhpcy5mb250Q29sb3IgPSBmYztcbiAgICAgICAgICAgIGlmICghdGhpcy5mb250RmFtaWx5IHx8IHRoaXMuZm9udEZhbWlseSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9udEZhbWlseSA9ICdBcmlhbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9udFNpemU6IG51bWJlcjtcbiAgICAgICAgZm9udEZhbWlseTogc3RyaW5nO1xuICAgICAgICBmb250Q29sb3I6IHN0cmluZztcbiAgICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIgZm9udFNpemUgPSBcIiArIHRoaXMuZm9udFNpemUgKyBcIiwgZm9udEZhbWlseSA9IFwiICsgdGhpcy5mb250RmFtaWx5ICsgXCIsIGZvbnRDb2xvciA9IFwiICsgdGhpcy5mb250RmFtaWx5O1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBjbG9uZSgpOiBGb250IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRm9udCh0aGlzLmZvbnRTaXplLCB0aGlzLmZvbnRGYW1pbHksIHRoaXMuZm9udENvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBTdHlsZSB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCBiZzogc3RyaW5nLCBmb250OiBGb250LHN0cm9rZTpTdHJva2VTdHlsZSkge1xuXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBiZztcbiAgICAgICAgICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgICAgICAgICB0aGlzLnN0cm9rZVN0eWxlID0gc3Ryb2tlO1xuICAgICAgICB9XG5cbiAgICAgICAgYmFja2dyb3VuZDogc3RyaW5nO1xuICAgICAgICBmb250OiBGb250O1xuICAgICAgICBzdHJva2VTdHlsZTpTdHJva2VTdHlsZTtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgVXRpbCB7XG4gICAgICAgICBzdGF0aWMgY2xvbmVEZWVwKG9iamVjdDogYW55KTogYW55IHtcbiAgICAgICAgICAgIGlmICgob2JqZWN0ID09IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBvYmplY3QgPT09ICdudW1iZXInKSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJykgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIG9iamVjdCA9PT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2Ygb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goVXRpbC5jbG9uZURlZXAoaXRlbSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG9iamVjdC5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgY2xvbmVPYmplY3Q6IGFueSA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3Rba2V5XSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZU9iamVjdFtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZU9iamVjdFtrZXldID0gVXRpbC5jbG9uZURlZXAob2JqZWN0W2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU9iamVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjb250YWlucyhyZWN0OiBSZWN0LCBwdDogUG9pbnQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIGlmIChwdC54IDw9IHJlY3QucmlnaHQgJiYgcHQueCA+PSByZWN0LmxlZnQgJiYgcHQueSA8PSByZWN0LmJvdHRvbSAmJiBwdC55ID49IHJlY3QudG9wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGdldFJlY3Qoc3RhcnQ6IFBvaW50LCBzaXplOiBTaXplKTogUmVjdCB7XG4gICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IG5ldyBSZWN0KHN0YXJ0LngsIHN0YXJ0LnksIHN0YXJ0LnggKyBzaXplLndpZHRoLCBzdGFydC55ICsgc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGdldFN0eWxlQ3NzKHN0eWxlOiBTdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcImZvbnQtc2l6ZVwiOiBzdHlsZS5mb250ID8gc3R5bGUuZm9udC5mb250U2l6ZSA6IFwiXCIsXG4gICAgICAgICAgICAgICAgXCJmb250LWZhbWlseVwiOiBzdHlsZS5mb250ID8gc3R5bGUuZm9udC5mb250RmFtaWx5IDogXCJcIixcbiAgICAgICAgICAgICAgICBcImZvbnQtY29sb3JcIjpzdHlsZS5mb250P3N0eWxlLmZvbnQuZm9udENvbG9yOlwid2hpdGVcIixcbiAgICAgICAgICAgICAgICBcImZpbGxcIjogc3R5bGUuYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBcInN0cm9rZVwiOiBzdHlsZS5zdHJva2VTdHlsZT9zdHlsZS5zdHJva2VTdHlsZS5zdHJva2VDb2xvcjpcIlwiLFxuICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6c3R5bGUuc3Ryb2tlU3R5bGU/c3R5bGUuc3Ryb2tlU3R5bGUuc3Ryb2tlV2lkdGg6MFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyB1bmlvbiguLi5yZWN0czogUmVjdFtdKTogUmVjdCB7XG4gICAgICAgICAgICBsZXQgcmVjdDogUmVjdCA9IG5ldyBhbmRyb2lkLmdyYXBoaWNzLlJlY3QoMCwgMCwgMCwgMCk7XG4gICAgICAgICAgICByZWN0LmxlZnQgPU1hdGgubWluLmFwcGx5KHRoaXMscmVjdHMubWFwKGU9PmUubGVmdCkpO1xuICAgICAgICAgICAgcmVjdC50b3AgPSBNYXRoLm1pbi5hcHBseSh0aGlzLCByZWN0cy5tYXAoZT0+ZS50b3ApKTtcbiAgICAgICAgICAgIHJlY3QucmlnaHQgPSBNYXRoLm1heC5hcHBseSh0aGlzLHJlY3RzLm1hcChlPT5lLnJpZ2h0KSk7XG4gICAgICAgICAgICByZWN0LmJvdHRvbSA9IE1hdGgubWF4LmFwcGx5KHRoaXMscmVjdHMubWFwKGU9PmUuYm90dG9tKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVjdDtcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICBzdGF0aWMgaGV4VG9SZ2IoaGV4KSB7XG5cbiAgICAgICAgICAgIHZhciBzaG9ydGhhbmRSZWdleCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XG4gICAgICAgICAgICBoZXggPSBoZXgucmVwbGFjZShzaG9ydGhhbmRSZWdleCwgZnVuY3Rpb24gKG0sIHIsIGcsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAvXiM/KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pJC9pLmV4ZWMoaGV4KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgPyB7XG4gICAgICAgICAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICAgICAgICAgICAgZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICAgICAgICAgICAgYjogcGFyc2VJbnQocmVzdWx0WzNdLCAxNilcbiAgICAgICAgICAgIH0gOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHJnYlRvSGV4KHIsIGcsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBcIiNcIiArIFV0aWwuY29tcG9uZW50VG9IZXgocikgKyBVdGlsLmNvbXBvbmVudFRvSGV4KGcpICsgVXRpbC5jb21wb25lbnRUb0hleChiKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgY29tcG9uZW50VG9IZXgoYykge1xuICAgICAgICAgICAgdmFyIGhleCA9IGMudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgcmV0dXJuIGhleC5sZW5ndGggPT0gMSA/IFwiMFwiICsgaGV4IDogaGV4O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBhc0VudW0odmFsdWU6IG51bWJlciwgZW51bVR5cGU6IGFueSwgbnVsbE9LID0gZmFsc2UpOiBudW1iZXIge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgbnVsbE9LKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHZhciBlID0gZW51bVR5cGVbdmFsdWVdO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoZSkgPT09ICdudW1iZXInID8gZSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRpYyBpc01peGVkKHIxOiBSZWN0LCByMjogUmVjdCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgdmFyIGlzbWl4ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicygocjEubGVmdCArIHIxLnJpZ2h0KSAvIDIgLSAocjIubGVmdCArIHIyLnJpZ2h0KSAvIDIpXG4gICAgICAgICAgICAgICAgPCAoKHIxLnJpZ2h0ICsgcjIucmlnaHQgLSByMS5sZWZ0IC0gcjIubGVmdCkgLyAyKSAmJiBNYXRoLmFicygocjEudG9wICsgcjEuYm90dG9tKSAvIDJcbiAgICAgICAgICAgICAgICAgICAgLSAocjIudG9wICsgcjIuYm90dG9tKSAvIDIpIDwgKChyMS5ib3R0b20gKyByMi5ib3R0b20gLSByMS50b3AgLSByMi50b3ApIC8gMikpIHtcbiAgICAgICAgICAgICAgICBpc21peGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc21peGVkO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzdGF0aWMgY29udGFpbnNSZWN0KHIxOlJlY3QscjI6UmVjdCk6Ym9vbGVhbntcbiAgICAgICAgICAgIGxldCBmbGc6Ym9vbGVhbiA9IHIxLmxlZnQgPD1yMi5sZWZ0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMS50b3AgPD0gcjIudG9wICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMS5yaWdodCA+PXIyLnJpZ2h0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMS5ib3R0b20gPj0gcjIuYm90dG9tO1xuICAgICAgICAgICAgcmV0dXJuIGZsZztcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICAvLyBsZXQgZmxnMTpib29sZWFuID0gcjEubGVmdCA8PXIyLmxlZnQgJiZcbiAgICAgICAgLy8gcjEudG9wIDw9IHIyLnRvcCAmJlxuICAgICAgICAvLyByMS5yaWdodCA+PXIyLnJpZ2h0ICYmXG4gICAgICAgIC8vIHIxLmJvdHRvbSA+PSByMi5ib3R0b207XG5cbiAgICB9XG59XG4iLCJuYW1lc3BhY2UgYW5kcm9pZC5kZXZpY2Uge1xuICAgIGV4cG9ydCBjbGFzcyBEZXZpY2Uge1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfZGVuc2l0eTogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgX3dpZHRoOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaGVpZ2h0OiBudW1iZXIgPSAwO1xuICAgICAgICBcbiAgICAgICAgc3RhdGljIHNldCB3aWR0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgICAgICBEZXZpY2UuX3dpZHRoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHN0YXRpYyBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIERldmljZS5faGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0IHdpZHRoKCkge1xuICAgICAgICAgICAgLy8gcmV0dXJuIDM0MDtcbiAgICAgICAgICAgIGlmIChEZXZpY2UuX3dpZHRoID09IDApIHtcbiAgICAgICAgICAgICAgICBEZXZpY2UuX3dpZHRoID0gKHdpbmRvdy5pbm5lcldpZHRoID4gMCkgPyB3aW5kb3cuaW5uZXJXaWR0aCA6IHNjcmVlbi53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBEZXZpY2UuX3dpZHRoIDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXQgaGVpZ2h0KCkge1xuICAgICAgICAgICAgLy8gcmV0dXJuIDYyMDtcbiAgICAgICAgICAgIGlmIChEZXZpY2UuX2hlaWdodCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgRGV2aWNlLl9oZWlnaHQgPSAod2luZG93LmlubmVySGVpZ2h0ID4gMCkgP1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgOiBzY3JlZW4uaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERldmljZS5faGVpZ2h0IDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXQgZGVuc2l0eSgpIHtcbiAgICAgICAgICAgIGlmIChEZXZpY2UuX2RlbnNpdHkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBEZXZpY2UuX2RlbnNpdHkgPSBNYXRoLnNxcnQoRGV2aWNlLndpZHRoICogRGV2aWNlLndpZHRoICsgRGV2aWNlLmhlaWdodCAqIERldmljZS5oZWlnaHQpIC8gMTYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIERldmljZS5fZGVuc2l0eTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwibmFtZXNwYWNlIGFuZHJvaWQudXRpbHtcbiAgICAgZXhwb3J0IGNsYXNzIExvZ3tcbiAgICAgICAgIHN0YXRpYyBkKG1lc3NhZ2U6c3RyaW5nLHRhZz86c3RyaW5nKXtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHN0YXRpYyB3KG1lc3NhZ2U6c3RyaW5nLHRhZz86c3RyaW5nKXtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHN0YXRpYyBlKG1lc3NhZ2U6c3RyaW5nLHRhZz86c3RyaW5nKXtcbiAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgfVxuICAgICB9ICAgXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2dyYXBoaWNzL1V0aWwudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC5kZXZpY2V7XG4gICAgaW1wb3J0IEZvbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkZvbnQ7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICBpbXBvcnQgU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0eWxlO1xuICAgIGV4cG9ydCBjbGFzcyBEZWZhdWx0e1xuICAgICAgICBzdGF0aWMgZ2V0IGZvbnQoKXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRm9udCg4LFwiXCIsXCJ3aGl0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZ2V0IHN0cm9rZXN0eWxlKCl7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cm9rZVN0eWxlKDEsJ2JsYWNrJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIGdldCBzdHlsZSgpe1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHlsZSgnZ3JheScsRGVmYXVsdC5mb250LERlZmF1bHQuc3Ryb2tlc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJQb2ludC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiVXRpbC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGV2aWNlL0RldmljZS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbC9Mb2cudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RldmljZS9EZWZhdWx0LnRzXCIgLz5cblxuXG5uYW1lc3BhY2UgYW5kcm9pZC5ncmFwaGljcyB7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgRm9udCA9IGFuZHJvaWQuZ3JhcGhpY3MuRm9udDtcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgRGV2aWNlID0gYW5kcm9pZC5kZXZpY2UuRGV2aWNlO1xuICAgIGltcG9ydCBEZWZhdWx0ID0gYW5kcm9pZC5kZXZpY2UuRGVmYXVsdDtcbiAgICBpbXBvcnQgTG9nID0gYW5kcm9pZC51dGlsLkxvZztcbiAgICBleHBvcnQgZW51bSBSZW5kZXJUeXBlIHtcbiAgICAgICAgQ2FudmFzLFxuICAgICAgICBTdmdcbiAgICB9XG4gICAgY2xhc3MgQ2FudmFzU3RhdGUge1xuICAgICAgICB4T2Zmc2V0OiBudW1iZXIgPSAwO1xuICAgICAgICB5T2Zmc2V0OiBudW1iZXIgPSAwO1xuICAgICAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICAgICAgICB0aGlzLnhPZmZzZXQgPSB4O1xuICAgICAgICAgICAgdGhpcy55T2Zmc2V0ID0geTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IEZsb29yID0gdmFsdWUgPT4gTWF0aC5mbG9vcigxMDAwICogdmFsdWUpIC8gMTAwMDtcbiAgICBleHBvcnQgY2xhc3MgQ2FudmFzIHtcbiAgICAgICAgcHJpdmF0ZSBfcmVuZGVyOiBhbnk7XG4gICAgICAgIHByaXZhdGUgX3JlbmRlclR5cGU6IFJlbmRlclR5cGU7XG4gICAgICAgIHByaXZhdGUgX2hvc3RFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICAgICAgcHJpdmF0ZSB4T2Zmc2V0OiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIHlPZmZzZXQ6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgc2F2ZVN0YXRlczogQ2FudmFzU3RhdGVbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB0eXBlOiBSZW5kZXJUeXBlKSB7XG4gICAgICAgICAgICB0aGlzLl9ob3N0RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUeXBlID0gdHlwZTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBSZW5kZXJUeXBlLkNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlciA9IG5ldyBDYW52YXNSZW5kZXJFbmdpbmUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IERldmljZS53aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBEZXZpY2UuaGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlci5zZXRWaWV3cG9ydFNpemUoRGV2aWNlLndpZHRoLCBEZXZpY2UuaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIC8vIGNhbnZhcy53aWR0aCA9IHcgKiBkZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICAgICAgICAgIC8vIGNhbnZhcy5oZWlnaHQgPSBoICogZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgICAgICAgICAvLyBjYW52YXMuc3R5bGUud2lkdGggPSB3ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIC8vIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgXCJweFwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBSZW5kZXJUeXBlLlN2Zykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlciA9IG5ldyBTdmdSZW5kZXJFbmdpbmUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IERldmljZS53aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBEZXZpY2UuaGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlci5zZXRWaWV3cG9ydFNpemUoRGV2aWNlLndpZHRoLCBEZXZpY2UuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgc2F2ZSgpIHtcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IG5ldyBDYW52YXNTdGF0ZSh0aGlzLnhPZmZzZXQsIHRoaXMueU9mZnNldCk7XG4gICAgICAgICAgICB0aGlzLnNhdmVTdGF0ZXMucHVzaChzdGF0ZSk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIuc2F2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpcChyZWN0OiBSZWN0KSB7XG4gICAgICAgICAgICB2YXIgciA9IHJlY3QuY2xvbmUoKTtcbiAgICAgICAgICAgIHIudHJhbnNsYXRlKHRoaXMueE9mZnNldCwgdGhpcy55T2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlci5jbGlwKHJlY3QpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJjbGlwICBsID0gXCIrcmVjdC5sZWZ0ICtcIiAsIHQgPSBcIisgcmVjdC50b3AgK1wiICx3aWR0aCA9IFwiICsgcmVjdC53aWR0aCArXCIgLGhlaWdodCA9IFwiICsgcmVjdC5oZWlnaHQpO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIHJlc3RvcmUoKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmVTdGF0ZXMucG9wKCk7XG4gICAgICAgICAgICBsZXQgc3RhdGUgPSB0aGlzLnNhdmVTdGF0ZXNbdGhpcy5zYXZlU3RhdGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy54T2Zmc2V0ID0gc3RhdGUueE9mZnNldDtcbiAgICAgICAgICAgICAgICB0aGlzLnlPZmZzZXQgPSBzdGF0ZS55T2Zmc2V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhPZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMueU9mZnNldCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0Vmlld3BvcnRTaXplKHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIuc2V0Vmlld3BvcnRTaXplKHcsIGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVhc3VyZVN0cmluZyhzdHI6IHN0cmluZywgZm9udDogRm9udCwgbWF4U2l6ZT86IG51bWJlcik6IFNpemUge1xuICAgICAgICAgICAgaWYgKCFmb250KSB7XG4gICAgICAgICAgICAgICAgZm9udCA9IERlZmF1bHQuZm9udC5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGYgPSBmb250LmNsb25lKCk7XG4gICAgICAgICAgICBmLmZvbnRTaXplICo9IERldmljZS5kZW5zaXR5O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlci5tZWFzdXJlU3RyaW5nKHN0ciwgZiwgbWF4U2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBtZWFzdXJlU3RyaW5nV2l0aFdpZHRoKHN0cjogc3RyaW5nLCBmb250OiBGb250KSB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdUZXh0KHN0cjogc3RyaW5nLCBwdDogUG9pbnQsIGY6IEZvbnQsIGNlbnRlcj86IFBvaW50LCBhbmdsZT86IG51bWJlcikge1xuICAgICAgICAgICAgaWYgKCFmKSB7XG4gICAgICAgICAgICAgICAgZiA9IERlZmF1bHQuZm9udC5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLm1lYXN1cmVTdHJpbmcoc3RyLCBmKTtcbiAgICAgICAgICAgIHZhciBmb250OiBGb250ID0gZi5jbG9uZSgpO1xuICAgICAgICAgICAgZm9udC5mb250U2l6ZSAqPSBEZXZpY2UuZGVuc2l0eTtcbiAgICAgICAgICAgIGxldCBzdGFydHB0OiBQb2ludCA9IG5ldyBQb2ludChwdC54LCBwdC55ICsgc2l6ZS5oZWlnaHQpO1xuICAgICAgICAgICAgbGV0IHRwdCA9IHB0LmNsb25lKCk7XG4gICAgICAgICAgICAvLyB0aGlzLmRyYXdSZWN0KHRwdCxuZXcgUG9pbnQodHB0Lngrc2l6ZS53aWR0aCx0cHQueStzaXplLmhlaWdodCksdHJ1ZSwnbGlnaHRibHVlJyk7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyVHlwZSA9PT0gUmVuZGVyVHlwZS5DYW52YXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5nbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd1N0cmluZ1JvdGF0ZWQoc3RyLCBzdGFydHB0LCBjZW50ZXIsIGFuZ2xlLCBmb250KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd1N0cmluZyhzdHIsIHN0YXJ0cHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnRwdC5vZmZzZXQodGhpcy54T2Zmc2V0LCB0aGlzLnlPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGlmIChhbmdsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlci5kcmF3U3RyaW5nUm90YXRlZChzdHIsIHN0YXJ0cHQsIGNlbnRlciwgYW5nbGUsIG51bGwsIHsgJ2ZvbnQtc2l6ZSc6IGZvbnQuZm9udFNpemUsICdmb250LWZhbWlseSc6IGZvbnQuZm9udEZhbWlseSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd1N0cmluZyhzdHIsIHN0YXJ0cHQsIG51bGwsIHsgJ2ZvbnQtc2l6ZSc6IGZvbnQuZm9udFNpemUsICdmb250LWZhbWlseSc6IGZvbnQuZm9udEZhbWlseSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3UG9zVGV4dCh0ZXh0OiBzdHJpbmcsIHBvczogbnVtYmVyW10sIGZvbnQ6IEZvbnQpIHtcbiAgICAgICAgICAgIGlmICh0ZXh0Lmxlbmd0aCAqIDIgPiBwb3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJJbmRleE91dE9mQm91bmRzRXhjZXB0aW9uXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWZvbnQpIHtcbiAgICAgICAgICAgICAgICBmb250ID0gRGVmYXVsdC5mb250O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHB0OiBQb2ludCA9IG5ldyBQb2ludCgwLCAwKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICBwdC5zZXQocG9zW2ldLCBwb3NbaSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5fcmVuZGVyLmRyYXdTdHJpbmcodGV4dFtpXSxwdCxmb250KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3VGV4dCh0ZXh0W2kgLyAyXSwgcHQsIGZvbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgZHJhd1Bvc1RleHQgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0xpbmUocHQxOiBQb2ludCwgcHQyOiBQb2ludCwgc3Ryb2tlc3R5bGU6IFN0cm9rZVN0eWxlKSB7XG4gICAgICAgICAgICB2YXIgc3Ryb2tlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChzdHJva2VzdHlsZSkge1xuICAgICAgICAgICAgICAgIHN0cm9rZSA9IHN0cm9rZXN0eWxlLmNsb25lKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cm9rZSA9IERlZmF1bHQuc3Ryb2tlc3R5bGUuY2xvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdGFydHBvaW50ID0gcHQxLmNsb25lKCk7XG4gICAgICAgICAgICB2YXIgZW5kcG9pbnQgPSBwdDIuY2xvbmUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmRyYXdMaW5lKHN0YXJ0cG9pbnQueCwgc3RhcnRwb2ludC55LCBlbmRwb2ludC54LCBlbmRwb2ludC55LCBzdHJva2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydHBvaW50Lm9mZnNldCh0aGlzLnhPZmZzZXQsIHRoaXMueU9mZnNldCk7XG4gICAgICAgICAgICAgICAgZW5kcG9pbnQub2Zmc2V0KHRoaXMueE9mZnNldCwgdGhpcy55T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd0xpbmUoc3RhcnRwb2ludC54LCBzdGFydHBvaW50LnksIGVuZHBvaW50LngsIGVuZHBvaW50LnksIHN0cm9rZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3TGluZXMoeHM6IG51bWJlcltdLCB5czogbnVtYmVyW10sIHN0cm9rZXN0eWxlOiBTdHJva2VTdHlsZSkge1xuICAgICAgICAgICAgLy8gZHJhd0xpbmVzKHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdLCBzdHJva2VzdHlsZTogU3Ryb2tlU3R5bGUpIHtcbiAgICAgICAgICAgIHZhciBzdHJva2UgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHN0cm9rZXN0eWxlKSB7XG4gICAgICAgICAgICAgICAgc3Ryb2tlID0gc3Ryb2tlc3R5bGUuY2xvbmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Ryb2tlID0gRGVmYXVsdC5zdHJva2VzdHlsZS5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmRyYXdMaW5lcyh4cywgeXMsIHN0cm9rZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cm9rZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIHRoaXMueE9mZnNldCArIFwiLFwiICsgdGhpcy55T2Zmc2V0ICsgXCIpXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmRyYXdMaW5lcyh4cywgeXMsIG51bGwsIHN0cm9rZS5nZXRDc3NTdHlsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkcmF3UmVjdChwdDE6IFBvaW50LCBwdDI6IFBvaW50LCBmaWxsOiBib29sZWFuLCBjb2xvcjogc3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRwb2ludCA9IHB0MS5jbG9uZSgpO1xuICAgICAgICAgICAgdmFyIGVuZHBvaW50ID0gcHQyLmNsb25lKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJUeXBlID09PSBSZW5kZXJUeXBlLkNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlci5kcmF3UmVjdChzdGFydHBvaW50LngsIHN0YXJ0cG9pbnQueSwgZW5kcG9pbnQueCAtIHN0YXJ0cG9pbnQueCwgZW5kcG9pbnQueSAtIHN0YXJ0cG9pbnQueSwgY29sb3IsIGZpbGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydHBvaW50Lm9mZnNldCh0aGlzLnhPZmZzZXQsIHRoaXMueU9mZnNldCk7XG4gICAgICAgICAgICAgICAgZW5kcG9pbnQub2Zmc2V0KHRoaXMueE9mZnNldCwgdGhpcy55T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoZmlsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd1JlY3Qoc3RhcnRwb2ludC54LCBzdGFydHBvaW50LnksIGVuZHBvaW50LnggLSBzdGFydHBvaW50LngsIGVuZHBvaW50LnkgLSBzdGFydHBvaW50LnksIG51bGwsIHsgJ2ZpbGwnOiBjb2xvciB9LCBudWxsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd1JlY3Qoc3RhcnRwb2ludC54LCBzdGFydHBvaW50LnksIGVuZHBvaW50LnggLSBzdGFydHBvaW50LngsIGVuZHBvaW50LnkgLSBzdGFydHBvaW50LnksIG51bGwsIHsgJ2ZpbGwnOiAndHJhbnNwYXJlbnQnLCAnc3Ryb2tlJzogY29sb3IgfSwgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZHJhd0FyYyhyZWN0OiBSZWN0LCBzdGFydEFuZ2xlOiBudW1iZXIsIHN3ZWVwQW5nZWw6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xuICAgICAgICAgICAgdmFyIGN4OiBudW1iZXIgPSAocmVjdC5yaWdodCAtIHJlY3QubGVmdCkgLyAyICsgcmVjdC5sZWZ0ICsgdGhpcy54T2Zmc2V0O1xuICAgICAgICAgICAgdmFyIGN5OiBudW1iZXIgPSAocmVjdC5ib3R0b20gLSByZWN0LnRvcCkgLyAyICsgcmVjdC50b3AgKyB0aGlzLnlPZmZzZXQ7XG4gICAgICAgICAgICB2YXIgcjogbnVtYmVyID0gKHJlY3Qud2lkdGggPCByZWN0LmhlaWdodCA/IHJlY3Qud2lkdGggOiByZWN0LmhlaWdodCkgLyAyO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuU3ZnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmRyYXdQaWUoY3gsIGN5LCByLCBGbG9vcihzdGFydEFuZ2xlKSwgRmxvb3Ioc3dlZXBBbmdlbCksIG51bGwsIHsgJ2ZpbGwnOiBjb2xvciB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmRyYXdQaWUoY3gsIGN5LCByLCBGbG9vcihzdGFydEFuZ2xlKSwgRmxvb3Ioc3dlZXBBbmdlbCksIGNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgZHJhd0RvbnV0KGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBpbm5lclJhZGl1czogbnVtYmVyLCBzdGFydEFuZ2xlOiBudW1iZXIsIHN3ZWVwQW5nbGU6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xuICAgICAgICAgICAgdmFyIF9jeDogbnVtYmVyID0gY3ggKyB0aGlzLnhPZmZzZXQ7XG4gICAgICAgICAgICB2YXIgX2N5OiBudW1iZXIgPSBjeSArIHRoaXMueU9mZnNldDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJUeXBlID09PSBSZW5kZXJUeXBlLlN2Zykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlci5kcmF3RG9udXQoX2N4LCBfY3ksIHJhZGl1cywgaW5uZXJSYWRpdXMsIEZsb29yKHN0YXJ0QW5nbGUpLCBGbG9vcihzd2VlcEFuZ2xlKSwgbnVsbCwgeyAnZmlsbCc6IGNvbG9yIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd0RvbnV0KF9jeCwgX2N5LCByYWRpdXMsIGlubmVyUmFkaXVzLCAoc3RhcnRBbmdsZSksIChzd2VlcEFuZ2xlKSwgY29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZHJhd092YWwocmVjdDogUmVjdCwgY29sb3I6IHN0cmluZykge1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBwdWJsaWMgYWxwaGEgOm51bWJlciA9MDtcbiAgICAgICAgcHVibGljIHNldCBhbHBoYSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIuYWxwaGEgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBkcmF3UG9seWdvbih4czogbnVtYmVyW10sIHlzOiBudW1iZXJbXSwgY29sb3I6IHN0cmluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuU3ZnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmRyYXdQb2x5Z29uKHhzLCB5cywgbnVsbCwgeyAnZmlsbCc6IGNvbG9yIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIuZHJhd1BvbHlnb24oeHMsIHlzLCBjb2xvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdJbWFnZSh4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlci5kcmF3SW1hZ2UoeCwgeSwgdywgaCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRDYWNoZShzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBzdzogbnVtYmVyLCBzaDogbnVtYmVyKTogSW1hZ2VEYXRhIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXIuZ2V0SW1hZ2VEYXRhKHN4LCBzeSwgc3csIHNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldENhY2hlKGltYWdlZGF0YTogSW1hZ2VEYXRhLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBkaXJ0eVg/OiBudW1iZXIsIGRpcnR5WT86IG51bWJlciwgZGlydHlXaWR0aD86IG51bWJlciwgZGlydHlIZWlnaHQ/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlci5wdXRJbWFnZURhdGEoaW1hZ2VkYXRhLCBkeCwgZHksIGRpcnR5WCwgZGlydHlZLCBkaXJ0eVdpZHRoLCBkaXJ0eUhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBiZWdpbigpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlci5iZWdpblJlbmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyLmVuZFJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIG1vdmVUbyh4Om51bWJlcix5Om51bWJlcil7XG4gICAgICAgICAgICBpZih0aGlzLl9yZW5kZXJUeXBlPT09IFJlbmRlclR5cGUuQ2FudmFzKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIubW92ZVRvKHgseSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzY2FsZShzeDogbnVtYmVyLCBzeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbnZhc1NjYWxlIFwiICsgc3grXCIgLCBcIiArIHN5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW5kZXJUeXBlID09PSBSZW5kZXJUeXBlLkNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlci5zY2FsZShzeCxzeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcm90YXRlKGRlZ3JlZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyVHlwZSA9PT0gUmVuZGVyVHlwZS5DYW52YXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIucm90YXRlKGRlZ3JlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMueE9mZnNldCA9IHg7XG4gICAgICAgICAgICB0aGlzLnlPZmZzZXQgPSB5O1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyLnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICB9XG59XG4iLCJuYW1lc3BhY2UgYW5kcm9pZC5hcHB7XG4gICAgZXhwb3J0IGNsYXNzIENvbnRleHR7XG4gICAgICAgIFxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vZ3JhcGhpY3MvdXRpbC50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnZpZXcge1xuICAgIGltcG9ydCBQYWRkaW5nID0gYW5kcm9pZC5ncmFwaGljcy5QYWRkaW5nO1xuICAgIGltcG9ydCBBbGlnbiA9IGFuZHJvaWQuZ3JhcGhpY3MuQWxpZ247XG4gICAgaW1wb3J0IEFsaWduRWxtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsbWVudDtcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIElWaWV3IHtcbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplO1xuICAgICAgICBvbkxheW91dChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsY2FudmFzOkNhbnZhcyk6IHZvaWQ7XG4gICAgICAgIG9uRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQ7XG4gICAgICAgIGludmFsaWRhdGUoZmxnOmJvb2xlYW4pOiB2b2lkO1xuICAgICAgICByZWFkb25seSB3aWR0aDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSBoZWlnaHQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgbGVmdDogbnVtYmVyO1xuICAgICAgICByZWFkb25seSB0b3A6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgcmlnaHQ6IG51bWJlcjtcbiAgICAgICAgcmVhZG9ubHkgYm90dG9tOiBudW1iZXI7XG4gICAgICAgIGdyYXZpdHk6IEdyYXZpdHk7XG4gICAgICAgIGxheW91dFBhcmFtczogTGF5b3V0UGFyYW1zXG4gICAgICAgIGJhY2tncm91bmQ6IHN0cmluZztcbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2dyYXBoaWNzL3V0aWwudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIklWaWV3LnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQudmlldyB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEFsaWduID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbjtcbiAgICBpbXBvcnQgQWxpZ25FbG1lbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduRWxtZW50O1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBleHBvcnQgaW50ZXJmYWNlIElWaWV3R3JvdXAgZXh0ZW5kcyBJVmlldyB7XG4gICAgICAgIGRpc3BhdGNoRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQ7XG4gICAgICAgIGFkZFZpZXcoVmlldzogVmlldywgaW5kZXg6IG51bWJlcik6IG51bWJlcjtcbiAgICAgICAgaW52YWxpZGF0ZUNoaWxkKGNoaWxkOiBWaWV3LCBkaXJ0eTogUmVjdCk6IHZvaWQ7XG5cbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQuZ3JhcGhpY3Mge1xuICAgIGV4cG9ydCBjbGFzcyBTaXplIHtcbiAgICAgICAgd2lkdGg6IG51bWJlcjtcbiAgICAgICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIGNvbnN0cnVjdG9yKHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdztcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZSgpOiBTaXplIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGhhc2hDb2RlKCk6bnVtYmVye1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGgqIDM3MjEzICsgdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQuZ3JhcGhpY3Mge1xuXG4gICAgZXhwb3J0IGNsYXNzIE1hcmdpbiB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IG51bWJlcjtcbiAgICAgICAgbWFyZ2luUmlnaHQ6IG51bWJlcjtcbiAgICAgICAgbWFyZ2luVG9wOiBudW1iZXI7XG4gICAgICAgIG1hcmdpbkJvdHRvbTogbnVtYmVyO1xuICAgICAgICBjb25zdHJ1Y3RvcihtYXJnaW5MZWZ0OiBudW1iZXIsXG4gICAgICAgICAgICBtYXJnaW5SaWdodDogbnVtYmVyLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiBudW1iZXIsXG4gICAgICAgICAgICBtYXJnaW5Cb3R0b206IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgICAgICAgICAgIHRoaXMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgICAgICAgICAgdGhpcy5tYXJnaW5SaWdodCA9IG1hcmdpblJpZ2h0O1xuICAgICAgICAgICAgdGhpcy5tYXJnaW5Cb3R0b20gPSBtYXJnaW5Cb3R0b21cbiAgICAgICAgfVxuICAgICAgICBnZXRTdGFydFhNYXJnaW4oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYXJnaW5SaWdodCA+IDAgJiYgIXRoaXMubWFyZ2luTGVmdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtdGhpcy5tYXJnaW5SaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcmdpbkxlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0U3RhcnRZTWFyZ2luKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubWFyZ2luQm90dG9tID4gMCAmJiAhdGhpcy5tYXJnaW5Ub3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLXRoaXMubWFyZ2luQm90dG9tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFyZ2luVG9wO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiUG9pbnQudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC5ncmFwaGljcyB7XG5cbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGV4cG9ydCBjbGFzcyBSZWN0IHtcbiAgICAgICAgbGVmdDogbnVtYmVyO1xuICAgICAgICB0b3A6IG51bWJlcjtcbiAgICAgICAgcmlnaHQ6IG51bWJlcjtcbiAgICAgICAgYm90dG9tOiBudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX3N0YXJ0cG9pbnQ6IFBvaW50O1xuICAgICAgICBwcml2YXRlIF9lbmRwb2ludDogUG9pbnQ7XG5cbiAgICAgICAgY29uc3RydWN0b3IobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gYm90dG9tO1xuICAgICAgICB9XG4gICAgICAgIHJlc2V0KGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0b3A7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBjb3JyZWN0KCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGVmdCA+IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbDogbnVtYmVyID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IHRoaXMucmlnaHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodCA9IGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50b3AgPiB0aGlzLmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy50b3A7XG4gICAgICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLmJvdHRvbTtcbiAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5sZWZ0ICs9IHg7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ICs9IHg7XG4gICAgICAgICAgICB0aGlzLnRvcCArPSB5O1xuICAgICAgICAgICAgdGhpcy5ib3R0b20gKz0geTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyB0cmFuc2xhdGVYKHg6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUoeCwgMCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgdHJhbnNsYXRlWSh5OiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlKDAsIHkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNjYWxlKHI6IG51bWJlcikge1xuICAgICAgICAgICAgaWYgKHIgPCAxICYmIHIgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHcgPSB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgICAgIHZhciBoID0gdGhpcy5ib3R0b20gLSB0aGlzLnRvcDtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnQgKz0gciAqIHcgLyAyO1xuICAgICAgICAgICAgICAgIHRoaXMudG9wICs9IHIgKiBoIC8gMjtcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0IC09IHIgKiB3IC8gMjtcbiAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbSAtPSByICogaCAvIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdCArPSByO1xuICAgICAgICAgICAgICAgIHRoaXMudG9wICs9IHI7XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodCAtPSByO1xuICAgICAgICAgICAgICAgIHRoaXMuYm90dG9tIC09IHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBpc05pbCgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5yaWdodCAtIHRoaXMubGVmdCA8PSAwLjAxKSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLmJvdHRvbSAtIHRoaXMudG9wIDw9IDAuMDEpO1xuICAgICAgICB9XG4gICAgICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gKCh0aGlzLmJvdHRvbSAtIHRoaXMudG9wKSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICAgICAgcmV0dXJuICgodGhpcy5yaWdodCAtIHRoaXMubGVmdCkpO1xuICAgICAgICB9XG4gICAgICAgIHNldCB3aWR0aCh3aWR0aDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5sZWZ0ICsgd2lkdGg7XG5cbiAgICAgICAgfVxuICAgICAgICBzZXQgaGVpZ2h0KGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHRoaXMudG9wICsgaGVpZ2h0O1xuXG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHN0YXJ0UG9pbnQoKTogUG9pbnQge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9zdGFydHBvaW50KSB7IHRoaXMuX3N0YXJ0cG9pbnQgPSBuZXcgUG9pbnQodGhpcy5sZWZ0LCB0aGlzLnRvcCk7IH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0cG9pbnQueCA9IHRoaXMubGVmdDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0cG9pbnQueSA9IHRoaXMudG9wO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0cG9pbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGVuZFBvaW50KCk6IFBvaW50IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZW5kcG9pbnQpIHsgdGhpcy5fZW5kcG9pbnQgPSBuZXcgUG9pbnQodGhpcy5yaWdodCwgdGhpcy5ib3R0b20pOyB9XG4gICAgICAgICAgICB0aGlzLl9lbmRwb2ludC54ID0gdGhpcy5yaWdodDtcbiAgICAgICAgICAgIHRoaXMuX2VuZHBvaW50LnkgPSB0aGlzLmJvdHRvbTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmRwb2ludDtcbiAgICAgICAgfVxuICAgICAgICBjb250YWlucyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICAgICAgaWYgKHggPD0gdGhpcy5yaWdodCAmJiB4ID49IHRoaXMubGVmdCAmJiB5IDw9IHRoaXMuYm90dG9tICYmIHkgPj0gdGhpcy50b3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZSgpOiBSZWN0IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjdCh0aGlzLmxlZnQsIHRoaXMudG9wLCB0aGlzLnJpZ2h0LCB0aGlzLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZXF1YWwocmVjdDpSZWN0KTpib29sZWFue1xuICAgICAgICAgICAgaWYocmVjdCAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjdC5sZWZ0ID09PSB0aGlzLmxlZnQgJiYgcmVjdC50b3AgPT09IHRoaXMudG9wICYmIHJlY3QuYm90dG9tID09PSB0aGlzLmJvdHRvbSAmJiByZWN0LnJpZ2h0ID09PSB0aGlzLnJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2dyYXBoaWNzL01hcmdpbnMudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vZ3JhcGhpY3MvUmVjdC50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLnZpZXcge1xuXG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IE1hcmdpbiA9IGFuZHJvaWQuZ3JhcGhpY3MuTWFyZ2luO1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuICAgIC8qKipcbiAgICAgKiDmoLnmja5tZWFzdXJlIOiuoeeul+WHuueahOe7k+aenFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBMYXlvdXRJbmZvIHtcbiAgICAgICAgaW5uZXJyZWN0OiBSZWN0O1xuICAgICAgICBvdXR0ZXJyZWN0OiBSZWN0O1xuICAgICAgICBkcmF3aW5kZXg6IG51bWJlcjsvL3JlbmRlciBvcmRlciBpbiB2aWV3Z3JvdXBcblxuICAgICAgICBjb25zdHJ1Y3RvcihsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIHBhZGRpbmc6IFBhZGRpbmcsIGRyYXdpbmRleD86IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5vdXR0ZXJyZWN0ID0gbmV3IFJlY3QobCwgdCwgciwgYik7XG4gICAgICAgICAgICB0aGlzLmlubmVycmVjdCA9IG5ldyBSZWN0KHRoaXMub3V0dGVycmVjdC5sZWZ0ICsgcGFkZGluZy5sZWZ0UGFkZGluZyxcbiAgICAgICAgICAgICAgICB0aGlzLm91dHRlcnJlY3QudG9wICsgcGFkZGluZy50b3BQYWRkaW5nLFxuICAgICAgICAgICAgICAgIHRoaXMub3V0dGVycmVjdC5yaWdodCAtIHBhZGRpbmcucmlnaHRQYWRkaW5nLFxuICAgICAgICAgICAgICAgIHRoaXMub3V0dGVycmVjdC5ib3R0b20gLSBwYWRkaW5nLmJvdHRvbVBhZGRpbmdcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIChkcmF3aW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdpbmRleCA9IGRyYXdpbmRleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3aW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc2V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgcGFkZGluZzogUGFkZGluZywgZHJhd2luZGV4PzogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLm91dHRlcnJlY3QgPSBuZXcgUmVjdChsLCB0LCByLCBiKTtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJyZWN0ID0gbmV3IFJlY3QodGhpcy5vdXR0ZXJyZWN0LmxlZnQgKyBwYWRkaW5nLmxlZnRQYWRkaW5nLFxuICAgICAgICAgICAgICAgIHRoaXMub3V0dGVycmVjdC50b3AgKyBwYWRkaW5nLnRvcFBhZGRpbmcsXG4gICAgICAgICAgICAgICAgdGhpcy5vdXR0ZXJyZWN0LnJpZ2h0IC0gcGFkZGluZy5yaWdodFBhZGRpbmcsXG4gICAgICAgICAgICAgICAgdGhpcy5vdXR0ZXJyZWN0LmJvdHRvbSAtIHBhZGRpbmcuYm90dG9tUGFkZGluZ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKGRyYXdpbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd2luZGV4ID0gZHJhd2luZGV4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0KHg6bnVtYmVyLHk6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJyZWN0LnRyYW5zbGF0ZSh4LHkpO1xuICAgICAgICAgICAgdGhpcy5vdXR0ZXJyZWN0LnRyYW5zbGF0ZSh4LHkpO1xuICAgICAgICB9XG4gICAgICAgIGNsb25lKCl7XG4gICAgICAgICAgICBsZXQgaW5mbz0gbmV3IExheW91dEluZm8oMCwwLDAsMCxuZXcgUGFkZGluZygwKSk7XG4gICAgICAgICAgICBpbmZvLmRyYXdpbmRleCA9dGhpcy5kcmF3aW5kZXg7XG4gICAgICAgICAgICBpbmZvLmlubmVycmVjdCA9IHRoaXMuaW5uZXJyZWN0LmNsb25lKCk7XG4gICAgICAgICAgICBpbmZvLm91dHRlcnJlY3QgPSB0aGlzLm91dHRlcnJlY3QuY2xvbmUoKTtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICB9XG4gICAgICAgIGVxdWFsKGluZm86TGF5b3V0SW5mbyk6Ym9vbGVhbntcbiAgICAgICAgICAgIGlmKGluZm8gIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZm8uZHJhd2luZGV4ID09PSB0aGlzLmRyYXdpbmRleCAmJiB0aGlzLmlubmVycmVjdC5lcXVhbChpbmZvLmlubmVycmVjdCkgJiYgdGhpcy5vdXR0ZXJyZWN0LmVxdWFsKGluZm8ub3V0dGVycmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqKlxuICAgICAqIOi+k+WFpeeahOWPguaVsFxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBMYXlvdXRQYXJhbXMge1xuICAgICAgICBfd2lkdGg6IG51bWJlcjtcbiAgICAgICAgX2hlaWdodDogbnVtYmVyO1xuICAgICAgICBtYXJnaW46IE1hcmdpbiA9IG5ldyBNYXJnaW4oMCwgMCwgMCwgMCk7Ly8geyAnbWFyZ2luTGVmdCc6IDAsICdtYXJnaW5SaWdodCc6IDAsICdtYXJnaW5Ub3AnOiAwLCAnbWFyZ2luQm90dG9tJzogMCB9O1xuICAgICAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgbWFyZ2luPzogTWFyZ2luKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIGlmIChtYXJnaW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmdpbiA9IG1hcmdpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXQgd2lkdGgodzogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl93aWR0aCA9IHc7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgICAgICBpZiAodGhpcy5fd2lkdGggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgd2lkdGhNb2RlKCkge1xuICAgICAgICAgICAgdmFyIG1vZGUgPSBMYXlvdXRQYXJhbXMuRVhBQ1RMWTtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fd2lkdGgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIExheW91dFBhcmFtcy5XUkFQX0NPTlRFTlQ6XG4gICAgICAgICAgICAgICAgICAgIG1vZGUgPSBMYXlvdXRQYXJhbXMuV1JBUF9DT05URU5UO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ6XG4gICAgICAgICAgICAgICAgICAgIG1vZGUgPSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIExheW91dFBhcmFtcy5FWEFDVExZOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG1vZGUgPSBMYXlvdXRQYXJhbXMuRVhBQ1RMWTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbW9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBoZWlnaHRNb2RlKCkge1xuICAgICAgICAgICAgdmFyIG1vZGUgPSBMYXlvdXRQYXJhbXMuRVhBQ1RMWTtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5faGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBMYXlvdXRQYXJhbXMuV1JBUF9DT05URU5UOlxuICAgICAgICAgICAgICAgICAgICBtb2RlID0gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UOlxuICAgICAgICAgICAgICAgICAgICBtb2RlID0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBMYXlvdXRQYXJhbXMuRVhBQ1RMWTpcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBtb2RlID0gTGF5b3V0UGFyYW1zLkVYQUNUTFk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQgaGVpZ2h0KGg6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5faGVpZ2h0ID0gaDtcbiAgICAgICAgfVxuICAgICAgICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBNQVRDSF9QQVJFTlQ6IG51bWJlciA9IC0xO1xuICAgICAgICBzdGF0aWMgV1JBUF9DT05URU5UOiBudW1iZXIgPSAtMjtcbiAgICAgICAgc3RhdGljIEVYQUNUTFk6IG51bWJlciA9IC0zO1xuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgTWVhc3VyZVNwZWMge1xuICAgICAgICB2YWx1ZTogbnVtYmVyO1xuICAgICAgICBtb2RlOiBudW1iZXIgPSBMYXlvdXRQYXJhbXMuRVhBQ1RMWTtcbiAgICAgICAgY29uc3RydWN0b3Iodj86IG51bWJlciwgbT86IG51bWJlcikge1xuICAgICAgICAgICAgaWYgKHYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZSA9IG07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2V0TWVhc3VyZVZhbHVlKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQ6XG4gICAgICAgICAgICAgICAgY2FzZSBMYXlvdXRQYXJhbXMuRVhBQ1RMWTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgY2FzZSBMYXlvdXRQYXJhbXMuV1JBUF9DT05URU5UOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLnZpZXcuZXZlbnQge1xuICAgIGV4cG9ydCBjbGFzcyBNb3Rpb25FdmVudCB7XG5cblxuICAgICAgICBwdWJsaWMgc3RhdGljIEFDVElPTl9ET1dOID0gMDtcbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fVVAgPSAxO1xuICAgICAgICBwdWJsaWMgc3RhdGljIEFDVElPTl9NT1ZFID0gMjtcbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fQ0FOQ0VMID0gMztcbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fT1VUU0lERSA9IDQ7XG5cbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fTU9VU0VfRE9XTiA9NTtcbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fTU9VU0VfTU9WRSA9IDY7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQUNUSU9OX01PVVNFX1VQPTc7XG4gICAgICAgIHB1YmxpYyBzdGF0aWMgQUNUSU9OX01PVVNFX09WRVI9ODtcbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fTU9VU0VfT1VUID0gOTtcbiAgICAgICAgcHVibGljIHN0YXRpYyBBQ1RJT05fTU9VU0VfT04gPTExO1xuICAgICAgICBwdWJsaWMgc3RhdGljIEFDVElPTl9DTElDSyA9IDEwO1xuXG4gICAgICAgIHByaXZhdGUgX3g6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfeTogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9hY3Rpb246IG51bWJlcjtcbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBzY3JlZW5YOm51bWJlcjtcbiAgICAgICAgcHVibGljIHNjcmVlblk6bnVtYmVyO1xuICAgICAgICBcbiAgICAgICAgcHVibGljIGVsZW1lbnQ6SFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgZ2V0IHgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5feDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeCh2Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl94ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBzZXQgeSh2Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl95ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBnZXQgeSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl95O1xuICAgICAgICB9XG4gICAgICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHNldCBhY3Rpb24odmFsdWU6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbiA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBjbG9uZSgpOk1vdGlvbkV2ZW50e1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb3Rpb25FdmVudCh0aGlzLl94LHRoaXMuX3ksdGhpcy5fYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdHJ1Y3Rvcih4Om51bWJlciwgeTpudW1iZXIsIGFjdGlvbjpudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3ggPSB4O1xuICAgICAgICAgICAgdGhpcy5feSA9IHk7XG4gICAgICAgICAgICB0aGlzLnNjcmVlblggPSB4O1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5ZID0geTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbiA9IGFjdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9mZnNldCh4Om51bWJlcix5Om51bWJlcik6dm9pZHtcbiAgICAgICAgICAgIHRoaXMuX3grPXg7XG4gICAgICAgICAgICB0aGlzLl95Kz15O1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5YKz14O1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5ZKz15O1xuICAgICAgICB9XG5cbiAgICAgICAgdG9TdHJpbmcoKTpzdHJpbmd7XG4gICAgICAgICAgICByZXR1cm4gXCIgeCA9IFwiK3RoaXMuX3grXCIgLCB5ID0gXCIrdGhpcy5feSArXCIgLCBhY3Rpb24gPSBcIiArIHRoaXMuX2dldGFjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIF9nZXRhY3Rpb24oKTpzdHJpbmd7XG4gICAgICAgICAgICBzd2l0Y2godGhpcy5fYWN0aW9uKXtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQUNUSU9OX09VVFNJREVcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuICBcIkFDVElPTl9VUFwiIDtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICBcIkFDVElPTl9NT1ZFXCIgO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBQ1RJT05fQ0FOQ0VMXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFDVElPTl9PVVRTSURFXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFDVElPTl9NT1VTRV9ET1dOXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFDVElPTl9NT1VTRV9NT1ZFXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFDVElPTl9NT1VTRV9VUFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBQ1RJT05fTU9VU0VfT1ZFUlwiO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBQ1RJT05fTU9VU0VfT1VUXCI7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBQ1RJT05fQ0xJQ0tcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgIHJldHVybiBcIkFDVElPTl9NT1VTRV9PTlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsIlxubmFtZXNwYWNlIGFuZHJvaWQudmlldy5hbmltYXRpb24ge1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBleHBvcnQgZW51bSBBbmltYXRpb25TdGF0ZXtcbiAgICAgICAgQmVmb3JlU3RhcnQsXG4gICAgICAgIEFuaW1hdGluZyxcbiAgICAgICAgRW5kXG5cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIEFuaW1hdGlvbiB7XG4gICAgICAgIGR1cmF0aW9uOiBudW1iZXIgPSAwO1xuICAgICAgICBzdGFydDogbnVtYmVyO1xuICAgICAgICBlYXNlOkFuaW1hdGlvbkVhc2U7XG4gICAgICAgIHR5cGU6QW5pbWF0aW9uVHlwZTtcbiAgICAgICAgZnJvbTpudW1iZXI7XG4gICAgICAgIHRvOm51bWJlcjtcbiAgICAgICAgZmlsbEFmdGVyOmJvb2xlYW47XG4gICAgICAgIHN0YXRlOkFuaW1hdGlvblN0YXRlO1xuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICAgICAgdGhpcy5lYXNlID1uZXcgQW5pbWF0aW9uRWFzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IDA7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0wO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gQW5pbWF0aW9uVHlwZS5BbHBoYTtcbiAgICAgICAgICAgIHRoaXMuZnJvbSA9IDE7XG4gICAgICAgICAgICB0aGlzLnRvID0gMTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBBbmltYXRpb25TdGF0ZS5CZWZvcmVTdGFydDtcbiAgICAgICAgICAgIHRoaXMuZmlsbEFmdGVyID1mYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZ2V0IGlzQW5pYW10aW9uRW5kKCk6Ym9vbGVhbntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0ICsgdGhpcy5kdXJhdGlvbiA8IERhdGUubm93KCk7XG4gICAgICAgIH1cblxuICAgICAgICBzY2FsZShub3c6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVhc2UgXCIgKyggKG5vdyAtIHRoaXMuc3RhcnQpL3RoaXMuZHVyYXRpb24pKTtcbiAgICAgICAgICAgIHJldHVybiAgdGhpcy5lYXNlLmVhc2UoKG5vdyAtIHRoaXMuc3RhcnQpIC8gdGhpcy5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgYXBwbHlUcmFuc2Zvcm1hdGlvbihpbnRlcnBvbGF0ZWRUaW1lOm51bWJlciwgY2FudmFzOkNhbnZhcyx2aWV3OlZpZXcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYXBwbHlUcmFuc2Zvcm1hdGlvbiBcIitpbnRlcnBvbGF0ZWRUaW1lICsgXCIgY2FudmFzIFwiICsgY2FudmFzICsgXCIgVmlldyBcIiArIHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIG9uU3RhcnRBbmlhbXRpb24oY2FudmFzOkNhbnZhcyx2aWV3OlZpZXcpe1xuXG4gICAgICAgIH1cbiAgICAgICAgb25FbmRBbmltYXRpb24oY2FudmFzOkNhbnZhcyx2aWV3OlZpZXcpe1xuXG4gICAgICAgIH1cbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQudmlldy5hbmltYXRpb24ge1xuICAgIFxuXG4gICAgZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkVhc2Uge1xuICAgICAgICBwdWJsaWMgZWFzZSh0OiBudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEJvdW5jZUFuaW1hdGlvbkVhc2UgZXh0ZW5kcyBBbmltYXRpb25FYXNlIHtcblxuICAgICAgICBwdWJsaWMgZWFzZSh0OiBudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiMSA9IDQgLyAxMSxcbiAgICAgICAgICAgICAgICBiMiA9IDYgLyAxMSxcbiAgICAgICAgICAgICAgICBiMyA9IDggLyAxMSxcbiAgICAgICAgICAgICAgICBiNCA9IDMgLyA0LFxuICAgICAgICAgICAgICAgIGI1ID0gOSAvIDExLFxuICAgICAgICAgICAgICAgIGI2ID0gMTAgLyAxMSxcbiAgICAgICAgICAgICAgICBiNyA9IDE1IC8gMTYsXG4gICAgICAgICAgICAgICAgYjggPSAyMSAvIDIyLFxuICAgICAgICAgICAgICAgIGI5ID0gNjMgLyA2NCxcbiAgICAgICAgICAgICAgICBiMCA9IDEgLyBiMSAvIGIxO1xuICAgICAgICAgICAgcmV0dXJuICh0ID0gK3QpIDwgYjEgPyBiMCAqIHQgKiB0IDogdCA8IGIzID8gYjAgKiAodCAtPSBiMikgKiB0ICsgYjQgOiB0IDwgYjYgPyBiMCAqICh0IC09IGI1KSAqIHQgKyBiNyA6IGIwICogKHQgLT0gYjgpICogdCArIGI5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIFNpbkFuaW1hdGlvbkVhc2UgZXh0ZW5kcyBBbmltYXRpb25FYXNlIHtcbiAgICAgICAgcHVibGljIGVhc2UodDogbnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgcGkgPSBNYXRoLlBJLFxuICAgICAgICAgICAgICAgIGhhbGZQaSA9IHBpIC8gMjtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNpbih0ICogaGFsZlBpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgY2xhc3MgUXVhZEFuaW1hdGlvbkVhc2UgZXh0ZW5kcyBBbmltYXRpb25FYXNlIHtcbiAgICAgICAgcHVibGljIGVhc2UodDogbnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCA6IC0tdCAqICgyIC0gdCkgKyAxKSAvIDI7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2dyYXBoaWNzL1NpemUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2ludGVyZmFjZS9JVmlldy50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9MYXlvdXRJbmZvLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9ldmVudC9Nb3Rpb25FdmVudC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdXRpbC9Mb2cudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2FuaW1hdGlvbi9BbmltYXRpb24udHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2FuaW1hdGlvbi9BbmltYXRpb25FYXNlLnRzXCIgLz5cblxuXG5uYW1lc3BhY2UgYW5kcm9pZC52aWV3IHtcbiAgICBpbXBvcnQgUGFkZGluZyA9IGFuZHJvaWQuZ3JhcGhpY3MuUGFkZGluZztcbiAgICBpbXBvcnQgQWxpZ24gPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduO1xuICAgIGltcG9ydCBBbGlnbkVsbWVudCA9IGFuZHJvaWQuZ3JhcGhpY3MuQWxpZ25FbG1lbnQ7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBHcmF2aXR5ID0gYW5kcm9pZC5ncmFwaGljcy5HcmF2aXR5O1xuICAgIGltcG9ydCBDb250ZXh0ID0gYW5kcm9pZC5hcHAuQ29udGV4dDtcbiAgICBpbXBvcnQgTW90aW9uRXZlbnQgPSBhbmRyb2lkLnZpZXcuZXZlbnQuTW90aW9uRXZlbnQ7XG4gICAgaW1wb3J0IExvZyA9IGFuZHJvaWQudXRpbC5Mb2c7XG4gICAgaW1wb3J0IEFuaW1hdGlvbiA9IGFuZHJvaWQudmlldy5hbmltYXRpb24uQW5pbWF0aW9uO1xuICAgIGltcG9ydCBBbmltYXRpb25FYXNlID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb25FYXNlO1xuICAgIFxuICAgIC8vIHB1YmxpYyBzdGF0aWMgIFZJU0lBQkxFIDpudW1iZXI9IDE7IFxuICAgIC8vIHB1YmxpYyBzdGF0aWMgIElOVklTSUFCTEUgOm51bWJlciA9IC0xO1xuICAgIC8vIHB1YmxpYyBzdGF0aWMgIEdPTkUgOm51bWJlciA9IDA7XG4gICAgZXhwb3J0IGVudW0gVmlld1N0YXRlIHtcbiAgICAgICAgVmlzaWFibGUsXG4gICAgICAgIEluVmlzaWFibGUsXG4gICAgICAgIEdvbmVcbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIFZpZXcgaW1wbGVtZW50cyBJVmlldyB7XG4gICAgXG4gICAgICAgIHByb3RlY3RlZCBfd2lkdGg6IE1lYXN1cmVTcGVjO1xuICAgICAgICBwcm90ZWN0ZWQgX2hlaWdodDogTWVhc3VyZVNwZWM7XG4gICAgICAgIHByb3RlY3RlZCBfYmFja2dyb3VuZDogc3RyaW5nO1xuICAgICAgICBwcm90ZWN0ZWQgX3BhZGRpbmc6IFBhZGRpbmcgPSBuZXcgUGFkZGluZygpO1xuICAgICAgICBwdWJsaWMgX2xheW91dEluZm86IExheW91dEluZm87XG4gICAgICAgIHB1YmxpYyBfb2xkTGF5b3V0SW5mbzogTGF5b3V0SW5mbztcbiAgICAgICAgXG4gICAgICAgIHByb3RlY3RlZCBfZ3Jhdml0eTogR3Jhdml0eTtcbiAgICAgICAgcHJvdGVjdGVkIGFsaWduVmlldzogQWxpZ25FbG1lbnQ7XG4gICAgICAgIGxheW91dFBhcmFtczogTGF5b3V0UGFyYW1zID0gbmV3IExheW91dFBhcmFtcygwLCAwLCBudWxsKTtcbiAgICAgICAgcHJpdmF0ZSBfcGFyZW50OiBWaWV3R3JvdXAgPSBudWxsO1xuICAgICAgICBwcml2YXRlIF9jb250ZXh0OiBDb250ZXh0O1xuICAgICAgICBwcm90ZWN0ZWQgX2NhbnZhczogQ2FudmFzO1xuICAgICAgICBwcm90ZWN0ZWQgX2NsaXAgOmJvb2xlYW47XG4gICAgICAgIHB1YmxpYyBhbmltYXRpb246QW5pbWF0aW9uO1xuICAgICAgICBwcml2YXRlIF9kcmF3aW5nVGltZTpudW1iZXIgPTA7XG5cbiAgICAgICAgb2Zmc2V0bGVmdDogbnVtYmVyPTA7XG4gICAgICAgIG9mZnNldHRvcDogbnVtYmVyPTA7XG4gICAgICAgIHB1YmxpYyB2aXNpYWJsZTogVmlld1N0YXRlID0gVmlld1N0YXRlLlZpc2lhYmxlO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5fZ3Jhdml0eSA9IEdyYXZpdHkuTGVmdDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0Q29udGV4dCgpOiBDb250ZXh0IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIG1heSBiZSBjYWxsZWQgZm9yIHNlcnZhbCB0aW1lc1xuICAgICAgICAgKi9cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplIHtcbiAgICAgICAgICAgIHRoaXMuX2xheW91dEluZm8gPSBuZXcgTGF5b3V0SW5mbygwLCAwLCAwLCAwLCB0aGlzLnBhZGRpbmcsIDApO1xuICAgICAgICAgICAgdmFyIHc6IG51bWJlciA9IHRoaXMubGF5b3V0UGFyYW1zLndpZHRoO1xuICAgICAgICAgICAgdmFyIGg6IG51bWJlciA9IHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBzaXplOiBTaXplID0gbmV3IFNpemUodywgaCk7XG4gICAgICAgICAgICB2YXIgd2lkdGhtb2RlID0gdGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlO1xuICAgICAgICAgICAgdmFyIGhlaWdodG1vZGUgPSB0aGlzLmxheW91dFBhcmFtcy5oZWlnaHRNb2RlO1xuICAgICAgICAgICAgaWYgKHdpZHRobW9kZSA9PT0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCkge1xuICAgICAgICAgICAgICAgIHNpemUud2lkdGggPSB3aWR0aC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoZWlnaHRtb2RlID09PSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBoZWlnaHQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldE1lYXN1cmVkRGltZW5zaW9uKG5ldyBNZWFzdXJlU3BlYyhzaXplLndpZHRoLCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSksIG5ldyBNZWFzdXJlU3BlYyhzaXplLmhlaWdodCwgTGF5b3V0UGFyYW1zLkVYQUNUTFkpKTtcbiAgICAgICAgICAgIHJldHVybiBzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldERyYXdpbmdUaW1lKCk6bnVtYmVye1xuICAgICAgICAgICAgaWYodGhpcy5wYXJlbnQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RyYXdpbmdUaW1lO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNldERyYXdpbmdUaW1lKHZhbHVlOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9kcmF3aW5nVGltZT12YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmKHRoaXMubGF5b3V0SW5mbyAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbGRMYXlvdXRJbmZvPSB0aGlzLmxheW91dEluZm8uY2xvbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGF5b3V0SW5mby5yZXNldChsK3RoaXMub2Zmc2V0bGVmdCwgdCt0aGlzLm9mZnNldHRvcCwgcit0aGlzLm9mZnNldGxlZnQsIGIrdGhpcy5vZmZzZXR0b3AsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIGlzbGF5b3V0Q2hhbmdlZCgpOmJvb2xlYW57XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMubGF5b3V0SW5mby5lcXVhbCh0aGlzLl9vbGRMYXlvdXRJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBvbkRyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2lhYmxlICE9IFZpZXdTdGF0ZS5WaXNpYWJsZSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgICAgIGlmICh0aGlzLmJhY2tncm91bmQpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuZHJhd1JlY3QodGhpcy5fbGF5b3V0SW5mby5vdXR0ZXJyZWN0LnN0YXJ0UG9pbnQsIHRoaXMuX2xheW91dEluZm8ub3V0dGVycmVjdC5lbmRQb2ludCwgdHJ1ZSwgdGhpcy5iYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRNZWFzdXJlZERpbWVuc2lvbih3aWR0aDogTWVhc3VyZVNwZWMsIGhlaWdodDogTWVhc3VyZVNwZWMpIHtcbiAgICAgICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25Ub3VjaEV2ZW50KGV2ZW50OiBNb3Rpb25FdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW52YWxpZGF0ZShmb3JjZTpib29sZWFuKTogdm9pZCB7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgICAgICBpZihmb3JjZSl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmludmFsaWRhdGUoZm9yY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaW52YWxpZGF0ZUNoaWxkKHRoaXMsdGhpcy5sYXlvdXRJbmZvLm91dHRlcnJlY3QpO1xuICAgICAgICAgICAgICAgIHRoaXMub25pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBnZXRSb290VmlldygpOiBWaWV3IHtcbiAgICAgICAgICAgIGlmKHRoaXMucGFyZW50ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAocGFyZW50LnBhcmVudCAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBvbmludmFsaWRhdGUoKSB7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVxdWVzdExheW91dCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnJlcXVlc3RMYXlvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgcHVibGljIHN0YXJ0QW5pbWF0aW9uKGFuaW1hdGlvbjpBbmltYXRpb24pe1xuICAgICAgICAgICAgaWYodGhpcy5hbmltYXRpb24gPT0gbnVsbCB8fHRoaXMuYW5pbWF0aW9uLmlzQW5pYW10aW9uRW5kKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmFuaW1hdGlvbiAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRSb290VmlldygpLnN0YXJ0QW5pbWF0aW9uKGFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0UGFyZW50KHA6IFZpZXdHcm91cCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50ID0gcDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgb2Zmc2V0KGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0bGVmdCArPSBsZWZ0O1xuICAgICAgICAgICAgdGhpcy5vZmZzZXR0b3AgKz0gdG9wO1xuICAgICAgICAgICAgaWYoaXNOYU4obGVmdCkgfHwgaXNOYU4odGhpcy5vZmZzZXRsZWZ0KSl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvZmZzZXQgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJvZmZzZXQgZXJyb3IgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzLmxheW91dEluZm8ub2Zmc2V0KGxlZnQsdG9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBwYXJlbnQoKTogVmlld0dyb3VwIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoLmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGVpZ2h0LmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IHBhZGRpbmcocGFkZGluZzogUGFkZGluZykge1xuICAgICAgICAgICAgdGhpcy5fcGFkZGluZyA9IHBhZGRpbmc7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHBhZGRpbmcoKTogUGFkZGluZyB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFkZGluZztcbiAgICAgICAgfVxuICAgICAgICBnZXQgbGVmdCgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEluZm8ub3V0dGVycmVjdC5sZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHRvcCgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xheW91dEluZm8ub3V0dGVycmVjdC50b3A7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgcmlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXlvdXRJbmZvLm91dHRlcnJlY3QucmlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgYm90dG9tKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0SW5mby5vdXR0ZXJyZWN0LmJvdHRvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCBiYWNrZ3JvdW5kKGJhY2tncm91bmQ6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGJhY2tncm91bmQoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGdldCBsYXlvdXRJbmZvKCk6IExheW91dEluZm8ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sYXlvdXRJbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0SW5mbyA9IG5ldyBMYXlvdXRJbmZvKDAsIDAsIDAsIDAsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0SW5mbztcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc2V0IGdyYXZpdHkoZ3Jhdml0eTogR3Jhdml0eSkge1xuICAgICAgICAgICAgdGhpcy5fZ3Jhdml0eSA9IGdyYXZpdHk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IGdyYXZpdHkoKTogR3Jhdml0eSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3Jhdml0eTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgY2xpcCh2YWx1ZTpib29sZWFuKXtcbiAgICAgICAgICAgIHRoaXMuX2NsaXAgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgY2xpcCgpOmJvb2xlYW57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xpcDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vZ3JhcGhpY3MvVXRpbC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vaW50ZXJmYWNlL0lWaWV3R3JvdXAudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlZpZXcudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC52aWV3IHtcblxuICAgIGltcG9ydCBQYWRkaW5nID0gYW5kcm9pZC5ncmFwaGljcy5QYWRkaW5nO1xuICAgIGltcG9ydCBBbGlnbiA9IGFuZHJvaWQuZ3JhcGhpY3MuQWxpZ247XG4gICAgaW1wb3J0IEFsaWduRWxtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsbWVudDtcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IE1vdGlvbkV2ZW50ID0gYW5kcm9pZC52aWV3LmV2ZW50Lk1vdGlvbkV2ZW50O1xuICAgIGltcG9ydCBMb2cgPSBhbmRyb2lkLnV0aWwuTG9nO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBVdGlsID0gYW5kcm9pZC5ncmFwaGljcy5VdGlsO1xuICAgIGltcG9ydCBBbmltYXRpb25TdGF0ZSA9IGFuZHJvaWQudmlldy5hbmltYXRpb24uQW5pbWF0aW9uU3RhdGU7XG4gICAgZXhwb3J0IGNsYXNzIFZpZXdHcm91cCBleHRlbmRzIFZpZXcgaW1wbGVtZW50cyBJVmlld0dyb3VwIHtcblxuICAgICAgICBwcm90ZWN0ZWQgY2hpbGRyZW46IEFycmF5PFZpZXc+ID0gbmV3IEFycmF5PFZpZXc+KCk7XG5cbiAgICAgICAgcHJpdmF0ZSBfbUN1cnJlbnRUb3VjaFRhcmdldDogYW55ID0gbnVsbDtcblxuICAgICAgICBwcml2YXRlIF9pc0ludGVyY2VwdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHByaXZhdGUgbGFzdEludGVyY2VwdEV2ZW50OiBNb3Rpb25FdmVudFtdID0gW107XG5cbiAgICAgICAgcHVibGljIGRpc3BhdGNoRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuXG4gICAgICAgICAgICB2YXIgaXRlbTogVmlldztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0RHJhd2luZ1RpbWUodGhpcy5nZXREcmF3aW5nVGltZSgpKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS52aXNpYWJsZSAhPSBWaWV3U3RhdGUuVmlzaWFibGUpIHsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2xpcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNsaXAgPSB0aGlzLmNsaXA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2xpcCA9PT0gdHJ1ZSB8fCBpdGVtLmNsaXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5jbGlwKGl0ZW0ubGF5b3V0SW5mby5vdXR0ZXJyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NoaWxkKGNhbnZhcywgaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2hpbGQoY2FudmFzLCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0NoaWxkKGNhbnZhczogQ2FudmFzLCB2aWV3OiBWaWV3KSB7XG5cbiAgICAgICAgICAgIGlmKHZpZXcuYW5pbWF0aW9uICE9IG51bGwgJiYgIXZpZXcuYW5pbWF0aW9uLmlzQW5pYW10aW9uRW5kKXtcbiAgICAgICAgICAgICAgICBjYW52YXMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHZpZXcuYW5pbWF0aW9uLnN0YXRlID09PSBBbmltYXRpb25TdGF0ZS5CZWZvcmVTdGFydCl7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcuX2xheW91dEluZm8gPSB2aWV3Ll9vbGRMYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcuYW5pbWF0aW9uLm9uU3RhcnRBbmlhbXRpb24oY2FudmFzLHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmFuaW1hdGlvbi5zdGF0ZSA9IEFuaW1hdGlvblN0YXRlLkFuaW1hdGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmlldy5hbmltYXRpb24uYXBwbHlUcmFuc2Zvcm1hdGlvbih2aWV3LmFuaW1hdGlvbi5zY2FsZSh0aGlzLmdldERyYXdpbmdUaW1lKCkpLGNhbnZhcyx2aWV3KTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmlldy5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgICAgICAgICBpZiAodmlldyBpbnN0YW5jZW9mIFZpZXdHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmRpc3BhdGNoRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYW52YXMucmVzdG9yZSgpO1xuICAgICAgICAgICAgfWVsc2V7Ly8gbm9ybWFsIGRyYXdpbmc7XG4gICAgICAgICAgICAgICAgaWYodmlldy5hbmltYXRpb24gIT0gbnVsbCAmJiB2aWV3LmFuaW1hdGlvbi5pc0FuaWFtdGlvbkVuZCAmJiB2aWV3LmFuaW1hdGlvbi5zdGF0ZSAhPSBBbmltYXRpb25TdGF0ZS5FbmQpe1xuICAgICAgICAgICAgICAgICAgICB2aWV3LmFuaW1hdGlvbi5zdGF0ZSA9IEFuaW1hdGlvblN0YXRlLkVuZDtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5hbmltYXRpb24ub25FbmRBbmltYXRpb24oY2FudmFzLHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICBpZighdmlldy5hbmltYXRpb24uZmlsbEFmdGVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuX2xheW91dEluZm8gPSB2aWV3Ll9vbGRMYXlvdXRJbmZvLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXcub25EcmF3KGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXcgaW5zdGFuY2VvZiBWaWV3R3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaERyYXcoY2FudmFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIG9uaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0ub25pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgaW52YWxpZGF0ZUNoaWxkKGNoaWxkOiBWaWV3LCBkaXJ0eTogUmVjdCk6IHZvaWQge1xuICAgICAgICAgICAgaWYgKFV0aWwuY29udGFpbnNSZWN0KHRoaXMubGF5b3V0SW5mby5vdXR0ZXJyZWN0LCBkaXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3ZGlydHkgPSBVdGlsLnVuaW9uKGRpcnR5LCB0aGlzLmxheW91dEluZm8ub3V0dGVycmVjdClcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5pbnZhbGlkYXRlQ2hpbGQodGhpcywgbmV3ZGlydHkpO1xuICAgICAgICAgICAgICAgIHRoaXMub25pbnZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRHJhdyh0aGlzLl9jYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGdldENoaWxkQ291bnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0Q2hpbGRBdChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltpbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGdldFNvcnRWaWV3cygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIub25MYXlvdXQobCwgdCwgciwgYiwgY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uTWVhc3VyZSh3aWR0aDogTWVhc3VyZVNwZWMsIGhlaWdodDogTWVhc3VyZVNwZWMsIGNhbnZhczogQ2FudmFzKTogU2l6ZSB7XG4gICAgICAgICAgICB2YXIgbWF4U2l6ZTogU2l6ZTtcbiAgICAgICAgICAgIC8vIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsaGVpZ2h0LGNhbnZhcyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbTogVmlldyA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgdmFyIGxwOiBMYXlvdXRQYXJhbXMgPSBpdGVtLmxheW91dFBhcmFtcztcbiAgICAgICAgICAgICAgICB2YXIgdzogbnVtYmVyID0gbHAud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGg6IG51bWJlciA9IGxwLmhlaWdodDtcbiAgICAgICAgICAgICAgICAvL1RPIERPLi4uXG4gICAgICAgICAgICAgICAgaWYgKGxwLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgaCA9IGhlaWdodC52YWx1ZSAtIGl0ZW0ubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5Ub3AgLSBpdGVtLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luQm90dG9tIC0gdGhpcy5wYWRkaW5nLnRvcFBhZGRpbmcgLSB0aGlzLnBhZGRpbmcuYm90dG9tUGFkZGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxwLndpZHRoTW9kZSA9PT0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCkge1xuICAgICAgICAgICAgICAgICAgICB3ID0gd2lkdGgudmFsdWUgLSBpdGVtLmxheW91dFBhcmFtcy5tYXJnaW4ubWFyZ2luTGVmdCAtIGl0ZW0ubGF5b3V0UGFyYW1zLm1hcmdpbi5tYXJnaW5SaWdodCAtIHRoaXMucGFkZGluZy5sZWZ0UGFkZGluZyAtIHRoaXMucGFkZGluZy5yaWdodFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSBpdGVtLm9uTWVhc3VyZShuZXcgTWVhc3VyZVNwZWModywgbHAud2lkdGhNb2RlKSwgbmV3IE1lYXN1cmVTcGVjKGgsIGxwLmhlaWdodE1vZGUpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnZpc2lhYmxlID09PSBWaWV3U3RhdGUuR29uZSkge1xuICAgICAgICAgICAgICAgICAgICBzaXplID0gbmV3IFNpemUoMCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXhTaXplLndpZHRoIDwgc2l6ZS53aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4U2l6ZS53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heFNpemUuaGVpZ2h0IDwgc2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFNpemUuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXhTaXplID0gc2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1heFNpemUpIHtcbiAgICAgICAgICAgICAgICBtYXhTaXplID0gbmV3IFNpemUoMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkge1xuICAgICAgICAgICAgICAgIG1heFNpemUud2lkdGggPSB0aGlzLmxheW91dFBhcmFtcy53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UKSB7XG4gICAgICAgICAgICAgICAgbWF4U2l6ZS53aWR0aCA9IHdpZHRoLmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5FWEFDVExZKSB7XG4gICAgICAgICAgICAgICAgbWF4U2l6ZS5oZWlnaHQgPSB0aGlzLmxheW91dFBhcmFtcy5oZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpIHtcbiAgICAgICAgICAgICAgICBtYXhTaXplLmhlaWdodCA9IGhlaWdodC5nZXRNZWFzdXJlVmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKG1heFNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKG1heFNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgcmV0dXJuIG1heFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkVmlldyh2aWV3OiBWaWV3LCBpbmRleDogbnVtYmVyID0gMCwgbGF5b3V0UGFyYW1zOiBMYXlvdXRQYXJhbXMgPSBudWxsKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVmlld1dpdGhPdXRSZUxheW91dCh2aWV3LGluZGV4LGxheW91dFBhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RMYXlvdXQoKTtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHVibGljIGFkZFZpZXdXaXRoT3V0UmVMYXlvdXQodmlldzpWaWV3LGluZGV4Om51bWJlcj0wLGxheW91dFBhcmFtczpMYXlvdXRQYXJhbXMgPSBudWxsKTpudW1iZXJ7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmlldyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCAhPT0gbnVsbCAmJiBpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRJbmZvLmRyYXdpbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWV3LmxheW91dEluZm8uZHJhd2luZGV4ID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxheW91dFBhcmFtcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmlldy5sYXlvdXRQYXJhbXMgPSBsYXlvdXRQYXJhbXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aWV3LnNldFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVBbGxWaWV3cygpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyByZW1vdmVWaWV3KHZpZXc6IFZpZXcpIHtcbiAgICAgICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKHZpZXcpO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdmlldy5zZXRQYXJlbnQobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIG9uSW50ZXJjZXB0VG91Y2hFdmVudChldmVudDogTW90aW9uRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwYXRjaFRvdWNoRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCB8fCB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0IGluc3RhbmNlb2YgVmlld0dyb3VwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyB0aGlzLmNoaWxkcmVuICYmIGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZDogVmlldyA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmxheW91dEluZm8ub3V0dGVycmVjdC5jb250YWlucyhldmVudC54LCBldmVudC55KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCBpbnN0YW5jZW9mIFZpZXdHcm91cCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uSW50ZXJjZXB0VG91Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vblRvdWNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW50ZXJjZXB0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnRlcmNlcHRFdmVudC5wdXNoKGV2ZW50LmNsb25lKCkpOy8v6K6w5b2VZG93buaXtuWAmeeahGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVkU6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ludGVyY2VwdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uVG91Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgaW5zdGFuY2VvZiBWaWV3R3JvdXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbkludGVyY2VwdFRvdWNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW50ZXJjZXB0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnRlcmNlcHRFdmVudC5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vblRvdWNoRXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnRlcmNlcHRFdmVudC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uVG91Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEludGVyY2VwdEV2ZW50LmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCBpbnN0YW5jZW9mIFZpZXdHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQuZGlzcGF0Y2hUb3VjaEV2ZW50KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SW50ZXJjZXB0RXZlbnQubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgaW5zdGFuY2VvZiBWaWV3R3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0LmRpc3BhdGNoVG91Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX1VQOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9DQU5DRUw6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEludGVyY2VwdEV2ZW50LmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ludGVyY2VwdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vblRvdWNoRXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0LmRpc3BhdGNoVG91Y2hFdmVudChlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ludGVyY2VwdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uVG91Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5kaXNwYXRjaFRvdWNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SW50ZXJjZXB0RXZlbnQubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0ludGVyY2VwdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cblxuICAgICAgICBwdWJsaWMgb25JbnRlcmNlcHRNb3VzZUV2ZW50KGV2ZW50OiBNb3Rpb25FdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBvbk1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGRpc3BhdGNoTW91c2VFdmVudChldmVudDogTW90aW9uRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hY3Rpb24gPT09IE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PVVQgfHwgZXZlbnQuYWN0aW9uID09PSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfVVApIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0ICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3V0X2V2ZW50Ok1vdGlvbkV2ZW50ID1ldmVudC5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICBvdXRfZXZlbnQuYWN0aW9uID0gTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbk1vdXNlRXZlbnQob3V0X2V2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IHRoaXMuY2hpbGRyZW4gJiYgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkOiBWaWV3ID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubGF5b3V0SW5mby5vdXR0ZXJyZWN0LmNvbnRhaW5zKGV2ZW50LngsIGV2ZW50LnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCA9IGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvbl9ldmVudDpNb3Rpb25FdmVudCA9ZXZlbnQuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgb25fZXZlbnQuYWN0aW9uID0gTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09OO1xuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0IGluc3RhbmNlb2YgVmlld0dyb3VwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQub25Nb3VzZUV2ZW50KG9uX2V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbkludGVyY2VwdE1vdXNlRXZlbnQob25fZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbk1vdXNlRXZlbnQob25fZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQuZGlzcGF0Y2hNb3VzZUV2ZW50KG9uX2V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGlmKCF0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0LmxheW91dEluZm8ub3V0dGVycmVjdC5jb250YWlucyhldmVudC54LGV2ZW50LnkpKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG91dF9ldmVudDpNb3Rpb25FdmVudCA9ZXZlbnQuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgb3V0X2V2ZW50LmFjdGlvbiA9IE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PVVQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmbGcgPXRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQub25Nb3VzZUV2ZW50KG91dF9ldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxnO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uTW91c2VFdmVudChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISh0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0IGluc3RhbmNlb2YgVmlld0dyb3VwKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uTW91c2VFdmVudChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbkludGVyY2VwdE1vdXNlRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQub25Nb3VzZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQuZGlzcGF0Y2hNb3VzZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuXG4gICAgICAgIC8vIHB1YmxpYyBkaXNwYXRjaE1vdXNlRXZlbnQoZXZlbnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG5cbiAgICAgICAgLy8gICAgIGlmICghdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCB8fCB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0IGluc3RhbmNlb2YgVmlld0dyb3VwKSB7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIC8vICAgICAgICAgc3dpdGNoIChldmVudC5hY3Rpb24pIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfRE9XTjpcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyB0aGlzLmNoaWxkcmVuICYmIGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZDogVmlldyA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmxheW91dEluZm8ub3V0dGVycmVjdC5jb250YWlucyhldmVudC54LCBldmVudC55KSkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgPSBjaGlsZDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCBpbnN0YW5jZW9mIFZpZXdHcm91cCkpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uSW50ZXJjZXB0TW91c2VFdmVudChldmVudCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbk1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW50ZXJjZXB0ID0gcmVzdWx0O1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnRlcmNlcHRFdmVudC5wdXNoKGV2ZW50LmNsb25lKCkpOy8v6K6w5b2VZG93buaXtuWAmeeahGV2ZW50XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgIC8vICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX01PVkU6XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ludGVyY2VwdCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uTW91c2VFdmVudChldmVudCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgaW5zdGFuY2VvZiBWaWV3R3JvdXApKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbkludGVyY2VwdE1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzSW50ZXJjZXB0ID0gcmVzdWx0O1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnRlcmNlcHRFdmVudC5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbk1vdXNlRXZlbnQoZSk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RJbnRlcmNlcHRFdmVudC5sZW5ndGggPSAwO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uTW91c2VFdmVudChldmVudCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEludGVyY2VwdEV2ZW50LmZvckVhY2goZSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCBpbnN0YW5jZW9mIFZpZXdHcm91cCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQuZGlzcGF0Y2hNb3VzZUV2ZW50KGUpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SW50ZXJjZXB0RXZlbnQubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21DdXJyZW50VG91Y2hUYXJnZXQgaW5zdGFuY2VvZiBWaWV3R3JvdXApIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0LmRpc3BhdGNoTW91c2VFdmVudChldmVudCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgIC8vICAgICAgICAgICAgIGNhc2UgTW90aW9uRXZlbnQuQUNUSU9OX01PVVNFX09VVDpcbiAgICAgICAgLy8gICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfVVA6XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEludGVyY2VwdEV2ZW50LmZvckVhY2goZSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ludGVyY2VwdCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5vbk1vdXNlRXZlbnQoZSk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0LmRpc3BhdGNoTW91c2VFdmVudChlKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ludGVyY2VwdCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tQ3VycmVudFRvdWNoVGFyZ2V0Lm9uTW91c2VFdmVudChldmVudCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldC5kaXNwYXRjaE1vdXNlRXZlbnQoZXZlbnQpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbUN1cnJlbnRUb3VjaFRhcmdldCA9IG51bGw7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0SW50ZXJjZXB0RXZlbnQubGVuZ3RoID0gMDtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0ludGVyY2VwdCA9IGZhbHNlO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAvLyB9XG4gICAgfVxufSIsIlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3ZpZXcvaW1wbGVtZW50aW9uL1ZpZXdHcm91cC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZ3JhcGhpY3MvVXRpbC50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLndpZGdldCB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEFsaWduID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbjtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcblxuXG4gICAgaW1wb3J0IEFsaWduRWxtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsbWVudDtcbiAgICBpbXBvcnQgTWFyZ2luID0gYW5kcm9pZC5ncmFwaGljcy5NYXJnaW47XG5cbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcblxuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGV4cG9ydCBjbGFzcyBGcmFtZUxheW91dCBleHRlbmRzIFZpZXdHcm91cCB7XG5cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRJbmZvLnJlc2V0KGwsIHQsIHIsIGIsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICBsZXQgdmlld0l0ZW06IFZpZXc7XG5cbiAgICAgICAgICAgIGxldCBsZW5ndGg6IG51bWJlciA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZpZXdJdGVtID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dEl0ZW0odmlld0l0ZW0sbCx0LHIsYixjYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgICBcbiAgICAgICAgcHVibGljIGxheW91dEl0ZW0odmlld0l0ZW06VmlldyxsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG5cbiAgICAgICAgICAgIGxldCBwb2ludDogUG9pbnQgPSBuZXcgUG9pbnQodGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5sZWZ0LCB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0LnRvcCk7XG4gICAgICAgICAgICBsZXQgaW5uZXJyZWN0ID0gdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdDtcbiAgICAgICAgICAgIGxldCBsZW5ndGg6IG51bWJlciA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IG06IE1hcmdpbiA9IHZpZXdJdGVtLmxheW91dFBhcmFtcy5tYXJnaW47XG4gICAgICAgICAgICBzd2l0Y2ggKHZpZXdJdGVtLmdyYXZpdHkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuTGVmdDpcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQuc2V0KGlubmVycmVjdC5sZWZ0LGlubmVycmVjdC50b3ApO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5vZmZzZXQobS5tYXJnaW5MZWZ0LG0ubWFyZ2luVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LkF1dG86XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnNldChpbm5lcnJlY3QubGVmdCxpbm5lcnJlY3QudG9wKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LlJpZ2h0OlxuICAgICAgICAgICAgICAgICAgICBwb2ludC5zZXQoaW5uZXJyZWN0LnJpZ2h0IC0gdmlld0l0ZW0ud2lkdGgsIGlubmVycmVjdC50b3ApO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5vZmZzZXQoLW0ubWFyZ2luUmlnaHQsbS5tYXJnaW5Ub3ApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuVG9wOlxuICAgICAgICAgICAgICAgICAgICBwb2ludC5zZXQoaW5uZXJyZWN0LmxlZnQsaW5uZXJyZWN0LnRvcCk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50Lm9mZnNldChtLm1hcmdpbkxlZnQsbS5tYXJnaW5Ub3ApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuQm90dG9tOlxuICAgICAgICAgICAgICAgICAgICBwb2ludC5zZXQoaW5uZXJyZWN0LmxlZnQsIGlubmVycmVjdC5ib3R0b20gLSB2aWV3SXRlbS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5vZmZzZXQobS5tYXJnaW5MZWZ0LC1tLm1hcmdpbkJvdHRvbSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgR3Jhdml0eS5DZW50ZXI6XG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXBsID0gaW5uZXJyZWN0LmxlZnQrKHRoaXMubGF5b3V0SW5mby5pbm5lcnJlY3Qud2lkdGgtdmlld0l0ZW0ud2lkdGgpLzI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXB0ID0gaW5uZXJyZWN0LnRvcCAgKyAodGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5oZWlnaHQtdmlld0l0ZW0uaGVpZ2h0KS8yO1xuICAgICAgICAgICAgICAgICAgICBpZih0bXBsIDwgMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZih0bXB0IDwgMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXB0ID0wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnNldCh0bXBsLHRtcHQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcG9pbnQub2Zmc2V0KG0uZ2V0U3RhcnRYTWFyZ2luKCksIG0uZ2V0U3RhcnRZTWFyZ2luKCkpO1xuICAgICAgICAgICAgICAgIC8vIHBvaW50Lm9mZnNldChtLm1hcmdpbkxlZnQsbS5tYXJnaW5SaWdodClcbiAgICAgICAgICAgICAgICB2aWV3SXRlbS5vbkxheW91dChwb2ludC54LCBwb2ludC55LCBwb2ludC54ICsgdmlld0l0ZW0ud2lkdGgsIHBvaW50LnkgKyB2aWV3SXRlbS5oZWlnaHQsY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJDb250ZXh0LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi93aWRnZXQvRnJhbWVMYXlvdXQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWwvTG9nLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQuYXBwe1xuXG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgUGFkZGluZyA9IGFuZHJvaWQuZ3JhcGhpY3MuUGFkZGluZztcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgQWxpZ25FbG1lbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduRWxtZW50O1xuICAgIGltcG9ydCBNYXJnaW4gPSBhbmRyb2lkLmdyYXBoaWNzLk1hcmdpbjtcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IE9yaWVudGF0aW9uID0gYW5kcm9pZC5ncmFwaGljcy5PcmllbnRhdGlvbjtcbiAgICBpbXBvcnQgTGF5b3V0UGFyYW1zID0gYW5kcm9pZC52aWV3LkxheW91dFBhcmFtcztcbiAgICBpbXBvcnQgUmVuZGVyVHlwZSA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVuZGVyVHlwZTtcbiAgICBpbXBvcnQgUm9vdFZpZXcgPSBhbmRyb2lkLndpZGdldC5Sb290VmlldztcbiAgICBpbXBvcnQgTGluZWFyTGF5b3V0ID0gYW5kcm9pZC53aWRnZXQuTGluZWFyTGF5b3V0O1xuICAgIGltcG9ydCBGcmFtZUxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkZyYW1lTGF5b3V0O1xuICAgIGltcG9ydCBMb2cgPSBhbmRyb2lkLnV0aWwuTG9nO1xuXG4gICAgZXhwb3J0IGNsYXNzIEFjdGl2aXR5IGV4dGVuZHMgQ29udGV4dHtcbiAgICAgICAgcHJpdmF0ZSByb290VmlldyA6RnJhbWVMYXlvdXQgO1xuICAgICAgICBwcml2YXRlIGFjdGl2aXR5TWFuYWdlciA6QWN0aXZpdHlNYW5hZ2VyO1xuICAgICAgICBjb25zdHJ1Y3RvcihhbTpBY3Rpdml0eU1hbmFnZXIpe1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIGlmKGFtIGluc3RhbmNlb2YgQWN0aXZpdHlNYW5hZ2VyKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2aXR5TWFuYWdlciA9IGFtO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJjYW4ndCBjcmVhdGUgQWN0aXZpdHkgbmV3IFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yb290VmlldyA9IG5ldyBGcmFtZUxheW91dCh0aGlzKTtcbiAgICAgICAgICAgIGxldCBscCA6IExheW91dFBhcmFtcyA9IG5ldyBMYXlvdXRQYXJhbXMoTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCxMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5ULG51bGwpO1xuICAgICAgICAgICAgdGhpcy5yb290Vmlldy5sYXlvdXRQYXJhbXMgPSBscDtcbiAgICAgICAgICAgIC8vIHRoaXMucm9vdFZpZXcuYmFja2dyb3VuZCA9ICdsaWdodGJsdWUnO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgYXR0YXRjaFJvb3RWaWV3KHZpZXc6Um9vdFZpZXcpe1xuICAgICAgICAgICAgdmlldy5hZGRWaWV3KHRoaXMucm9vdFZpZXcsMCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIG9uQ3JlYXRlKGJ1bmRsZTpCdW5kbGUpe1xuICAgICAgICAgICAgTG9nLmQoXCJvbmNyZWF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBwcm90ZWN0ZWQgb25QYXVzZSgpe1xuICAgICAgICAgICAgTG9nLmQoXCJvblBhdXNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBvblJlc3VtZSgpe1xuICAgICAgICAgICAgTG9nLmQoJ29uUmVzdW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIG9uRGVzdG9yeSgpe1xuICAgICAgICAgICAgTG9nLmQoJ29uRGVzdG9yeScpO1xuICAgICAgICB9XG4gICAgICAgIHByb3RlY3RlZCBzZXRDb250ZW50Vmlldyh2aWV3OlZpZXcpe1xuICAgICAgICAgICAgdGhpcy5yb290Vmlldy5hZGRWaWV3KHZpZXcsMCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvdGVjdGVkIHN0YXJ0QWN0aXZpdHlGb3JSZXN1bHQoaW50ZW50OkludGVudCxidW5kbGU6QnVuZGxlLHJlcXVlc3RDb2RlOm51bWJlcixyZXN1bHRDb2RlOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXR5TWFuYWdlci5zZW5kU3RhcnRBY3Rpdml0eShpbnRlbnQsYnVuZGxlLHJlcXVlc3RDb2RlLHJlc3VsdENvZGUpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdmlldy9pbXBsZW1lbnRpb24vVmlld0dyb3VwLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL0ZyYW1lTGF5b3V0LnRzXCIgLz5cblxuXG5cbm5hbWVzcGFjZSBhbmRyb2lkLndpZGdldCB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEFsaWduID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbjtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcblxuXG4gICAgaW1wb3J0IEFsaWduRWxtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsbWVudDtcbiAgICBpbXBvcnQgTWFyZ2luID0gYW5kcm9pZC5ncmFwaGljcy5NYXJnaW47XG5cbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcblxuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgQW5pbWF0aW9uID0gYW5kcm9pZC52aWV3LmFuaW1hdGlvbi5BbmltYXRpb247XG5cbiAgICBleHBvcnQgY2xhc3MgUm9vdFZpZXcgZXh0ZW5kcyBGcmFtZUxheW91dCB7XG4gICAgICAgIHByaXZhdGUgX3c6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfaDogbnVtYmVyO1xuICAgICAgICBwcml2YXRlIF9sOiBudW1iZXI7XG4gICAgICAgIHByaXZhdGUgX3Q6IG51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfcm9vdEFuaWFtdGlvbjogQW5pbWF0aW9uO1xuICAgICAgICBzZXRJbmZvKGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9sID0gbGVmdDtcbiAgICAgICAgICAgIHRoaXMuX3QgPSB0b3A7XG4gICAgICAgICAgICB0aGlzLl93ID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9oID0gaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRQYXJhbXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZyA9IG5ldyBQYWRkaW5nKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGRpc3BhdGNoRHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgc3VwZXIuZGlzcGF0Y2hEcmF3KGNhbnZhcyk7XG4gICAgICAgICAgICB2YXIgcmVjdCA9IHRoaXMubGF5b3V0SW5mby5vdXR0ZXJyZWN0O1xuICAgICAgICAgICAgLy90ZXN0Q29kZVxuICAgICAgICAgICAgY2FudmFzLmRyYXdSZWN0KHJlY3Quc3RhcnRQb2ludCwgcmVjdC5lbmRQb2ludCwgZmFsc2UsICdibGFjaycpO1xuICAgICAgICB9XG4gICAgICAgIG9uTGF5b3V0KGw6IG51bWJlciwgdDogbnVtYmVyLCByOiBudW1iZXIsIGI6IG51bWJlciwgY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLm9uTGF5b3V0KGwsIHQsIHIsIGIsIGNhbnZhcyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIG9uaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN1cGVyLm9uaW52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLmJlZ2luKCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRHJhdyh0aGlzLl9jYW52YXMpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLmVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHJlcXVlc3RMYXlvdXQoKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGg6IE1lYXN1cmVTcGVjID0gbmV3IE1lYXN1cmVTcGVjKHRoaXMuX3csIExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpO1xuICAgICAgICAgICAgdmFyIGhlaWdodDogTWVhc3VyZVNwZWMgPSBuZXcgTWVhc3VyZVNwZWModGhpcy5faCwgTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuYmVnaW4oKTtcbiAgICAgICAgICAgIHZhciBzaXplOiBTaXplID0gdGhpcy5vbk1lYXN1cmUod2lkdGgsIGhlaWdodCwgdGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMub25MYXlvdXQodGhpcy5fbCwgdGhpcy5fdCwgdGhpcy5fbCArIHNpemUud2lkdGgsIHRoaXMuX3QgKyBzaXplLmhlaWdodCwgdGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5lbmQoKTtcbiAgICAgICAgICAgIHRoaXMub25pbnZhbGlkYXRlKCk7XG5cbiAgICAgICAgfVxuICAgICAgICBnZXQgbGVmdCgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2w7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHRvcCgpOiBudW1iZXIge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Q7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdztcbiAgICAgICAgfVxuICAgICAgICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faDtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc3RhcnRBbmltYXRpb24oYW5pbWF0aW9uOiBBbmltYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLl9zdGFydEFuaW1hdGlvbigpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuX3N0YXJ0QW5pbWF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9zdGFydEFuaW1hdGlvbigpOiB2b2lkIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhcnQgXCIgKyBEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLnN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yb290QW5pYW10aW9uICE9IG51bGwgJiYgdGhpcy5fcm9vdEFuaWFtdGlvbi5pc0FuaWFtdGlvbkVuZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yb290QW5pYW10aW9uLmR1cmF0aW9uICsgdGhpcy5fcm9vdEFuaWFtdGlvbi5zdGFydCA8IHRoaXMuYW5pbWF0aW9uLmR1cmF0aW9uICsgdGhpcy5hbmltYXRpb24uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdEFuaWFtdGlvbi5kdXJhdGlvbiA9IHRoaXMuYW5pbWF0aW9uLnN0YXJ0ICsgdGhpcy5hbmltYXRpb24uZHVyYXRpb24gLSB0aGlzLl9yb290QW5pYW10aW9uLnN0YXJ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcm9vdEFuaWFtdGlvbiA9IHRoaXMuYW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgX2FuaW1hdGUoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFuaW1hdGluZyBcIiArIHRoaXMuX3Jvb3RBbmlhbXRpb24pO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Jvb3RBbmlhbXRpb24gIT0gbnVsbCAmJiAhdGhpcy5fcm9vdEFuaWFtdGlvbi5pc0FuaWFtdGlvbkVuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yb290QW5pYW10aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVuZCBcIiArIERhdGUubm93KCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgYWRkVmlldyh2aWV3OiBWaWV3LCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHN1cGVyLmFkZFZpZXcodmlldywgaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBhdHRhY2hSZW5kZXIocjogQ2FudmFzKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMgPSByO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJBY3Rpdml0eS50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vd2lkZ2V0L1Jvb3RWaWV3LnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kZXZpY2UvRGV2aWNlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi92aWV3L2V2ZW50L01vdGlvbkV2ZW50LnRzXCIgLz5cblxuXG5uYW1lc3BhY2UgYW5kcm9pZC5hcHAge1xuICAgIGltcG9ydCBQYWRkaW5nID0gYW5kcm9pZC5ncmFwaGljcy5QYWRkaW5nO1xuICAgIGltcG9ydCBHcmF2aXR5ID0gYW5kcm9pZC5ncmFwaGljcy5HcmF2aXR5O1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBBbGlnbkVsbWVudCA9IGFuZHJvaWQuZ3JhcGhpY3MuQWxpZ25FbG1lbnQ7XG4gICAgaW1wb3J0IE1hcmdpbiA9IGFuZHJvaWQuZ3JhcGhpY3MuTWFyZ2luO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBPcmllbnRhdGlvbiA9IGFuZHJvaWQuZ3JhcGhpY3MuT3JpZW50YXRpb247XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgaW1wb3J0IFJlbmRlclR5cGUgPSBhbmRyb2lkLmdyYXBoaWNzLlJlbmRlclR5cGU7XG4gICAgaW1wb3J0IFJvb3RWaWV3ID0gYW5kcm9pZC53aWRnZXQuUm9vdFZpZXc7XG4gICAgaW1wb3J0IExpbmVhckxheW91dCA9IGFuZHJvaWQud2lkZ2V0LkxpbmVhckxheW91dDtcbiAgICBpbXBvcnQgRnJhbWVMYXlvdXQgPSBhbmRyb2lkLndpZGdldC5GcmFtZUxheW91dDtcbiAgICBpbXBvcnQgRGV2aWNlID0gYW5kcm9pZC5kZXZpY2UuRGV2aWNlO1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcblxuICAgIGV4cG9ydCBjbGFzcyBBY3Rpdml0eU1hbmFnZXIge1xuICAgICAgICBwcml2YXRlIHN0YWNrOiBBY3Rpdml0eVtdID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHByaXZhdGUgcm9vdFZpZXc6IFJvb3RWaWV3O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKGNhbnZhczpDYW52YXMpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdFZpZXcgPSBuZXcgUm9vdFZpZXcobnVsbCk7Ly8gbmVlZCB0byBiZSBhcHBsaWNhdGlvbiBjb250ZXh0XG4gICAgICAgICAgICB0aGlzLnJvb3RWaWV3LmF0dGFjaFJlbmRlcihjYW52YXMpO1xuICAgICAgICAgICAgdGhpcy5yb290Vmlldy5zZXRJbmZvKDAsMCxEZXZpY2Uud2lkdGgsRGV2aWNlLmhlaWdodCk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgc2VuZEV2ZW50KGV2ZW50Ok1vdGlvbkV2ZW50KXtcblxuICAgICAgICAgICAgaWYoZXZlbnQuYWN0aW9uID49IE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9ET1dOKXtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3RWaWV3LmRpc3BhdGNoTW91c2VFdmVudChldmVudCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3RWaWV3LmRpc3BhdGNoVG91Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNlbmRTdGFydEFjdGl2aXR5KGludGVudDogSW50ZW50LGJ1bmRsZTogQnVuZGxlLCByZXF1ZXN0Q29kZTogbnVtYmVyLCByZXN1bHRDb2RlOm51bWJlcikge1xuICAgICAgICAgICAgdmFyIHRhcmdldEFjdGl2aXR5ID0gdGhpcy5jcmVhdGVBY3Rpdml0eShpbnRlbnQuZ2V0Q2xhc3MoKSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudEFjdGl2aXR5OiBBY3Rpdml0eSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50QWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50QWN0aXZpdHlbJ29uUGF1c2UnXS5jYWxsKGN1cnJlbnRBY3Rpdml0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJvb3RWaWV3LnJlbW92ZUFsbFZpZXdzKCk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2godGFyZ2V0QWN0aXZpdHkpO1xuICAgICAgICAgICAgdGFyZ2V0QWN0aXZpdHlbJ2F0dGF0Y2hSb290VmlldyddLmNhbGwodGFyZ2V0QWN0aXZpdHksIHRoaXMucm9vdFZpZXcpO1xuICAgICAgICAgICAgdGFyZ2V0QWN0aXZpdHlbJ29uUmVzdW1lJ10uY2FsbCh0YXJnZXRBY3Rpdml0eSk7XG4gICAgICAgICAgICAvLyBUTyBETyAuLi4gIGxhbmNoIG1vZGVcbiAgICAgICAgICAgIHRhcmdldEFjdGl2aXR5WydvbkNyZWF0ZSddLmNhbGwodGFyZ2V0QWN0aXZpdHksYnVuZGxlKTtcbiAgICAgICAgICAgIC8vIHRoaXMucm9vdFZpZXcuYmFja2dyb3VuZCA9J3doaXRlJztcbiAgICAgICAgICAgIHRoaXMucm9vdFZpZXcuaW52YWxpZGF0ZSh0cnVlKTtcblxuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgY3JlYXRlQWN0aXZpdHkoYWN0aXZpdHlDbGFzczogYW55KTogQWN0aXZpdHkge1xuICAgICAgICAgICAgdmFyIGFjdGl2aXR5OiBBY3Rpdml0eSA9IG5ldyBhY3Rpdml0eUNsYXNzKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5O1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXRDdXJyZW50QWN0aXZpdHkoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoLTFdO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2FwcC9JbnRlbnQudHNcIiAvPlxuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiZ3JhcGhpY3MvQ2FudmFzLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2FwcC9BY3Rpdml0eU1hbmFnZXIudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdXRpbC9Mb2cudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdmlldy9ldmVudC9Nb3Rpb25FdmVudC50c1wiIC8+XG5cblxubmFtZXNwYWNlIGFuZHJvaWQge1xuICAgIGltcG9ydCBBY3Rpdml0eU1hbmFnZXIgPSBhbmRyb2lkLmFwcC5BY3Rpdml0eU1hbmFnZXI7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBSZW5kZXJUeXBlID0gYW5kcm9pZC5ncmFwaGljcy5SZW5kZXJUeXBlO1xuICAgIGltcG9ydCBJbnRlbnQgPSBhbmRyb2lkLmFwcC5JbnRlbnQ7XG4gICAgaW1wb3J0IExvZyA9IGFuZHJvaWQudXRpbC5Mb2c7XG4gICAgaW1wb3J0IERldmljZSA9IGFuZHJvaWQuZGV2aWNlLkRldmljZTtcbiAgICBpbXBvcnQgTW90aW9uRXZlbnQgPSBhbmRyb2lkLnZpZXcuZXZlbnQuTW90aW9uRXZlbnQ7XG4gICAgaW1wb3J0IEJ1bmRsZSA9IGFuZHJvaWQuYXBwLkJ1bmRsZTtcbiAgICBpbXBvcnQgQWN0aXZpdHkgPSBhbmRyb2lkLmFwcC5BY3Rpdml0eTtcbiAgICBleHBvcnQgY2xhc3MgU3RhcnRVcCB7XG4gICAgICAgIHByaXZhdGUgYWN0aXZpdHlNYW5hZ2VyOiBBY3Rpdml0eU1hbmFnZXI7XG4gICAgICAgIHByaXZhdGUgY2FudmFzOiBDYW52YXM7XG4gICAgICAgIHByaXZhdGUgY29uZmlnOiBhbnk7XG4gICAgICAgIHByaXZhdGUgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkQ29uZmlnKCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmdldFJvb3RFbGVtZW50KCkpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0RmlsbCgpID09PSAncGFyZW50Jykge1xuICAgICAgICAgICAgICAgIERldmljZS53aWR0aCA9IHRoaXMuZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICBEZXZpY2UuaGVpZ2h0ID0gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmdldFJlbmRlclR5cGUoKSA9PSAnY2FudmFzJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcyh0aGlzLmVsZW1lbnQsIFJlbmRlclR5cGUuQ2FudmFzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKHRoaXMuZWxlbWVudCwgUmVuZGVyVHlwZS5TdmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3Rpdml0eU1hbmFnZXIgPSBuZXcgQWN0aXZpdHlNYW5hZ2VyKHRoaXMuY2FudmFzKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5vbnRvdWNoc3RhcnQ9bnVsbDtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5vbnRvdWNobW92ZT1udWxsO1xuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50Lm9udG91Y2hlbmQ9bnVsbDtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5vbnRvdWNoY2FuY2VsPW51bGw7XG4gICAgICAgICAgICAvLyB0aGlzLmVsZW1lbnQub25tb3VzZWRvd249bnVsbDtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5vbm1vdXNlbW92ZT1udWxsO1xuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50Lm9ubW91c2V1cD1udWxsO1xuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50Lm9ubW91c2VvdXQ9bnVsbDtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5vbm1vdXNlb3Zlcj1udWxsO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQub250b3VjaHN0YXJ0ID0gdGhpcy5vbnRvdWNoLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQub250b3VjaG1vdmUgPSB0aGlzLm9udG91Y2guYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbnRvdWNoZW5kID0gdGhpcy5vbnRvdWNoLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQub250b3VjaGNhbmNlbCA9IHRoaXMub250b3VjaC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50Lm9ubW91c2Vkb3duID0gdGhpcy5vbnRvdWNoLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQub25tb3VzZW1vdmUgPSB0aGlzLm9udG91Y2guYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbm1vdXNldXAgPSB0aGlzLm9udG91Y2guYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbm1vdXNlb3V0ID0gdGhpcy5vbnRvdWNoLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQub25tb3VzZW92ZXIgPSB0aGlzLm9udG91Y2guYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5vbmNsaWNrID0gdGhpcy5vbnRvdWNoLmJpbmQodGhpcyk7XG5cblxuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9udG91Y2guYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAvLyB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbnRvdWNoLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vbnRvdWNoLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5vbnRvdWNoLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgLy8gdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub250b3VjaC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9udG91Y2guYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAvLyB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub250b3VjaC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMub250b3VjaC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLm9udG91Y2guYmluZCh0aGlzKSk7XG5cbiAgICAgICAgfVxuICAgICAgICBwcml2YXRlIG9udG91Y2goZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgICAgICAgIGxldCBtZXZlbnQ6IE1vdGlvbkV2ZW50ID0gbmV3IE1vdGlvbkV2ZW50KDAsIDAsIDApO1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRvdWNoc3RhcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RyPSBcIlRvdWNoIHN0YXJ0ZWQgKFwiICsgZXZlbnQudG91Y2hlc1swXS5jbGllbnRYICsgXCIsXCIgKyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgbWV2ZW50ID0gbmV3IE1vdGlvbkV2ZW50KGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCwgZXZlbnQudG91Y2hlc1swXS5jbGllbnRZLCBNb3Rpb25FdmVudC5BQ1RJT05fRE9XTik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgICAgICAgICAgICBtZXZlbnQgPSBuZXcgTW90aW9uRXZlbnQoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCwgZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSwgTW90aW9uRXZlbnQuQUNUSU9OX1VQKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRvdWNoY2FuY2VsXCI6XG4gICAgICAgICAgICAgICAgICAgIG1ldmVudCA9IG5ldyBNb3Rpb25FdmVudChldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLCBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZLCBNb3Rpb25FdmVudC5BQ1RJT05fQ0FOQ0VMKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRvdWNobW92ZVwiOlxuICAgICAgICAgICAgICAgICAgICBtZXZlbnQgPSBuZXcgTW90aW9uRXZlbnQoZXZlbnQudG91Y2hlc1swXS5jbGllbnRYLCBldmVudC50b3VjaGVzWzBdLmNsaWVudFksIE1vdGlvbkV2ZW50LkFDVElPTl9NT1ZFKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICAgICAgICAgICAgICAgICAgbWV2ZW50ID0gbmV3IE1vdGlvbkV2ZW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFksIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9ET1dOKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgbWV2ZW50ID0gbmV3IE1vdGlvbkV2ZW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFksIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9NT1ZFKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2V1cCc6XG4gICAgICAgICAgICAgICAgICAgIG1ldmVudCA9IG5ldyBNb3Rpb25FdmVudChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZLCBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfVVApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtb3VzZW91dCc6XG4gICAgICAgICAgICAgICAgICAgIG1ldmVudCA9IG5ldyBNb3Rpb25FdmVudChldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZLCBNb3Rpb25FdmVudC5BQ1RJT05fTU9VU0VfT1VUKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgICAgICAgICAgICAgICAgbWV2ZW50ID0gbmV3IE1vdGlvbkV2ZW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFksIE1vdGlvbkV2ZW50LkFDVElPTl9NT1VTRV9PVkVSKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgICAgICAgICBtZXZlbnQgPSBuZXcgTW90aW9uRXZlbnQoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSxNb3Rpb25FdmVudC5BQ1RJT05fQ0xJQ0spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV2ZW50LmVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHJlY3QgPSB0aGlzLmVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICAgICAgICAgIG1ldmVudC54ID0gbWV2ZW50LnggLSBlbGVtZW50cmVjdFswXS5sZWZ0O1xuICAgICAgICAgICAgbWV2ZW50LnkgPSBtZXZlbnQueSAtIGVsZW1lbnRyZWN0WzBdLnRvcDtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZpdHlNYW5hZ2VyLnNlbmRFdmVudChtZXZlbnQpO1xuICAgICAgICAgICAgLy8gTG9nLmQoJ29udG91Y2ggJyArIHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHN0YXJ0KCkge1xuICAgICAgICAgICAgdmFyIGludGVudDogSW50ZW50ID0gbmV3IEludGVudCgpO1xuICAgICAgICAgICAgaW50ZW50LnNldENsYXNzKG51bGwsIHRoaXMuZ2V0TGF1bmNoQWN0aXZpdHkoKSk7XG4gICAgICAgICAgICB2YXIgYnVuZGxlID0gbmV3IGFuZHJvaWQuYXBwLkJ1bmRsZSgpO1xuICAgICAgICAgICAgYnVuZGxlLnB1dERlZmF1bHQodGhpcy5nZXRMYXVuY2hQYXJhbXMoKSk7XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXR5TWFuYWdlci5zZW5kU3RhcnRBY3Rpdml0eShpbnRlbnQsIGJ1bmRsZSwgMCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBnZXRMYXVuY2hBY3Rpdml0eSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5sYXVuY2hBY3Rpdml0eS50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBnZXRMYXVuY2hQYXJhbXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcubGF1bmNoQWN0aXZpdHkucGFyYW1zO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgZ2V0Um9vdEVsZW1lbnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWcucm9vdGNvbnRhaW5lci50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZSBnZXRSZW5kZXJUeXBlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnJlbmRlcnR5cGUgPyB0aGlzLmNvbmZpZy5yZW5kZXJ0eXBlLnRhcmdldCA6ICdzdmcnO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgZ2V0RmlsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5maWxsO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGUgbG9hZENvbmZpZygpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gd2luZG93WydtYWluZmVzdCddLmNvbmZpZztcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgZ2V0Q3VycmVudEFjdGl2aXR5KCk6QWN0aXZpdHl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpdml0eU1hbmFnZXIuZ2V0Q3VycmVudEFjdGl2aXR5KCk7XG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuIiwibmFtZXNwYWNlIGFuZHJvaWQuZGF0YWJhc2Uge1xuXG4gICAgZXhwb3J0ICBjbGFzcyBEYXRhU2V0T2JzZXJ2ZXIge1xuXG4gICAgICAgIHB1YmxpYyBvbkNoYW5nZWQoKSB7XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25JbnZhbGlkYXRlZCgpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiRGF0YVNldE9ic2VydmVyLnRzXCIgLz5cblxubmFtZXNwYWNlIGFuZHJvaWQuZGF0YWJhc2Uge1xuICAgIGV4cG9ydCAgY2xhc3MgT2JzZXJ2YWJsZTxUPntcbiAgICAgICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1PYnNlcnZlcnM6IEFycmF5PFQ+ID0gbmV3IEFycmF5PFQ+KCk7XG4gICAgICAgIHB1YmxpYyByZWdpc3Rlck9ic2VydmVyKG9ic2VydmVyOiBUKTogdm9pZCB7XG4gICAgICAgICAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJUaGUgb2JzZXJ2ZXIgaXMgbnVsbCBvciB1bmRlZmluZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubU9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJPYnNlcnZlciBcIiArIG9ic2VydmVyICsgXCIgaXMgYWxyZWFkeSByZWdpc3RlcmVkIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tT2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyB1bnJlZ2lzdGVyT2JzZXJ2ZXIob2JzZXJ2ZXI6IFQpOiB2b2lkIHtcbiAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIlRoZSBvYnNlcnZlciBpcyBudWxsIG9yIHVuZGVmaW5lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaW5kZXg6IG51bWJlciA9IHRoaXMubU9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIk9ic2VydmVyIFwiICsgb2JzZXJ2ZXIgKyBcIiB3YXMgbm90IHJlZ2lzdGVyZWQgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1PYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgdW5yZWdpc3RlckFsbCgpIHtcbiAgICAgICAgICAgIHRoaXMubU9ic2VydmVycy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGV4cG9ydCBjbGFzcyBEYXRhU2V0T2JzZXJ2YWJsZSBleHRlbmRzIE9ic2VydmFibGU8RGF0YVNldE9ic2VydmVyPntcbiAgICAgICAgcHVibGljIG5vdGlmeUNoYW5nZWQoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLm1PYnNlcnZlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1PYnNlcnZlcnNbaV0ub25DaGFuZ2VkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBub3RpZnlJbnZhbGlkYXRlZCgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IHRoaXMubU9ic2VydmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHRoaXMubU9ic2VydmVyc1tpXS5vbkludmFsaWRhdGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGF0YWJhc2UvRGF0YVNldE9ic2VydmFibGUudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC5hZGFwdGVyIHtcbiAgICBpbXBvcnQgRGF0YVNldE9ic2VydmFibGUgPSBhbmRyb2lkLmRhdGFiYXNlLkRhdGFTZXRPYnNlcnZhYmxlO1xuICAgIGltcG9ydCBEYXRhU2V0T2JzZXJ2ZXIgPSBhbmRyb2lkLmRhdGFiYXNlLkRhdGFTZXRPYnNlcnZlcjtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGV4cG9ydCAgY2xhc3MgQWRhcHRlciB7XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9kYXRhYmFzZS9EYXRhU2V0T2JzZXJ2YWJsZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLmFkYXB0ZXIge1xuICAgIGltcG9ydCBEYXRhU2V0T2JzZXJ2YWJsZSAgPSBhbmRyb2lkLmRhdGFiYXNlLkRhdGFTZXRPYnNlcnZhYmxlO1xuICAgIGltcG9ydCBEYXRhU2V0T2JzZXJ2ZXIgPSBhbmRyb2lkLmRhdGFiYXNlLkRhdGFTZXRPYnNlcnZlcjtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3UGFnZUFkYXB0ZXIge1xuICAgIHByaXZhdGUgbURhdGFTZXRPYnNlcnZhYmxlIDpEYXRhU2V0T2JzZXJ2YWJsZSA9bmV3IERhdGFTZXRPYnNlcnZhYmxlKCk7XG5cdHByaXZhdGUgbVZpZXdDYWNoZSA6QXJyYXk8Vmlld0luZm8+ICA9IG5ldyBBcnJheTxWaWV3SW5mbz4oKTtcblx0cHJpdmF0ZSAgbVNob3VsZENhY2hlIDpib29sZWFuPSBmYWxzZTtcblxuXHRwdWJsaWMgWEJhc2VBZGFwdGVyKCkge1xuXHR9XG5cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogZG9uJ3QgdXNlIHRoaXMgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0IHJlZ2lzdGVyRGF0YVNldE9ic2VydmVyKG9ic2VydmVyOkRhdGFTZXRPYnNlcnZlciApIHtcblx0XHR0aGlzLm1EYXRhU2V0T2JzZXJ2YWJsZS5yZWdpc3Rlck9ic2VydmVyKG9ic2VydmVyKTtcblx0fVxuXG5cdCB1bnJlZ2lzdGVyRGF0YVNldE9ic2VydmVyKG9ic2VydmVyOkRhdGFTZXRPYnNlcnZlciApIHtcblx0XHR0aGlzLm1EYXRhU2V0T2JzZXJ2YWJsZS51bnJlZ2lzdGVyT2JzZXJ2ZXIob2JzZXJ2ZXIpO1xuXHR9XG5cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0cHVibGljIG5vdGlmeURhdGFTZXRDaGFuZ2VkKCkge1xuXHRcdHRoaXMubURhdGFTZXRPYnNlcnZhYmxlLm5vdGlmeUNoYW5nZWQoKTtcblx0fVxuXHRcblx0cHVibGljICBub3RpZnlEYXRhU2V0SW52YWxpZGF0ZWQoKSB7XG5cdFx0dGhpcy5tRGF0YVNldE9ic2VydmFibGUubm90aWZ5SW52YWxpZGF0ZWQoKTtcblx0fVxuXHQvKioqXG5cdCAqIHNldCBjYWNoZVxuXHQgKiBcblx0ICogQHBhcmFtIGVuYWJsZVxuXHQgKi9cblx0cHVibGljICBzZXRDYWNoZUVuYWJsZSggZW5hYmxlOmJvb2xlYW4pIHtcblx0XHR0aGlzLm1TaG91bGRDYWNoZSA9IGVuYWJsZTtcblx0XHRpZiAoIXRoaXMubVNob3VsZENhY2hlKSB7XG5cdFx0XHR0aGlzLm1WaWV3Q2FjaGUubGVuZ3RoID0wO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhYnN0cmFjdCAgZ2V0Q291bnQoKTpudW1iZXI7XG5cblxuXHRwdWJsaWMgYWJzdHJhY3QgIGdldEl0ZW0oIHBvc2l0aW9uOm51bWJlcik6YW55O1xuXG5cdHB1YmxpYyBhYnN0cmFjdCAgZGVzdG9yeUl0ZW0ocG9zaXRpb246bnVtYmVyLCAgY29udGFpbmVyOlZpZXcpO1xuXG5cdHB1YmxpYyBhYnN0cmFjdCAgaW5zdGFudGlhdGVJdGVtKCBwb3NpdGlvbjpudW1iZXIsXG5cdFx0XHRjb250YWluZXI6VmlldywgY29udGVudFZpZXc6Vmlldyk6VmlldztcblxuXHQgaW5pdEl0ZW0ocG9zaXRpb246bnVtYmVyLCAgY29udGFpbmVyOlZpZXcpOlZpZXcge1xuXHRcdGxldCB2aWV3OlZpZXcgPSBudWxsO1xuXHRcdGlmICh0aGlzLm1TaG91bGRDYWNoZSkge1xuXHRcdFx0Zm9yIChsZXQgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5tVmlld0NhY2hlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZm86Vmlld0luZm8gID0gdGhpcy5tVmlld0NhY2hlW2ldO1xuXHRcdFx0XHRpZiAoaW5mbyAhPSBudWxsICYmIGluZm8ucG9zaXRpb24gPT0gcG9zaXRpb24pIHtcblx0XHRcdFx0XHR2aWV3ID0gaW5mby52aWV3O1xuXHRcdFx0XHRcdGlmICh2aWV3ICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmluc3RhbnRpYXRlSXRlbShwb3NpdGlvbiwgY29udGFpbmVyLCB2aWV3KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh2aWV3ID09IG51bGwpIHtcblx0XHRcdFx0dmlldyA9IHRoaXMuaW5zdGFudGlhdGVJdGVtKHBvc2l0aW9uLCBjb250YWluZXIsIG51bGwpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5tVmlld0NhY2hlLnB1c2gobmV3IFZpZXdJbmZvKHZpZXcsIHBvc2l0aW9uKSk7XG5cdFx0fVxuXHRcdGlmICh2aWV3ID09IG51bGwpIHtcblx0XHRcdHZpZXcgPSB0aGlzLmluc3RhbnRpYXRlSXRlbShwb3NpdGlvbiwgY29udGFpbmVyLCBudWxsKTtcblx0XHR9XG5cdFx0cmV0dXJuIHZpZXc7XG5cdH1cblx0LyoqXG5cdCAqIHVudXNlZnVsIG1ldGhvZHMgY3VycmVudGx5XG5cdCAqL1xuXG5cdHB1YmxpYyAgIGJlZ2luVXBkYXRhKCl7fVxuXG5cdC8qKlxuXHQgKiB1bnVzZWZ1bCBtZXRob2RzIGN1cnJlbnRseVxuXHQgKi9cblxuXHRwdWJsaWMgICBmaW5pc2hVcGRhdGEoKXt9XG5cblx0XG4gICAgfVxuICAgIGV4cG9ydCBjbGFzcyBWaWV3SW5mbyB7XG5cdFx0dmlldzpWaWV3O1xuXHRcdHBvc2l0aW9uOm51bWJlcjtcblxuXHRcdGNvbnN0cnVjdG9yKCB2OlZpZXcsICBwb3M6bnVtYmVyKSB7XG5cdFx0XHR0aGlzLnZpZXcgPSB2O1xuXHRcdFx0dGhpcy5wb3NpdGlvbiA9IHBvcztcblx0XHR9XG5cdH1cbn0iLCJuYW1lc3BhY2UgYW5kcm9pZC5hcHB7XG4gICAgZXhwb3J0IGNsYXNzIEJ1bmRsZXtcbiAgICAgICAgcHJpdmF0ZSBtYXA6YW55ID0ge307XG4gICAgICAgIHB1YmxpYyBwdXQoa2V5OnN0cmluZyx2YWx1ZTphbnkpe1xuICAgICAgICAgICAgdGhpcy5tYXBba2V5XT0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHB1dERlZmF1bHQodmFsdWU6YW55KXtcbiAgICAgICAgICAgIHRoaXMubWFwWydkZWZhdWx0J109dmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIGdldERlZmF1bHQoKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcFsnZGVmYXVsdCddO1xuICAgICAgICB9XG4gICAgfVxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLmdyYXBoaWNzIHtcbiAgICBleHBvcnQgZW51bSBBbGlnbiB7XG4gICAgICAgIExFRlQgPSAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRleHQgaXMgZHJhd24gY2VudGVyZWQgaG9yaXpvbnRhbGx5IG9uIHRoZSB4LHkgb3JpZ2luXG4gICAgICAgICAqL1xuICAgICAgICBDRU5URVIgPSAxLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRleHQgaXMgZHJhd24gdG8gdGhlIGxlZnQgb2YgdGhlIHgseSBvcmlnaW5cbiAgICAgICAgICovXG4gICAgICAgIFJJR0hUID0gMlxuXG4gICAgfVxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLmdyYXBoaWNzIHtcblxuICAgICAgZXhwb3J0IGNsYXNzIEFsaWduRWxtZW50e1xuICAgICAgICBwb3NpdGlvbjpQb3NpdGlvbjtcbiAgICAgICAgZWxlbWVudDpFbGVtZW50O1xuICAgICAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjpQb3NpdGlvbixlbGVtZW50OkVsZW1lbnQpe1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9cG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlJlY3QudHNcIiAvPlxuXG5tb2R1bGUgYW5kcm9pZC5ncmFwaGljcyB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IEZvbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkZvbnQ7XG4gICAgaW1wb3J0IFN0cm9rZVN0eWxlID0gYW5kcm9pZC5ncmFwaGljcy5TdHJva2VTdHlsZTtcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgdG8gY2FudmFzLlxuICAgICAqL1xuICAgIGV4cG9ydCBjbGFzcyBDYW52YXNSZW5kZXJFbmdpbmUge1xuXG4gICAgICAgIHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgICAgICBwcml2YXRlIF9jYW52YXM6IGFueTtcbiAgICAgICAgcHJpdmF0ZSBfY2FudmFzMmQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICAgICAgICBwcml2YXRlIF9jbGlwUmVjdDogUmVjdDtcblxuICAgICAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldCBhbHBoYSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5nbG9iYWxBbHBoYSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVnaW5SZW5kZXIoKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZFJlbmRlcigpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIHNhdmUoKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2F2ZScpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuc2F2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdG9yZSgpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwicmVzdG9yZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZ2V0SW1hZ2VEYXRhKHN4OiBudW1iZXIsIHN5OiBudW1iZXIsIHN3OiBudW1iZXIsIHNoOiBudW1iZXIpOiBJbWFnZURhdGEge1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FudmFzMmQuZ2V0SW1hZ2VEYXRhKHN4LCBzeSwgc3csIHNoKTtcbiAgICAgICAgfVxuICAgICAgICBwdXRJbWFnZURhdGEoaW1hZ2VkYXRhOiBJbWFnZURhdGEsIGR4OiBudW1iZXIsIGR5OiBudW1iZXIsIGRpcnR5WD86IG51bWJlciwgZGlydHlZPzogbnVtYmVyLCBkaXJ0eVdpZHRoPzogbnVtYmVyLCBkaXJ0eUhlaWdodD86IG51bWJlcik6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQucHV0SW1hZ2VEYXRhKGltYWdlZGF0YSwgZHgsIGR5LCBkaXJ0eVgsIGRpcnR5WSwgZGlydHlXaWR0aCwgZGlydHlIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGNsaXAocmVjdDogUmVjdCkge1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5yZWN0KHJlY3QubGVmdCwgcmVjdC50b3AsIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTs7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5jbGlwKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Vmlld3BvcnRTaXplKHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgICAgICAgICBsZXQgX2RldmljZVBpeGVsUmF0aW86IG51bWJlciA9IDI7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMud2lkdGggPSB3ICogX2RldmljZVBpeGVsUmF0aW87XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gaCAqIF9kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLndpZHRoID0gdyArIFwicHhcIjtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgXCJweFwiO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuc2NhbGUoX2RldmljZVBpeGVsUmF0aW8sIF9kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBlbGVtZW50KCk6IEVsZW1lbnQge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbnZhcztcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdFbGxpcHNlKGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHJ4OiBudW1iZXIsIHJ5OiBudW1iZXIsIGNsYXNzTmFtZT86IHN0cmluZywgc3R5bGU/OiBhbnkpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlciwgY29sb3I6IHN0cmluZywgZmlsbDogYm9vbGVhbikge1xuICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnN0cm9rZVJlY3QoeCwgeSwgdywgaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgZHJhd0xpbmUoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgc3Ryb2tlc3R5bGU6IFN0cm9rZVN0eWxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQubGluZVRvKHgyLCB5Mik7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5zdHJva2VTdHlsZSA9IHN0cm9rZXN0eWxlLnN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQubGluZVdpZHRoID0gc3Ryb2tlc3R5bGUuc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5zdHJva2UoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0xpbmVzKHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdLCBzdHJva2VzdHlsZTogU3Ryb2tlU3R5bGUpIHtcbiAgICAgICAgICAgIGlmICh4cyAhPT0gbnVsbCAmJiB5cyAhPT0gbnVsbCAmJiB4cy5sZW5ndGggPT09IHlzLmxlbmd0aCAmJiB4cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuc3Ryb2tlU3R5bGUgPSBzdHJva2VzdHlsZS5zdHJva2VDb2xvcjtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5saW5lV2lkdGggPSBzdHJva2VzdHlsZS5zdHJva2VXaWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5tb3ZlVG8oeHNbMF0sIHlzWzBdKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHhzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmxpbmVUbyh4c1tpXSwgeXNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdQb2x5Z29uKHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdLCBjb2xvcjogc3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQubW92ZVRvKHhzWzBdLCB5c1swXSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHhzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQubGluZVRvKHhzW2ldLCB5c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmZpbGwoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdQaWUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgcjogbnVtYmVyLCBzdGFydEFuZ2xlOiBudW1iZXIsIHN3ZWVwQW5nbGU6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuc2F2ZSgpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5tb3ZlVG8oY3gsIGN5KTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmFyYyhjeCwgY3ksIHIsIHN0YXJ0QW5nbGUsIHN0YXJ0QW5nbGUgKyBzd2VlcEFuZ2xlKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmxpbmVUbyhjeCwgY3kpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmZpbGwoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnJvdGF0ZShzdGFydEFuZ2xlKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnJlc3RvcmUoKTtcblxuICAgICAgICB9XG5cblxuICAgICAgICBkcmF3RG9udXQoY3g6IG51bWJlciwgY3k6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIGlubmVyUmFkaXVzOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgc3dlZXBBbmdsZTogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XG4gICAgICAgICAgICAvLyB0aGlzLmRyYXdQaWUoY3gsIGN5LCByYWRpdXMsIHN0YXJ0QW5nbGUsIHN3ZWVwQW5nbGUsIGNvbG9yKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZHJhd1BpZShjeCwgY3ksIGlubmVyUmFkaXVzLCAwLCBNYXRoLlBJICogMiwgJ3JnYmEoMjU1LDI1NSwyNTUsMSknKTtcbiAgICAgICAgICAgIGxldCBlbmRBbmdsZTogbnVtYmVyID0gc3RhcnRBbmdsZSArIHN3ZWVwQW5nbGU7XG4gICAgICAgICAgICBsZXQgcDEgPSBuZXcgUG9pbnQoY3gsIGN5KTtcbiAgICAgICAgICAgIHAxLnggKz0gaW5uZXJSYWRpdXMgKiBNYXRoLmNvcyhzdGFydEFuZ2xlKTtcbiAgICAgICAgICAgIHAxLnkgKz0gaW5uZXJSYWRpdXMgKiBNYXRoLnNpbihzdGFydEFuZ2xlKTtcbiAgICAgICAgICAgIGxldCBwMiA9IG5ldyBQb2ludChjeCwgY3kpO1xuICAgICAgICAgICAgcDIueCArPSBpbm5lclJhZGl1cyAqIE1hdGguY29zKGVuZEFuZ2xlKTtcbiAgICAgICAgICAgIHAyLnkgKz0gaW5uZXJSYWRpdXMgKiBNYXRoLnNpbihlbmRBbmdsZSk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQubW92ZVRvKHAxLngsIHAxLnkpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuYXJjKGN4LCBjeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuYXJjKGN4LCBjeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlLCBzdGFydEFuZ2xlLCB0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZmlsbCgpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd1N0cmluZyhzOiBzdHJpbmcsIHB0OiBQb2ludCwgZm9udDogRm9udCkge1xuICAgICAgICAgICAgaWYgKGZvbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5mb250ID0gZm9udC5mb250U2l6ZSArICdweCAnICsgZm9udC5mb250RmFtaWx5O1xuICAgICAgICAgICAgICAgIHZhciBncmFkaWVudCA9IHRoaXMuX2NhbnZhczJkLmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIHRoaXMuX2NhbnZhcy53aWR0aCwgMCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvbnQuZm9udENvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLjAsIGZvbnQuZm9udENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZmlsbFRleHQocywgcHQueCwgcHQueSk7XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3U3RyaW5nUm90YXRlZChzOiBzdHJpbmcsIHB0OiBQb2ludCwgY2VudGVyOiBQb2ludCwgYW5nbGU6IG51bWJlciwgZm9udDogRm9udCkge1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuc2F2ZSgpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQudGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC50cmFuc2xhdGUoY2VudGVyLngsIGNlbnRlci55KTtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnJvdGF0ZShNYXRoLlBJIC8gMTgwICogYW5nbGUpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQudHJhbnNsYXRlKC1jZW50ZXIueCwgLWNlbnRlci55KTtcbiAgICAgICAgICAgIGlmIChmb250KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZm9udCA9IGZvbnQuZm9udFNpemUgKyAncHggJyArIGZvbnQuZm9udEZhbWlseTtcbiAgICAgICAgICAgICAgICB2YXIgZ3JhZGllbnQgPSB0aGlzLl9jYW52YXMyZC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIDApO1xuICAgICAgICAgICAgICAgIGlmIChmb250LmZvbnRDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMS4wLCBmb250LmZvbnRDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmZpbGxTdHlsZSA9IGdyYWRpZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLmZpbGxUZXh0KHMsIHB0LngsIHB0LnkpO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVhc3VyZVN0cmluZyhzOiBzdHJpbmcsIGZvbnQ6IEZvbnQsIG1heFNpemU6IG51bWJlciA9IDApOiBTaXplIHtcbiAgICAgICAgICAgIHZhciBzeiA9IG5ldyBTaXplKDAsIDApO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQuZm9udCA9IGZvbnQuZm9udFNpemUgKyBcInB4XCIgKyBcIiBcIiArIGZvbnQuZm9udEZhbWlseTtcbiAgICAgICAgICAgIHZhciB0bTogVGV4dE1ldHJpY3MgPSB0aGlzLl9jYW52YXMyZC5tZWFzdXJlVGV4dChzKTtcbiAgICAgICAgICAgIHN6LndpZHRoID0gdG0ud2lkdGg7XG4gICAgICAgICAgICBzei5oZWlnaHQgPSBmb250LmZvbnRTaXplO1xuICAgICAgICAgICAgcmV0dXJuIHN6O1xuICAgICAgICB9XG5cblxuICAgICAgICBkcmF3SW1hZ2UoaW1hZ2U6IGFueSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG5cblxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlKCkge1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2NhbnZhcyk7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIH1cblxuXG4gICAgICAgIG1vdmVUbyh4Om51bWJlcix5Om51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5tb3ZlVG8oeCx5KTtcbiAgICAgICAgfVxuICAgICAgICBzY2FsZShzeDogbnVtYmVyLCBzeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLl9jYW52YXMyZC5zY2FsZShzeCwgc3kpO1xuICAgICAgICB9XG4gICAgICAgIHJvdGF0ZShkZWdyZWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzMmQucm90YXRlKGRlZ3JlZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhczJkLnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgfVxuXG5cblxuXG4gICAgfVxufVxuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiUmVjdC50c1wiIC8+XG5cbm1vZHVsZSBhbmRyb2lkLmdyYXBoaWNzIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgRm9udCA9IGFuZHJvaWQuZ3JhcGhpY3MuRm9udDtcbiAgICBpbXBvcnQgU3Ryb2tlU3R5bGUgPSBhbmRyb2lkLmdyYXBoaWNzLlN0cm9rZVN0eWxlO1xuICAgIC8qKlxuICAgICAqIFJlbmRlciB0byBzdmcuXG4gICAgICovXG4gICAgZXhwb3J0IGNsYXNzIFN2Z1JlbmRlckVuZ2luZSB7XG4gICAgICAgIHByaXZhdGUgc3RhdGljIHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxuICAgICAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICAgICAgcHJpdmF0ZSBfc3ZnOiBFbGVtZW50O1xuICAgICAgICBwcml2YXRlIF90ZXh0OiBTVkdUZXh0RWxlbWVudDtcbiAgICAgICAgcHJpdmF0ZSBfdGV4dEdyb3VwOiBTVkdHRWxlbWVudDtcbiAgICAgICAgcHJpdmF0ZSBfZGVmczogU1ZHRGVmc0VsZW1lbnQ7XG5cbiAgICAgICAgLy8gXG4gICAgICAgIHByaXZhdGUgX2ZpbGw6IHN0cmluZztcbiAgICAgICAgcHJpdmF0ZSBfc3Ryb2tlOiBzdHJpbmc7XG4gICAgICAgIHByaXZhdGUgX3RleHRGaWxsOiBzdHJpbmc7XG5cbiAgICAgICAgcHJpdmF0ZSBfc3Ryb2tlV2lkdGg6IG51bWJlciA9IDE7XG5cbiAgICAgICAgcHJpdmF0ZSBfZm9udFNpemU6IHN0cmluZyA9IG51bGw7XG4gICAgICAgIHByaXZhdGUgX2ZvbnRGYW1pbHk6IHN0cmluZyA9IG51bGw7XG5cbiAgICAgICAgcHJpdmF0ZSBfZ3JvdXA6IEVsZW1lbnQ7XG4gICAgICAgIHByaXZhdGUgX2NsaXBSZWN0OiBSZWN0O1xuICAgICAgICBwcml2YXRlIHN0YXRpYyBfaXNmZjogYm9vbGVhbjtcblxuICAgICAgICBwdWJsaWMgYWxwaGE6bnVtYmVyID0gMTtcblxuICAgICAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fc3ZnKTtcblxuICAgICAgICAgICAgaWYgKFN2Z1JlbmRlckVuZ2luZS5faXNmZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgU3ZnUmVuZGVyRW5naW5lLl9pc2ZmID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2ZpcmVmb3gnKSA+PSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2F2ZSgpe1xuXG4gICAgICAgIH1cbiAgICAgICAgcmVzdG9yZSgpe1xuXG4gICAgICAgIH1cbiAgICAgICAgY2xpcCgpe31cblxuICAgICAgICBiZWdpblJlbmRlcigpIHtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl9zdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N2Zy5yZW1vdmVDaGlsZCh0aGlzLl9zdmcuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdmcuYXBwZW5kQ2hpbGQodGhpcy5fdGV4dEdyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZFJlbmRlcigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0R3JvdXAucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N2Zy5yZW1vdmVDaGlsZCh0aGlzLl90ZXh0R3JvdXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2V0Vmlld3BvcnRTaXplKHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9zdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHcudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB0aGlzLl9zdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3ZnO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGZpbGwoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWxsXG4gICAgICAgIH1cbiAgICAgICAgc2V0IGZpbGwodmFsdWU6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fZmlsbCA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IGZvbnRTaXplKCk6IHN0cmluZyB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9udFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGZvbnRTaXplKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZvbnRTaXplID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgZm9udEZhbWlseSgpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRGYW1pbHk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IGZvbnRGYW1pbHkodmFsdWU6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fZm9udEZhbWlseSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHN0cm9rZSgpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0cm9rZTtcbiAgICAgICAgfVxuICAgICAgICBzZXQgc3Ryb2tlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IHN0cm9rZVdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Ryb2tlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgc2V0IHN0cm9rZVdpZHRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0cm9rZVdpZHRoID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgdGV4dEZpbGwoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0RmlsbDtcbiAgICAgICAgfVxuICAgICAgICBzZXQgdGV4dEZpbGwodmFsdWU6IHN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5fdGV4dEZpbGwgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZENsaXBSZWN0KGNsaXBSZWN0OiBSZWN0LCBpZDogc3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoY2xpcFJlY3QgJiYgaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xpcFBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU3ZnUmVuZGVyRW5naW5lLnN2Z05TLCAnY2xpcFBhdGgnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTdmdSZW5kZXJFbmdpbmUuc3ZnTlMsICdyZWN0Jyk7XG4gICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCAoY2xpcFJlY3QubGVmdCAtIDEpLnRvRml4ZWQoKSk7XG4gICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCAoY2xpcFJlY3QudG9wIC0gMSkudG9GaXhlZCgpKTtcbiAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAoY2xpcFJlY3Qud2lkdGggKyAyKS50b0ZpeGVkKCkpO1xuICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAoY2xpcFJlY3QuaGVpZ2h0ICsgMikudG9GaXhlZCgpKTtcbiAgICAgICAgICAgICAgICBjbGlwUGF0aC5hcHBlbmRDaGlsZChyZWN0KTtcblxuICAgICAgICAgICAgICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zdmcuYXBwZW5kQ2hpbGQoY2xpcFBhdGgpO1xuICAgICAgICAgICAgICAgIC8vdGhpcy5fZGVmcy5hcHBlbmRDaGlsZChjbGlwUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3RWxsaXBzZShjeDogbnVtYmVyLCBjeTogbnVtYmVyLCByeDogbnVtYmVyLCByeTogbnVtYmVyLCBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogYW55KTogU1ZHRWxlbWVudCB7XG4gICAgICAgICAgICB2YXIgZWxsID0gPFNWR0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFN2Z1JlbmRlckVuZ2luZS5zdmdOUywgJ2VsbGlwc2UnKTtcbiAgICAgICAgICAgIGVsbC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHRoaXMuX3N0cm9rZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3Ryb2tlV2lkdGggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbGwuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLl9zdHJva2VXaWR0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsbC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCB0aGlzLl9maWxsKTtcbiAgICAgICAgICAgIGVsbC5zZXRBdHRyaWJ1dGUoJ2N4JywgY3gudG9GaXhlZCgxKSk7XG4gICAgICAgICAgICBlbGwuc2V0QXR0cmlidXRlKCdjeScsIGN5LnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgZWxsLnNldEF0dHJpYnV0ZSgncngnLCByeC50b0ZpeGVkKDEpKTtcbiAgICAgICAgICAgIGVsbC5zZXRBdHRyaWJ1dGUoJ3J5JywgcnkudG9GaXhlZCgxKSk7XG4gICAgICAgICAgICAvL2VsbC5zZXRBdHRyaWJ1dGUoJ2N4JywgY3gudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAvL2VsbC5zZXRBdHRyaWJ1dGUoJ2N5JywgY3kudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAvL2VsbC5zZXRBdHRyaWJ1dGUoJ3J4JywgcngudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAvL2VsbC5zZXRBdHRyaWJ1dGUoJ3J5JywgcnkudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBlbGwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKGVsbCwgc3R5bGUpO1xuXG4gICAgICAgICAgICAvL3RoaXMuX3N2Zy5hcHBlbmRDaGlsZChlbGwpO1xuICAgICAgICAgICAgdGhpcy5fYXBwZW5kQ2hpbGQoZWxsKTtcblxuICAgICAgICAgICAgcmV0dXJuIGVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlciwgY2xhc3NOYW1lPzogc3RyaW5nLCBzdHlsZT86IGFueSwgY2xpcFBhdGg/OiBzdHJpbmcpOiBTVkdFbGVtZW50IHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gPFNWR0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFN2Z1JlbmRlckVuZ2luZS5zdmdOUywgJ3JlY3QnKTtcblxuICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCB0aGlzLl9maWxsKTtcbiAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdzdHJva2UnLCB0aGlzLl9zdHJva2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0cm9rZVdpZHRoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHRoaXMuX3N0cm9rZVdpZHRoLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCB4LnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCB5LnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgaWYgKHcgPiAwICYmIHcgPCAwLjA1KSB7XG4gICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzAuMScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3LnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGggPiAwICYmIGggPCAwLjA1KSB7XG4gICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcwLjEnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGgudG9GaXhlZCgxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgjJyArIGNsaXBQYXRoICsgJyknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKHJlY3QsIHN0eWxlKTtcblxuICAgICAgICAgICAgdGhpcy5fYXBwZW5kQ2hpbGQocmVjdCk7XG5cbiAgICAgICAgICAgIHJldHVybiByZWN0O1xuICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5fcmVuZGVyLmRyYXdMaW5lKHN0YXJ0cG9pbnQueCwgc3RhcnRwb2ludC55LCBlbmRwb2ludC54LCBlbmRwb2ludC55LHN0cm9rZSk7XG4gICAgICAgIFxuICAgICAgICBkcmF3TGluZSh4MTpudW1iZXIsIHkxOm51bWJlciwgeDI6bnVtYmVyLCB5MjpudW1iZXIsIHN0cm9rZTpTdHJva2VTdHlsZSl7XG4gICAgICAgICAgICB0aGlzLl9kcmF3TGluZSh4MSx5MSx4Mix5MixudWxsLHsnc3Ryb2tlJzpzdHJva2Uuc3Ryb2tlQ29sb3IsJ3N0cm9rZS13aWR0aCc6c3Ryb2tlLnN0cm9rZVdpZHRofSk7XG4gICAgICAgIH1cbiAgICAgICAgX2RyYXdMaW5lKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGNsYXNzTmFtZT86IHN0cmluZywgc3R5bGU/OiBhbnkpOiBTVkdFbGVtZW50IHtcbiAgICAgICAgICAgIHZhciBsaW5lID0gPFNWR0FFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTdmdSZW5kZXJFbmdpbmUuc3ZnTlMsICdsaW5lJyk7XG4gICAgICAgICAgICBsaW5lLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgdGhpcy5fc3Ryb2tlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdHJva2VXaWR0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLl9zdHJva2VXaWR0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCd4MScsIHgxLnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoJ3gyJywgeDIudG9GaXhlZCgxKSk7XG4gICAgICAgICAgICBsaW5lLnNldEF0dHJpYnV0ZSgneTEnLCB5MS50b0ZpeGVkKDEpKTtcbiAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCd5MicsIHkyLnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgLy9saW5lLnNldEF0dHJpYnV0ZSgneDEnLCB4MS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIC8vbGluZS5zZXRBdHRyaWJ1dGUoJ3gyJywgeDIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAvL2xpbmUuc2V0QXR0cmlidXRlKCd5MScsIHkxLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgLy9saW5lLnNldEF0dHJpYnV0ZSgneTInLCB5Mi50b1N0cmluZygpKTtcblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKGxpbmUsIHN0eWxlKTtcblxuICAgICAgICAgICAgdGhpcy5fYXBwZW5kQ2hpbGQobGluZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0xpbmVzKHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdLCBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogYW55LCBjbGlwUGF0aD86IHN0cmluZyk6IFNWR0VsZW1lbnQge1xuICAgICAgICAgICAgaWYgKHhzICYmIHlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKHhzLmxlbmd0aCwgeXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxpbmUgPSA8U1ZHRWxlbWVudD5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU3ZnUmVuZGVyRW5naW5lLnN2Z05TLCAncG9seWxpbmUnKTtcblxuICAgICAgICAgICAgICAgICAgICBwbGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHRoaXMuX3N0cm9rZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdHJva2VXaWR0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLl9zdHJva2VXaWR0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBsaW5lLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdub25lJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcHRzID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwdHMgKz0geHNbaV0udG9GaXhlZCgxKSArICcsJyArIHlzW2ldLnRvRml4ZWQoMSkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NwdHMgKz0geHNbaV0udG9TdHJpbmcoKSArICcsJyArIHlzW2ldLnRvU3RyaW5nKCkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGxpbmUuc2V0QXR0cmlidXRlKCdwb2ludHMnLCBzcHRzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGluZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsaW5lLnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgjJyArIGNsaXBQYXRoICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKHBsaW5lLCBzdHlsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kQ2hpbGQocGxpbmUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGluZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIGRyYXdQb2x5Z29uKHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdLCBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogYW55LCBjbGlwUGF0aD86IHN0cmluZyk6IFNWR0VsZW1lbnQge1xuICAgICAgICAgICAgaWYgKHhzICYmIHlzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKHhzLmxlbmd0aCwgeXMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9seSA9IDxTVkdFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTdmdSZW5kZXJFbmdpbmUuc3ZnTlMsICdwb2x5Z29uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcG9seS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHRoaXMuX3N0cm9rZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdHJva2VXaWR0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9seS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHRoaXMuX3N0cm9rZVdpZHRoLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBvbHkuc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5fZmlsbCk7XG4gICAgICAgICAgICAgICAgICAgIHBvbHkuc2V0QXR0cmlidXRlKCdvcGFjaXR5Jyx0aGlzLmFscGhhK1wiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcHRzID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc3B0cyArPSB4c1tpXS50b1N0cmluZygpICsgJywnICsgeXNbaV0udG9TdHJpbmcoKSArICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwdHMgKz0geHNbaV0udG9GaXhlZCgxKSArICcsJyArIHlzW2ldLnRvRml4ZWQoMSkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcG9seS5zZXRBdHRyaWJ1dGUoJ3BvaW50cycsIHNwdHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHkuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaXBQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2x5LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgjJyArIGNsaXBQYXRoICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKHBvbHksIHN0eWxlKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmRDaGlsZChwb2x5KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9seTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd1BpZShjeDogbnVtYmVyLCBjeTogbnVtYmVyLCByOiBudW1iZXIsIHN0YXJ0QW5nbGU6IG51bWJlciwgc3dlZXBBbmdsZTogbnVtYmVyLFxuICAgICAgICAgICAgY2xhc3NOYW1lPzogc3RyaW5nLCBzdHlsZT86IGFueSwgY2xpcFBhdGg/OiBzdHJpbmcpOiBTVkdFbGVtZW50IHtcblxuICAgICAgICAgICAgaWYgKHN3ZWVwQW5nbGUgPj0gTWF0aC5QSSAqIDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kcmF3RWxsaXBzZShjeCwgY3ksIHIsIHIsIGNsYXNzTmFtZSwgc3R5bGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGF0aCA9IDxTVkdFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTdmdSZW5kZXJFbmdpbmUuc3ZnTlMsICdwYXRoJyk7XG5cbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5fZmlsbCk7XG4gICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgdGhpcy5fc3Ryb2tlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdHJva2VXaWR0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLl9zdHJva2VXaWR0aC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHAxID0gbmV3IFBvaW50KGN4LCBjeSk7XG4gICAgICAgICAgICBwMS54ICs9IHIgKiBNYXRoLmNvcyhzdGFydEFuZ2xlKTtcbiAgICAgICAgICAgIHAxLnkgKz0gciAqIE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuXG4gICAgICAgICAgICB2YXIgYTIgPSBzdGFydEFuZ2xlICsgc3dlZXBBbmdsZTtcbiAgICAgICAgICAgIHZhciBwMiA9IG5ldyBQb2ludChjeCwgY3kpO1xuICAgICAgICAgICAgcDIueCArPSByICogTWF0aC5jb3MoYTIpO1xuICAgICAgICAgICAgcDIueSArPSByICogTWF0aC5zaW4oYTIpO1xuXG4gICAgICAgICAgICB2YXIgb3B0ID0gJyAwIDAsMSAnO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHN3ZWVwQW5nbGUpID4gTWF0aC5QSSkge1xuICAgICAgICAgICAgICAgIG9wdCA9ICcgMCAxLDEgJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy92YXIgZCA9ICdNICcgKyBjeC50b0ZpeGVkKDEpICsgJywnICsgY3kudG9GaXhlZCgxKTtcbiAgICAgICAgICAgIC8vZCArPSAnIEwgJyArIHAxLngudG9GaXhlZCgxKSArICcsJyArIHAxLnkudG9GaXhlZCgxKTtcbiAgICAgICAgICAgIC8vZCArPSAnIEEgJyArIHIudG9GaXhlZCgxKSArICcsJyArIHIudG9GaXhlZCgxKSArIG9wdDtcbiAgICAgICAgICAgIC8vZCArPSBwMi54LnRvRml4ZWQoMSkgKyAnLCcgKyBwMi55LnRvRml4ZWQoMSkgKyAnIHonO1xuICAgICAgICAgICAgdmFyIGQgPSAnTSAnICsgcDEueC50b0ZpeGVkKDEpICsgJywnICsgcDEueS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgZCArPSAnIEEgJyArIHIudG9GaXhlZCgxKSArICcsJyArIHIudG9GaXhlZCgxKSArIG9wdDtcbiAgICAgICAgICAgIGQgKz0gcDIueC50b0ZpeGVkKDEpICsgJywnICsgcDIueS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgZCArPSAnIEwgJyArIGN4LnRvRml4ZWQoMSkgKyAnLCcgKyBjeS50b0ZpeGVkKDEpICsgJyB6JztcblxuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcblxuXG4gICAgICAgICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgjJyArIGNsaXBQYXRoICsgJyknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKHBhdGgsIHN0eWxlKTtcblxuICAgICAgICAgICAgdGhpcy5fYXBwZW5kQ2hpbGQocGF0aCk7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd0RvbnV0KGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBpbm5lclJhZGl1czogbnVtYmVyLCBzdGFydEFuZ2xlOiBudW1iZXIsIHN3ZWVwQW5nbGU6IG51bWJlcixcbiAgICAgICAgICAgIGNsYXNzTmFtZT86IHN0cmluZywgc3R5bGU/OiBhbnksIGNsaXBQYXRoPzogc3RyaW5nKTogU1ZHRWxlbWVudCB7XG5cbiAgICAgICAgICAgIHZhciBpc0Z1bGwgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzdGFydEFuZ2xlK3N3ZWVwQW5nbGUgPj0gTWF0aC5QSSAqIDIpIHtcbiAgICAgICAgICAgICAgICBpc0Z1bGwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN3ZWVwQW5nbGU9TWF0aC5QSSAqIDIgLXN0YXJ0QW5nbGUtMC4wMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXRoID0gPFNWR0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFN2Z1JlbmRlckVuZ2luZS5zdmdOUywgJ3BhdGgnKTtcblxuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCB0aGlzLl9maWxsKTtcbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCB0aGlzLl9zdHJva2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0cm9rZVdpZHRoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHRoaXMuX3N0cm9rZVdpZHRoLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcDEgPSBuZXcgUG9pbnQoY3gsIGN5KTtcbiAgICAgICAgICAgIHAxLnggKz0gcmFkaXVzICogTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgICAgICBwMS55ICs9IHJhZGl1cyAqIE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuXG4gICAgICAgICAgICB2YXIgYTIgPSBzdGFydEFuZ2xlICsgc3dlZXBBbmdsZTtcbiAgICAgICAgICAgIHZhciBwMiA9IG5ldyBQb2ludChjeCwgY3kpO1xuICAgICAgICAgICAgcDIueCArPSByYWRpdXMgKiBNYXRoLmNvcyhhMik7XG4gICAgICAgICAgICBwMi55ICs9IHJhZGl1cyAqIE1hdGguc2luKGEyKTtcblxuICAgICAgICAgICAgdmFyIHAzID0gbmV3IFBvaW50KGN4LCBjeSk7XG4gICAgICAgICAgICBwMy54ICs9IGlubmVyUmFkaXVzICogTWF0aC5jb3MoYTIpO1xuICAgICAgICAgICAgcDMueSArPSBpbm5lclJhZGl1cyAqIE1hdGguc2luKGEyKTtcblxuICAgICAgICAgICAgdmFyIHA0ID0gbmV3IFBvaW50KGN4LCBjeSk7XG4gICAgICAgICAgICBwNC54ICs9IGlubmVyUmFkaXVzICogTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgICAgICBwNC55ICs9IGlubmVyUmFkaXVzICogTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG5cbiAgICAgICAgICAgIHZhciBvcHQxID0gJyAwIDAsMSAnLFxuICAgICAgICAgICAgICAgIG9wdDIgPSAnIDAgMCwwICc7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoc3dlZXBBbmdsZSkgPiBNYXRoLlBJKSB7XG4gICAgICAgICAgICAgICAgb3B0MSA9ICcgMCAxLDEgJztcbiAgICAgICAgICAgICAgICBvcHQyID0gJyAwIDEsMCAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZCA9ICdNICcgKyBwMS54LnRvRml4ZWQoMykgKyAnLCcgKyBwMS55LnRvRml4ZWQoMyk7XG5cbiAgICAgICAgICAgIGQgKz0gJyBBICcgKyByYWRpdXMudG9GaXhlZCgzKSArICcsJyArIHJhZGl1cy50b0ZpeGVkKDMpICsgb3B0MTtcbiAgICAgICAgICAgIGQgKz0gcDIueC50b0ZpeGVkKDMpICsgJywnICsgcDIueS50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgaWYgKGlzRnVsbCkge1xuICAgICAgICAgICAgICAgIGQgKz0gJyBNICcgKyBwMy54LnRvRml4ZWQoMykgKyAnLCcgKyBwMy55LnRvRml4ZWQoMyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGQgKz0gJyBMICcgKyBwMy54LnRvRml4ZWQoMykgKyAnLCcgKyBwMy55LnRvRml4ZWQoMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkICs9ICcgQSAnICsgaW5uZXJSYWRpdXMudG9GaXhlZCgzKSArICcsJyArIGlubmVyUmFkaXVzLnRvRml4ZWQoMykgKyBvcHQyO1xuICAgICAgICAgICAgZCArPSBwNC54LnRvRml4ZWQoMykgKyAnLCcgKyBwNC55LnRvRml4ZWQoMyk7XG4gICAgICAgICAgICBpZiAoIWlzRnVsbCkge1xuICAgICAgICAgICAgICAgIGQgKz0gJyB6JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcblxuICAgICAgICAgICAgaWYgKGNsaXBQYXRoKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcGF0aCcsICd1cmwoIycgKyBjbGlwUGF0aCArICcpJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZShwYXRoLCBzdHlsZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZENoaWxkKHBhdGgpO1xuXG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdTdHJpbmcoczogc3RyaW5nLCBwdDogUG9pbnQsIGNsYXNzTmFtZT86IHN0cmluZywgc3R5bGU/OiBhbnkpOiBTVkdFbGVtZW50IHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy5fY3JlYXRlVGV4dChwdCwgcyk7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZSh0ZXh0LCBzdHlsZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZENoaWxkKHRleHQpO1xuXG4gICAgICAgICAgICB2YXIgYmIgPSB0aGlzLl9nZXRCQm94KHRleHQpOy8vIHRleHQuZ2V0QkJveCgpO1xuICAgICAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ3knLCAocHQueSAtIChiYi55ICsgYmIuaGVpZ2h0IC0gcHQueSkpLnRvRml4ZWQoMSkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdTdHJpbmdSb3RhdGVkKHM6IHN0cmluZywgcHQ6IFBvaW50LCBjZW50ZXI6IFBvaW50LCBhbmdsZTogbnVtYmVyLCBjbGFzc05hbWU/OiBzdHJpbmcsIHN0eWxlPzogYW55KTogU1ZHRWxlbWVudCB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuX2NyZWF0ZVRleHQocHQsIHMpO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHRleHQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKHRleHQsIHN0eWxlKTtcblxuICAgICAgICAgICAgdmFyIGcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU3ZnUmVuZGVyRW5naW5lLnN2Z05TLCAnZycpO1xuICAgICAgICAgICAgZy5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICdyb3RhdGUoJyArIGFuZ2xlLnRvRml4ZWQoMSkgKyAnLCcgKyBjZW50ZXIueC50b0ZpeGVkKDEpICsgJywnICsgY2VudGVyLnkudG9GaXhlZCgxKSArICcpJyk7XG4gICAgICAgICAgICAvL2cuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAncm90YXRlKCcgKyBhbmdsZS50b1N0cmluZygpICsgJywnICsgY2VudGVyLngudG9TdHJpbmcoKSArICcsJyArIGNlbnRlci55LnRvU3RyaW5nKCkgKyAnKScpO1xuICAgICAgICAgICAgZy5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuXG4gICAgICAgICAgICAvL3RoaXMuX3N2Zy5hcHBlbmRDaGlsZChnKTtcbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZENoaWxkKGcpO1xuICAgICAgICAgICAgdmFyIGJiID0gdGhpcy5fZ2V0QkJveCh0ZXh0KTsvLyB0ZXh0LmdldEJCb3goKTtcbiAgICAgICAgICAgIHRleHQuc2V0QXR0cmlidXRlKCd5JywgKHB0LnkgLSAoYmIueSArIGJiLmhlaWdodCAtIHB0LnkpKS50b0ZpeGVkKDEpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG1lYXN1cmVTdHJpbmcoczpzdHJpbmcsZm9udDpGb250KTpTaXple1xuICAgICAgICAgICByZXR1cm4gdGhpcy5fbWVhc3VyZVN0cmluZyhzLCBudWxsLCBudWxsLCB7ICdmb250LXNpemUnOiBmb250LmZvbnRTaXplLCAnZm9udC1mYW1pbHknOiBmb250LmZvbnRGYW1pbHkgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBfbWVhc3VyZVN0cmluZyhzOiBzdHJpbmcsIGNsYXNzTmFtZT86IHN0cmluZywgZ3JvdXBOYW1lPzogc3RyaW5nLCBzdHlsZT86IGFueSk6IFNpemUge1xuICAgICAgICAgICAgdmFyIHN6ID0gbmV3IFNpemUoMCwgMCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9mb250U2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHQuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCB0aGlzLl9mb250U2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZm9udEZhbWlseSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHQuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsIHRoaXMuX2ZvbnRGYW1pbHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ3JvdXBOYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dEdyb3VwLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBncm91cE5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlKHRoaXMuX3RleHQsIHN0eWxlKTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0VGV4dCh0aGlzLl90ZXh0LCBzKTtcblxuICAgICAgICAgICAgdmFyIHJlY3QgPSB0aGlzLl9nZXRCQm94KHRoaXMuX3RleHQpOyAvLyB0aGlzLl90ZXh0LmdldEJCb3goKTtcbiAgICAgICAgICAgIHN6LndpZHRoID0gcmVjdC53aWR0aDtcbiAgICAgICAgICAgIHN6LmhlaWdodCA9IHJlY3QuaGVpZ2h0LTI7XG5cbiAgICAgICAgICAgIHRoaXMuX3RleHQucmVtb3ZlQXR0cmlidXRlKCdmb250LXNpemUnKTtcbiAgICAgICAgICAgIHRoaXMuX3RleHQucmVtb3ZlQXR0cmlidXRlKCdmb250LWZhbWlseScpO1xuICAgICAgICAgICAgdGhpcy5fdGV4dC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG5cbiAgICAgICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLl9kZUNhc2Uoa2V5KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl90ZXh0R3JvdXAucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICAgICAgdGhpcy5fdGV4dC50ZXh0Q29udGVudCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gc3o7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydEdyb3VwKGNsYXNzTmFtZT86IHN0cmluZywgY2xpcFBhdGg/OiBzdHJpbmcsIGNyZWF0ZVRyYW5zZm9ybTogYm9vbGVhbiA9IGZhbHNlKTogU1ZHRWxlbWVudCB7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSA8U1ZHR0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFN2Z1JlbmRlckVuZ2luZS5zdmdOUywgJ2cnKTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBncm91cC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjbGlwUGF0aCkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgjJyArIGNsaXBQYXRoICsgJyknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZENoaWxkKGdyb3VwKTtcbiAgICAgICAgICAgIGlmIChjcmVhdGVUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICBncm91cC50cmFuc2Zvcm0uYmFzZVZhbC5hcHBlbmRJdGVtKCg8U1ZHU1ZHRWxlbWVudD50aGlzLl9zdmcpLmNyZWF0ZVNWR1RyYW5zZm9ybSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2dyb3VwID0gZ3JvdXA7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRHcm91cCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9ncm91cCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSA8RWxlbWVudD50aGlzLl9ncm91cC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgPT0gdGhpcy5fc3ZnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ncm91cCA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3SW1hZ2UoaW1hZ2VIcmVmOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcik6IFNWR0VsZW1lbnQge1xuICAgICAgICAgICAgdmFyIGltZyA9IDxTVkdHRWxlbWVudD5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU3ZnUmVuZGVyRW5naW5lLnN2Z05TLCAnaW1hZ2UnKTtcblxuICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZU5TKFN2Z1JlbmRlckVuZ2luZS54bGlua05TLCAnaHJlZicsIGltYWdlSHJlZik7XG4gICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCd4JywgeC50b0ZpeGVkKDEpKTtcbiAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ3knLCB5LnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3LnRvRml4ZWQoMSkpO1xuICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaC50b0ZpeGVkKDEpKTtcblxuICAgICAgICAgICAgdGhpcy5fYXBwZW5kQ2hpbGQoaW1nKTtcblxuICAgICAgICAgICAgcmV0dXJuIGltZztcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX2FwcGVuZENoaWxkKGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBncm91cCA9IHRoaXMuX2dyb3VwO1xuICAgICAgICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICAgICAgICAgIGdyb3VwID0gdGhpcy5fc3ZnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ3JvdXAuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIF9jcmVhdGUoKSB7XG4gICAgICAgICAgICB0aGlzLl9zdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU3ZnUmVuZGVyRW5naW5lLnN2Z05TLCAnc3ZnJyk7XG4gICAgICAgICAgICB0aGlzLl9kZWZzID0gPFNWR0RlZnNFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTdmdSZW5kZXJFbmdpbmUuc3ZnTlMsICdkZWZzJyk7XG4gICAgICAgICAgICB0aGlzLl9zdmcuYXBwZW5kQ2hpbGQodGhpcy5fZGVmcyk7XG4gICAgICAgICAgICB0aGlzLl90ZXh0ID0gdGhpcy5fY3JlYXRlVGV4dChuZXcgUG9pbnQoLTEwMDAsIC0xMDAwKSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fdGV4dEdyb3VwID0gPFNWR0dFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTdmdSZW5kZXJFbmdpbmUuc3ZnTlMsICdnJyk7XG4gICAgICAgICAgICB0aGlzLl90ZXh0R3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5fdGV4dCk7XG4gICAgICAgICAgICB0aGlzLl9zdmcuYXBwZW5kQ2hpbGQodGhpcy5fdGV4dEdyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgX3NldFRleHQoZWxlbWVudDogRWxlbWVudCwgczogc3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IHMgPyBzLnRvU3RyaW5nKCkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKHRleHQgJiYgdGV4dC5pbmRleE9mKCd0c3BhbicpID49IDApIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgbWFya3VwIGludG8gdmFsaWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgICAgIHZhciBkWE1MID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vZFhNTC5hc3luYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAvLyBXcmFwIHRoZSBtYXJrdXAgaW50byBhIFNWRyBub2RlIHRvIGVuc3VyZSBwYXJzaW5nIHdvcmtzLlxuICAgICAgICAgICAgICAgICAgICB2YXIgc1hNTCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPicgKyB0ZXh0ICsgJzwvc3ZnPic7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdmdEb2NFbGVtZW50ID0gZFhNTC5wYXJzZUZyb21TdHJpbmcoc1hNTCwgJ3RleHQveG1sJykuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdyB0YWtlIGVhY2ggbm9kZSwgaW1wb3J0IGl0IGFuZCBhcHBlbmQgdG8gdGhpcyBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gc3ZnRG9jRWxlbWVudC5maXJzdENoaWxkO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudC5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoY2hpbGROb2RlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBwYXJzaW5nIFhNTCBzdHJpbmcuJyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfY3JlYXRlVGV4dChwb3M6IFBvaW50LCB0ZXh0OiBzdHJpbmcpOiBTVkdUZXh0RWxlbWVudCB7XG4gICAgICAgICAgICB2YXIgdGV4dGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFN2Z1JlbmRlckVuZ2luZS5zdmdOUywgJ3RleHQnKTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0VGV4dCh0ZXh0ZWwsIHRleHQpO1xuICAgICAgICAgICAgdGV4dGVsLnNldEF0dHJpYnV0ZSgnZmlsbCcsIHRoaXMuX3RleHRGaWxsKTtcbiAgICAgICAgICAgIHRleHRlbC5zZXRBdHRyaWJ1dGUoJ3gnLCBwb3MueC50b0ZpeGVkKDEpKTtcbiAgICAgICAgICAgIHRleHRlbC5zZXRBdHRyaWJ1dGUoJ3knLCBwb3MueS50b0ZpeGVkKDEpKTtcbiAgICAgICAgICAgIC8vdGV4dGVsLnNldEF0dHJpYnV0ZSgneCcsIHBvcy54LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgLy90ZXh0ZWwuc2V0QXR0cmlidXRlKCd5JywgcG9zLnkudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9mb250U2l6ZSkge1xuICAgICAgICAgICAgICAgIHRleHRlbC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsIHRoaXMuX2ZvbnRTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9mb250RmFtaWx5KSB7XG4gICAgICAgICAgICAgICAgdGV4dGVsLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCB0aGlzLl9mb250RmFtaWx5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiA8U1ZHVGV4dEVsZW1lbnQ+dGV4dGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfYXBwbHlTdHlsZShlbDogU1ZHRWxlbWVudCwgc3R5bGU6IGFueSkge1xuICAgICAgICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSh0aGlzLl9kZUNhc2Uoa2V5KSwgc3R5bGVba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZGVDYXNlKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gJy0nICsgYS50b0xvd2VyQ2FzZSgpIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBfZ2V0QkJveCh0ZXh0OiBTVkdUZXh0RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKFN2Z1JlbmRlckVuZ2luZS5faXNmZikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0LmdldEJCb3goKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0LmdldEJCb3goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIlV0aWwudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkNhbnZhcy50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLmdyYXBoaWNze1xuXG5cbiAgICBleHBvcnQgY2xhc3MgVGV4dFBhaW50e1xuICAgICAgICBwcml2YXRlIGNhbnZhczpDYW52YXM7XG4gICAgICAgIHByaXZhdGUgZm9udDpGb250O1xuICAgICAgICBjb25zdHJ1Y3RvcihjYW52YXM6Q2FudmFzLCBmb250OkZvbnQpe1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB9XG4gICAgICAgIG1lYXN1cmVTdHJpbmcoc3RyOnN0cmluZyk6U2l6ZXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5tZWFzdXJlU3RyaW5nKHN0cix0aGlzLmZvbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwibmFtZXNwYWNlIGFuZHJvaWQudXRpbHtcbiAgICBleHBvcnQgY2xhc3MgQXJyYXlMaXN0PFQ+IHtcbiAgICAgICAgcHJpdmF0ZSBfYXJyYXk6VFtdID0gW107XG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XG5cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgYWRkKHZhbHVlOlQpOnZvaWR7XG4gICAgICAgICAgICB0aGlzLl9hcnJheS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgcmVtb3ZlPFQ+KHZhbHVlOmFueSk6dm9pZHtcbiAgICAgICAgICAgIGlmKHR5cGVvZih2YWx1ZSkgPT09ICdudW1iZXInKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcnJheS5zcGxpY2UodmFsdWUpO1xuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2FycmF5LmluZGV4T2YodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmKGluZGV4ID4wKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJyYXkuc3BsaWNlKGluZGV4LDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwdWJsaWMgY2xlYXIoKXtcbiAgICAgICAgICAgIHRoaXMuX2FycmF5Lmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHVibGljIHNpemUoKTpudW1iZXJ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJyYXkubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHB1YmxpYyBnZXQoaW5kZXg6bnVtYmVyKXtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hcnJheVtpbmRleF07XG4gICAgICAgIH1cbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQudXRpbHtcbiAgICBleHBvcnQgY2xhc3MgTWVzc2FnZXtcbiAgICAgICAgcHVibGljIHdoYXQgOm51bWJlciA9MDtcbiAgICAgICAgY29uc3RydWN0b3Iod2hhdD86bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMud2hhdCA9d2hhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgb2J0YWluKHdoYXQ/Om51bWJlcik6TWVzc2FnZXtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWVzc2FnZSh3aGF0KTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cblxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJNZXNzYWdlLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJMb2cudHNcIiAvPlxuXG5uYW1lc3BhY2UgYW5kcm9pZC51dGlsIHtcbiAgICBleHBvcnQgY2xhc3MgSGFuZGxlciB7XG4gICAgICAgIHByaXZhdGUgX2hhbmxkZXJNYXAgPSB7fTtcbiAgICAgICAgcHVibGljIGhhbmRsZU1lc3NhZ2UobXNnOiBNZXNzYWdlKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nICAgXG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2VuZE1lc3NhZ2UobXNnOiBNZXNzYWdlKTogYm9vbGVhbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kTWVzc2FnZURlbGF5ZWQobXNnLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBzZW5kTWVzc2FnZURlbGF5ZWQobXNnOiBNZXNzYWdlLCBkZWxheTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgICAgICAvLyBMb2cuZCgnc2VuZE1lc3NhZ2VEZWxheWVkIGRlbGF5ID0gJyArIGRlbGF5ICsgXCIgICBub3cgPVwiICsgRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kTWVzc2FnZUF0VGltZShtc2csIERhdGUubm93KCkgKyBkZWxheSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2VuZE1lc3NhZ2VBdFRpbWUobXNnOiBNZXNzYWdlLCB1cHRpbWVNaWxsaXM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5faGFubGRlck1hcFttc2cud2hhdF0gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZU1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgIH0sIHVwdGltZU1pbGxpcyAtIERhdGUubm93KCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgcmVtb3ZlTWVzc2FnZXMod2hhdDogbnVtYmVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5faGFubGRlck1hcFt3aGF0XSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHB1YmxpYyBvYnRhaW5NZXNzYWdlKHdoYXQ6IG51bWJlcik6IE1lc3NhZ2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1lc3NhZ2Uub2J0YWluKHdoYXQpO1xuXG4gICAgICAgIH1cblxuXG4gICAgfVxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLndpZGdldCB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEFsaWduID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbjtcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcblxuXG4gICAgaW1wb3J0IEFsaWduRWxtZW50ID0gYW5kcm9pZC5ncmFwaGljcy5BbGlnbkVsbWVudDtcbiAgICBpbXBvcnQgTWFyZ2luID0gYW5kcm9pZC5ncmFwaGljcy5NYXJnaW47XG5cbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcblxuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBGb250ID0gYW5kcm9pZC5ncmFwaGljcy5Gb250O1xuICAgIGltcG9ydCBMYXlvdXRJbmZvID0gYW5kcm9pZC52aWV3LkxheW91dEluZm87XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG5cbiAgICBleHBvcnQgZW51bSBTY2FsZVR5cGUge1xuICAgICAgICBNQVRSSVgsXG4gICAgICAgIEZJVF9YWSxcbiAgICAgICAgRklUX1NUQVJULFxuICAgICAgICBGSVRfQ0VOVEVSLFxuICAgICAgICBGSVRfRU5ELFxuICAgICAgICBDRU5URVIsXG4gICAgICAgIENFTlRFUl9DUk9QLFxuICAgICAgICBDRU5URVJfSU5TSURFXG4gICAgfVxuXG5cblxuXG5cblxuXG4gICAgZXhwb3J0IGNsYXNzIEltYWdlVmlldyBleHRlbmRzIFZpZXcge1xuXG5cblxuXG4gICAgICAgIHByaXZhdGUgYml0bWFwOiBJbWFnZURhdGE7XG5cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5zZXRNZWFzdXJlZERpbWVuc2lvbihuZXcgTWVhc3VyZVNwZWMoKSxuZXcgTWVhc3VyZVNwZWMoKSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBvbkRyYXcoY2FudmFzOkNhbnZhcyk6dm9pZHtcbiAgICAgICAgfVxuICAgIH1cbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdmlldy9pbXBsZW1lbnRpb24vVmlld0dyb3VwLnRzXCIgLz5cblxuXG5cbm5hbWVzcGFjZSBhbmRyb2lkLndpZGdldCB7XG4gICAgaW1wb3J0IFBhZGRpbmcgPSBhbmRyb2lkLmdyYXBoaWNzLlBhZGRpbmc7XG4gICAgaW1wb3J0IEdyYXZpdHkgPSBhbmRyb2lkLmdyYXBoaWNzLkdyYXZpdHk7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG5cblxuICAgIGltcG9ydCBBbGlnbkVsbWVudCA9IGFuZHJvaWQuZ3JhcGhpY3MuQWxpZ25FbG1lbnQ7XG4gICAgaW1wb3J0IE1hcmdpbiA9IGFuZHJvaWQuZ3JhcGhpY3MuTWFyZ2luO1xuXG4gICAgaW1wb3J0IFNpemUgPSBhbmRyb2lkLmdyYXBoaWNzLlNpemU7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGltcG9ydCBWaWV3R3JvdXAgPSBhbmRyb2lkLnZpZXcuVmlld0dyb3VwO1xuICAgIGltcG9ydCBWaWV3ID0gYW5kcm9pZC52aWV3LlZpZXc7XG5cbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBNZWFzdXJlU3BlYyA9IGFuZHJvaWQudmlldy5NZWFzdXJlU3BlYztcblxuICAgIGltcG9ydCBPcmllbnRhdGlvbiA9IGFuZHJvaWQuZ3JhcGhpY3MuT3JpZW50YXRpb247XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG5cbiAgICBleHBvcnQgY2xhc3MgTGluZWFyTGF5b3V0IGV4dGVuZHMgVmlld0dyb3VwIHtcbiAgICAgICAgcHJpdmF0ZSBfb3JpZW50YXRpb246IE9yaWVudGF0aW9uID0gT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcbiAgICAgICAgcHVibGljIHNldE9yaWVudGF0aW9uKG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fb3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBnZXRPcmllbnRhdGlvbigpOiBPcmllbnRhdGlvbiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb247XG4gICAgICAgIH1cblxuXG4gICAgICAgIG9uTWVhc3VyZSh3aWR0aDogTWVhc3VyZVNwZWMsIGhlaWdodDogTWVhc3VyZVNwZWMsIGNhbnZhczogQ2FudmFzKTogU2l6ZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZWFzdXJlSG9yaXpvbnRhbCh3aWR0aCwgaGVpZ2h0LCBjYW52YXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZWFzdXJlVmVydGljYWwod2lkdGgsIGhlaWdodCwgY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1lYXN1cmVIb3Jpem9udGFsKHdpZHRoOiBNZWFzdXJlU3BlYywgaGVpZ2h0OiBNZWFzdXJlU3BlYywgY2FudmFzOiBDYW52YXMpOiBTaXplIHtcbiAgICAgICAgICAgIHZhciBzaXplOiBTaXplO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW06IFZpZXcgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIHZhciBscDogTGF5b3V0UGFyYW1zID0gaXRlbS5sYXlvdXRQYXJhbXM7XG4gICAgICAgICAgICAgICAgdmFyIHc6IG51bWJlciA9IGxwLndpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBoOiBudW1iZXIgPSBscC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKGxwLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgaCA9IGhlaWdodC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxwLndpZHRoTW9kZSA9PT0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCkge1xuICAgICAgICAgICAgICAgICAgICB3ID0gd2lkdGgudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzID0gaXRlbS5vbk1lYXN1cmUobmV3IE1lYXN1cmVTcGVjKHcsIGxwLndpZHRoTW9kZSksIG5ldyBNZWFzdXJlU3BlYyhoLCBscC5oZWlnaHRNb2RlKSwgY2FudmFzKTtcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBzaXplLndpZHRoICs9IHMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplLmhlaWdodCA8IHMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IHMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IHMuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiAoc2l6ZS53aWR0aCA+IHdpZHRoLnZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICAgc2l6ZS53aWR0aCA9IHdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy8gaWYgKHNpemUuaGVpZ2h0ID4gaGVpZ2h0LnZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICAgc2l6ZS5oZWlnaHQgPSBoZWlnaHQudmFsdWU7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBpZiAodGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkge1xuICAgICAgICAgICAgICAgIHNpemUud2lkdGggPSB0aGlzLmxheW91dFBhcmFtcy53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHdpZHRoLmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5FWEFDVExZKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSB0aGlzLmxheW91dFBhcmFtcy5oZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpIHtcbiAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IGhlaWdodC5nZXRNZWFzdXJlVmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKHNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBtZWFzdXJlVmVydGljYWwod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgdmFyIHNpemU6IFNpemU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbTogVmlldyA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgdmFyIGxwOiBMYXlvdXRQYXJhbXMgPSBpdGVtLmxheW91dFBhcmFtcztcbiAgICAgICAgICAgICAgICB2YXIgdzogbnVtYmVyID0gbHAud2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGg6IG51bWJlciA9IGxwLmhlaWdodDtcbiAgICAgICAgICAgICAgICBpZiAobHAuaGVpZ2h0TW9kZSA9PT0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCkge1xuICAgICAgICAgICAgICAgICAgICBoID0gaGVpZ2h0LnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobHAud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UKSB7XG4gICAgICAgICAgICAgICAgICAgIHcgPSB3aWR0aC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBpdGVtLm9uTWVhc3VyZShuZXcgTWVhc3VyZVNwZWModywgbHAud2lkdGhNb2RlKSwgbmV3IE1lYXN1cmVTcGVjKGgsIGxwLmhlaWdodE1vZGUpLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgIGlmIChzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpemUuaGVpZ2h0ICs9IHMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCA8IHMud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUud2lkdGggPSBzLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IHMuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2l6ZS53aWR0aCA+IHdpZHRoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHdpZHRoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNpemUuaGVpZ2h0ID4gaGVpZ2h0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBoZWlnaHQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkge1xuICAgICAgICAgICAgICAgIHNpemUud2lkdGggPSB0aGlzLmxheW91dFBhcmFtcy53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlID09PSBMYXlvdXRQYXJhbXMuTUFUQ0hfUEFSRU5UKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHdpZHRoLmdldE1lYXN1cmVWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5FWEFDVExZKSB7XG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSB0aGlzLmxheW91dFBhcmFtcy5oZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpIHtcbiAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IGhlaWdodC5nZXRNZWFzdXJlVmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKHNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgICAgb25MYXlvdXQobDogbnVtYmVyLCB0OiBudW1iZXIsIHI6IG51bWJlciwgYjogbnVtYmVyLCBjYW52YXM6IENhbnZhcyk6IHZvaWQge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRJbmZvLnJlc2V0KGwsIHQsIHIsIGIsIHRoaXMucGFkZGluZywgMCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJyZWN0OiBSZWN0ID0gdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcmllbnRhdGlvbiA9PT0gT3JpZW50YXRpb24uSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0SG9yaXpvbnRhbChpbm5lcnJlY3QubGVmdCwgaW5uZXJyZWN0LnRvcCwgaW5uZXJyZWN0LnJpZ2h0LCBpbm5lcnJlY3QuYm90dG9tLGNhbnZhcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0VmVydGljYWwoaW5uZXJyZWN0LmxlZnQsIGlubmVycmVjdC50b3AsIGlubmVycmVjdC5yaWdodCwgaW5uZXJyZWN0LmJvdHRvbSxjYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGF5b3V0SG9yaXpvbnRhbChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBsZXQgdmlld0l0ZW06IFZpZXc7XG4gICAgICAgICAgICBsZXQgbTogTWFyZ2luO1xuICAgICAgICAgICAgbGV0IHN0YXJ0cG9pbnQ6IFBvaW50ID0gbmV3IFBvaW50KGwsIHQpO1xuICAgICAgICAgICAgbGV0IGxlbmd0aDogbnVtYmVyID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgY2hpbGRXaWR0aDogbnVtYmVyID0gMDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZpZXdJdGVtID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBtID0gdmlld0l0ZW0ubGF5b3V0UGFyYW1zLm1hcmdpbjtcbiAgICAgICAgICAgICAgICBjaGlsZFdpZHRoICs9IHZpZXdJdGVtLndpZHRoICsgKG0ubWFyZ2luTGVmdCArIG0ubWFyZ2luUmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlld0l0ZW0gPSBudWxsO1xuICAgICAgICAgICAgbSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3RhcnRPZmZzZXQ6IG51bWJlciA9IDA7XG4gICAgICAgICAgICBpZiAoY2hpbGRXaWR0aCA8IChyIC0gbCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9ICgociAtIGwpIC0gY2hpbGRXaWR0aCkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmlld0l0ZW0gPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIG0gPSB2aWV3SXRlbS5sYXlvdXRQYXJhbXMubWFyZ2luO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodmlld0l0ZW0uZ3Jhdml0eSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuTGVmdDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LkF1dG86XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuUmlnaHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LlRvcDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0cG9pbnQueSA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LkJvdHRvbTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0cG9pbnQueSA9IGIgLSB2aWV3SXRlbS5oZWlnaHQgLSBtLm1hcmdpbkJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuQ2VudGVyOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRwb2ludC55ID0gdCArICgoYiAtIHQgLSB2aWV3SXRlbS5oZWlnaHQpID4gMCA/IGIgLSB0IC0gdmlld0l0ZW0uaGVpZ2h0IDogMCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXJ0cG9pbnQub2Zmc2V0KG0ubWFyZ2luTGVmdCA+IDAgPyBtLm1hcmdpbkxlZnQgOiAwLCBtLm1hcmdpblRvcCA+IDAgPyBtLm1hcmdpblRvcCA6IDApO1xuICAgICAgICAgICAgICAgIHZpZXdJdGVtLm9uTGF5b3V0KHN0YXJ0cG9pbnQueCwgc3RhcnRwb2ludC55LCBzdGFydHBvaW50LnggKyB2aWV3SXRlbS53aWR0aCwgc3RhcnRwb2ludC55ICsgdmlld0l0ZW0uaGVpZ2h0LGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgc3RhcnRwb2ludC5vZmZzZXQodmlld0l0ZW0ud2lkdGggKyAobS5tYXJnaW5SaWdodCA+IDAgPyBtLm1hcmdpblJpZ2h0IDogMCksIDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsYXlvdXRWZXJ0aWNhbChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICBsZXQgdmlld0l0ZW06IFZpZXc7XG4gICAgICAgICAgICBsZXQgbTogTWFyZ2luO1xuICAgICAgICAgICAgbGV0IHN0YXJ0cG9pbnQ6IFBvaW50ID0gbmV3IFBvaW50KGwsIHQpO1xuICAgICAgICAgICAgbGV0IGxlbmd0aDogbnVtYmVyID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgY2hpbGRIZWlnaHQ6IG51bWJlciA9IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2aWV3SXRlbSA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgbSA9IHZpZXdJdGVtLmxheW91dFBhcmFtcy5tYXJnaW47XG4gICAgICAgICAgICAgICAgY2hpbGRIZWlnaHQgKz0gdmlld0l0ZW0uaGVpZ2h0ICsgKG0ubWFyZ2luVG9wICsgbS5tYXJnaW5Cb3R0b20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlld0l0ZW0gPSBudWxsO1xuICAgICAgICAgICAgbSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3RhcnRPZmZzZXQ6IG51bWJlciA9IDA7XG4gICAgICAgICAgICBpZiAoY2hpbGRIZWlnaHQgPCAoYiAtIHQpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSAoKGIgLSB0KSAtIGNoaWxkSGVpZ2h0KSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2aWV3SXRlbSA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgbSA9IHZpZXdJdGVtLmxheW91dFBhcmFtcy5tYXJnaW47XG4gICAgICAgICAgICAgICAgc3dpdGNoICh2aWV3SXRlbS5ncmF2aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR3Jhdml0eS5MZWZ0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuQXV0bzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0cG9pbnQueCA9IGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LlJpZ2h0OlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRwb2ludC54ID0gciAtIHZpZXdJdGVtLndpZHRoIC0gbS5tYXJnaW5SaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuVG9wOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnRwb2ludC55ID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEdyYXZpdHkuQm90dG9tOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnRwb2ludC55ID0gYi12aWV3SXRlbS5oZWlnaHQtbS5tYXJnaW5Cb3R0b207XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHcmF2aXR5LkNlbnRlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0cG9pbnQueSA9IHQrKChiLXQtdmlld0l0ZW0uaGVpZ2h0KT4wP2ItdC12aWV3SXRlbS5oZWlnaHQ6MCkvMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0cG9pbnQueCA9IGwgKyAoKHIgLSBsIC0gdmlld0l0ZW0ud2lkdGgpID4gMCA/IHIgLSBsIC0gdmlld0l0ZW0ud2lkdGggOiAwKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhcnRwb2ludC5vZmZzZXQobS5tYXJnaW5MZWZ0ID4gMCA/IG0ubWFyZ2luTGVmdCA6IDAsIG0ubWFyZ2luVG9wID4gMCA/IG0ubWFyZ2luVG9wIDogMCk7XG4gICAgICAgICAgICAgICAgdmlld0l0ZW0ub25MYXlvdXQoc3RhcnRwb2ludC54LCBzdGFydHBvaW50LnksIHN0YXJ0cG9pbnQueCArIHZpZXdJdGVtLndpZHRoLCBzdGFydHBvaW50LnkgKyB2aWV3SXRlbS5oZWlnaHQsY2FudmFzKTtcbiAgICAgICAgICAgICAgICAvLyBzdGFydHBvaW50LnRyYW5zbGF0ZSh2aWV3SXRlbS53aWR0aCArIChtLm1hcmdpblJpZ2h0PjA/IG0ubWFyZ2luUmlnaHQ6MCksMCk7XG4gICAgICAgICAgICAgICAgc3RhcnRwb2ludC5vZmZzZXQoMCwgdmlld0l0ZW0uaGVpZ2h0ICsgKG0ubWFyZ2luQm90dG9tID4gMCA/IG0ubWFyZ2luQm90dG9tIDogMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi92aWV3L2ltcGxlbWVudGlvbi9WaWV3R3JvdXAudHNcIiAvPlxuXG5cblxubmFtZXNwYWNlIGFuZHJvaWQud2lkZ2V0IHtcblxuICAgIGltcG9ydCBQYWRkaW5nID0gYW5kcm9pZC5ncmFwaGljcy5QYWRkaW5nO1xuICAgIGltcG9ydCBHcmF2aXR5ID0gYW5kcm9pZC5ncmFwaGljcy5HcmF2aXR5O1xuICAgIGltcG9ydCBSZWN0ID0gYW5kcm9pZC5ncmFwaGljcy5SZWN0O1xuICAgIGltcG9ydCBBbGlnbkVsbWVudCA9IGFuZHJvaWQuZ3JhcGhpY3MuQWxpZ25FbG1lbnQ7XG4gICAgaW1wb3J0IE1hcmdpbiA9IGFuZHJvaWQuZ3JhcGhpY3MuTWFyZ2luO1xuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuICAgIGltcG9ydCBQb2ludCA9IGFuZHJvaWQuZ3JhcGhpY3MuUG9pbnQ7XG4gICAgaW1wb3J0IE1lYXN1cmVTcGVjID0gYW5kcm9pZC52aWV3Lk1lYXN1cmVTcGVjO1xuICAgIGltcG9ydCBPcmllbnRhdGlvbiA9IGFuZHJvaWQuZ3JhcGhpY3MuT3JpZW50YXRpb247XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG5cbiAgICBleHBvcnQgY2xhc3MgTGlzdFZpZXcgZXh0ZW5kcyBWaWV3R3JvdXB7XG5cbiAgICB9XG59IiwibmFtZXNwYWNlIGFuZHJvaWQud2lkZ2V0IHtcbiAgICBpbXBvcnQgUGFkZGluZyA9IGFuZHJvaWQuZ3JhcGhpY3MuUGFkZGluZztcbiAgICBpbXBvcnQgQWxpZ24gPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduO1xuICAgIGltcG9ydCBHcmF2aXR5ID0gYW5kcm9pZC5ncmFwaGljcy5HcmF2aXR5O1xuXG5cbiAgICBpbXBvcnQgQWxpZ25FbG1lbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduRWxtZW50O1xuICAgIGltcG9ydCBNYXJnaW4gPSBhbmRyb2lkLmdyYXBoaWNzLk1hcmdpbjtcblxuICAgIGltcG9ydCBTaXplID0gYW5kcm9pZC5ncmFwaGljcy5TaXplO1xuICAgIGltcG9ydCBDYW52YXMgPSBhbmRyb2lkLmdyYXBoaWNzLkNhbnZhcztcbiAgICBpbXBvcnQgVmlld0dyb3VwID0gYW5kcm9pZC52aWV3LlZpZXdHcm91cDtcbiAgICBpbXBvcnQgVmlldyA9IGFuZHJvaWQudmlldy5WaWV3O1xuXG4gICAgaW1wb3J0IFBvaW50ID0gYW5kcm9pZC5ncmFwaGljcy5Qb2ludDtcbiAgICBpbXBvcnQgTWVhc3VyZVNwZWMgPSBhbmRyb2lkLnZpZXcuTWVhc3VyZVNwZWM7XG4gICAgaW1wb3J0IEZvbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkZvbnQ7XG4gICAgaW1wb3J0IExheW91dEluZm8gID0gYW5kcm9pZC52aWV3LkxheW91dEluZm87XG4gICAgaW1wb3J0IExheW91dFBhcmFtcyA9IGFuZHJvaWQudmlldy5MYXlvdXRQYXJhbXM7XG4gICAgZXhwb3J0IGVudW0gRWxsaXBzaXple1xuXG4gICAgfVxuICAgIGV4cG9ydCBjbGFzcyBUZXh0VmlldyBleHRlbmRzIFZpZXd7XG4gICAgICAgIHByaXZhdGUgdGV4dCA6c3RyaW5nO1xuICAgICAgICBwcml2YXRlIGZvbnQgOkZvbnQ7XG4gICAgICAgIHByaXZhdGUgX2VsbGlwc2l6ZTpFbGxpcHNpemU7XG4gICAgICAgIHByaXZhdGUgX21heFdpZHRoOm51bWJlcjtcbiAgICAgICAgcHJpdmF0ZSBfbGluZXNwYWNlOm51bWJlcjtcbiAgICAgICAgb25EcmF3KGNhbnZhczpDYW52YXMpOnZvaWR7ICAgICAgICAgICAgXG4gICAgICAgICAgICBzdXBlci5vbkRyYXcoY2FudmFzKTtcbiAgICAgICAgICAgIGNhbnZhcy5kcmF3VGV4dCh0aGlzLnRleHQsdGhpcy5sYXlvdXRJbmZvLmlubmVycmVjdC5zdGFydFBvaW50LHRoaXMuZm9udCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHB1YmxpYyBzZXRUZXh0KHRleHQ6c3RyaW5nKTp2b2lke1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0Rm9udChmb250OkZvbnQpOnZvaWR7XG4gICAgICAgICAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IGVsbGlwc2l6ZShlbGxpcHNpemU6RWxsaXBzaXplKXtcbiAgICAgICAgICAgIHRoaXMuX2VsbGlwc2l6ZSA9IGVsbGlwc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldCBlbGxpcHNpemUoKTpFbGxpcHNpemV7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxsaXBzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IG1heFdpZHRoKG1heFdpZHRoOm51bWJlcil7XG4gICAgICAgICAgICB0aGlzLl9tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0IG1heFdpZHRoKCk6bnVtYmVye1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21heFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBnZXQgbGluZXNwYWNlKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGluZXNwYWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0IGxpbmVzcGFjZShsaW5lc3BhY2U6bnVtYmVyKXtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVzcGFjZSA9IGxpbmVzcGFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByaXZhdGUgX21lYXN1cmVTdHJpbmcod2lkdGg6bnVtYmVyKTpTaXple1xuICAgICAgICAvLyAgICAgcmV0dXJuXG4gICAgICAgIC8vIH1cbiAgICAgICAgICAgIFxuICAgICAgICBvbk1lYXN1cmUod2lkdGg6IE1lYXN1cmVTcGVjLCBoZWlnaHQ6IE1lYXN1cmVTcGVjLCBjYW52YXM6IENhbnZhcyk6IFNpemUge1xuICAgICAgICAgICAgaWYoIXRoaXMuZm9udCl7XG4gICAgICAgICAgICAgICAgdGhpcy5mb250ID0gIG5ldyBGb250KDE2LFwiXCIsJ3doaXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sYXlvdXRJbmZvID0gbmV3IExheW91dEluZm8oMCwwLDAsMCx0aGlzLnBhZGRpbmcsMCk7XG4gICAgICAgICAgICB2YXIgdzpudW1iZXIgPSB0aGlzLmxheW91dFBhcmFtcy53aWR0aDtcbiAgICAgICAgICAgIHZhciBoOm51bWJlciA9IHRoaXMubGF5b3V0UGFyYW1zLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBzaXplIDpTaXplID0gbmV3IFNpemUodywgaCk7XG4gICAgICAgICAgICB2YXIgd2lkdGhtb2RlID0gdGhpcy5sYXlvdXRQYXJhbXMud2lkdGhNb2RlO1xuICAgICAgICAgICAgdmFyIGhlaWdodG1vZGUgPSB0aGlzLmxheW91dFBhcmFtcy5oZWlnaHRNb2RlO1xuICAgICAgICAgICAgdmFyIHRleHRzaXplID0gY2FudmFzLm1lYXN1cmVTdHJpbmcodGhpcy50ZXh0LHRoaXMuZm9udCk7XG4gICAgICAgICAgICBpZih3aWR0aG1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpe1xuICAgICAgICAgICAgICAgIHNpemUud2lkdGggPSB3aWR0aC52YWx1ZTtcbiAgICAgICAgICAgIH1lbHNlIGlmKHdpZHRobW9kZSA9PT0gTGF5b3V0UGFyYW1zLldSQVBfQ09OVEVOVCl7XG4gICAgICAgICAgICAgICAgc2l6ZS53aWR0aCA9IHRleHRzaXplLndpZHRoPnRoaXMuX21heFdpZHRoP3RoaXMuX21heFdpZHRoOnRleHRzaXplLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoaGVpZ2h0bW9kZSA9PT0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCl7XG4gICAgICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBoZWlnaHQudmFsdWU7XG4gICAgICAgICAgICB9ZWxzZSBpZihoZWlnaHRtb2RlID09PSBMYXlvdXRQYXJhbXMuV1JBUF9DT05URU5UKXtcbiAgICAgICAgICAgICAgICBzaXplLmhlaWdodCA9IHRleHRzaXplLmhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsTGF5b3V0UGFyYW1zLkVYQUNUTFkpLG5ldyBNZWFzdXJlU3BlYyhzaXplLmhlaWdodCxMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICB9XG59IiwiXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGF0YWJhc2UvRGF0YVNldE9ic2VydmFibGUudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2FkYXB0ZXIvVmlld1BhZ2VyQWRhcHRlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbC9BcnJheUxpc3QudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWwvSGFuZGxlci50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vZGV2aWNlL0RldmljZS50c1wiIC8+XG5cbm5hbWVzcGFjZSBhbmRyb2lkLndpZGdldCB7XG5cbiAgICBpbXBvcnQgUGFkZGluZyA9IGFuZHJvaWQuZ3JhcGhpY3MuUGFkZGluZztcbiAgICBpbXBvcnQgR3Jhdml0eSA9IGFuZHJvaWQuZ3JhcGhpY3MuR3Jhdml0eTtcbiAgICBpbXBvcnQgUmVjdCA9IGFuZHJvaWQuZ3JhcGhpY3MuUmVjdDtcbiAgICBpbXBvcnQgQWxpZ25FbG1lbnQgPSBhbmRyb2lkLmdyYXBoaWNzLkFsaWduRWxtZW50O1xuICAgIGltcG9ydCBNYXJnaW4gPSBhbmRyb2lkLmdyYXBoaWNzLk1hcmdpbjtcbiAgICBpbXBvcnQgU2l6ZSA9IGFuZHJvaWQuZ3JhcGhpY3MuU2l6ZTtcbiAgICBpbXBvcnQgQ2FudmFzID0gYW5kcm9pZC5ncmFwaGljcy5DYW52YXM7XG4gICAgaW1wb3J0IFZpZXdHcm91cCA9IGFuZHJvaWQudmlldy5WaWV3R3JvdXA7XG4gICAgaW1wb3J0IFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcbiAgICBpbXBvcnQgUG9pbnQgPSBhbmRyb2lkLmdyYXBoaWNzLlBvaW50O1xuICAgIGltcG9ydCBNZWFzdXJlU3BlYyA9IGFuZHJvaWQudmlldy5NZWFzdXJlU3BlYztcbiAgICBpbXBvcnQgT3JpZW50YXRpb24gPSBhbmRyb2lkLmdyYXBoaWNzLk9yaWVudGF0aW9uO1xuICAgIGltcG9ydCBMYXlvdXRQYXJhbXMgPSBhbmRyb2lkLnZpZXcuTGF5b3V0UGFyYW1zO1xuICAgIGltcG9ydCBWaWV3UGFnZUFkYXB0ZXIgPSBhbmRyb2lkLmFkYXB0ZXIuVmlld1BhZ2VBZGFwdGVyO1xuICAgIGltcG9ydCBBcnJheUxpc3QgPSBhbmRyb2lkLnV0aWwuQXJyYXlMaXN0O1xuICAgIGltcG9ydCBEYXRhU2V0T2JzZXJ2ZXIgPSBhbmRyb2lkLmRhdGFiYXNlLkRhdGFTZXRPYnNlcnZlcjtcbiAgICBpbXBvcnQgSGFuZGxlciA9IGFuZHJvaWQudXRpbC5IYW5kbGVyO1xuICAgIGltcG9ydCBNZXNzYWdlID0gYW5kcm9pZC51dGlsLk1lc3NhZ2U7XG4gICAgaW1wb3J0IExvZyA9IGFuZHJvaWQudXRpbC5Mb2c7XG4gICAgaW1wb3J0IENvbnRleHQgPSBhbmRyb2lkLmFwcC5Db250ZXh0O1xuICAgIGltcG9ydCBNb3Rpb25FdmVudCA9IGFuZHJvaWQudmlldy5ldmVudC5Nb3Rpb25FdmVudDtcbiAgICBpbXBvcnQgRGV2aWNlID0gYW5kcm9pZC5kZXZpY2UuRGV2aWNlO1xuICAgIGxldCBUQUc6IHN0cmluZyA9IFwiU2NhbGVWaWV3UGFnZXJcIjtcbiAgICBjb25zdCBBTklNQVRJT05fRlJBTUVfRFVSQVRJT046IG51bWJlciA9IDEwMDAgLyA4MDtcbiAgICBjb25zdCBNSU5fU1BFRUQ6IG51bWJlciA9IDEwLjA7XG4gICAgY29uc3QgTUlOX1RPVUNIOiBudW1iZXIgPSAxMjtcblxuICAgIGNvbnN0IE1PVkVfTEVGVDogbnVtYmVyID0gMTAwMDE7XG4gICAgY29uc3QgTU9WRV9SSUdIVDogbnVtYmVyID0gMTAwMDI7XG4gICAgY29uc3QgTU9WRV9CQUNLOiBudW1iZXIgPSAxMDAwMztcbiAgICBjb25zdCBTQ0FMRV9DT05TVEFOVDogbnVtYmVyID0gMTAwO1xuICAgIGNvbnN0IFNUQVRFX01PVkVfTEVGVDogbnVtYmVyID0gMTEwMDE7XG4gICAgY29uc3QgU1RBVEVfTU9WRV9SSUdIVDogbnVtYmVyID0gMTEwMDI7XG4gICAgZXhwb3J0IGNsYXNzIFZpZXdQYWdlciBleHRlbmRzIFZpZXdHcm91cCB7XG5cbiAgICAgICAgcHJpdmF0ZSBtUG9zaXRpb246IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgbUFkYXB0ZXI6IFZpZXdQYWdlQWRhcHRlcjtcbiAgICAgICAgcHJpdmF0ZSBtT2xkQWRhcHRlcjogVmlld1BhZ2VBZGFwdGVyO1xuICAgICAgICBwcml2YXRlIG1WaWV3U3RhY2s6IEFycmF5TGlzdDxJdGVtSW5mbz4gPSBuZXcgQXJyYXlMaXN0PEl0ZW1JbmZvPigpO1xuICAgICAgICBwcml2YXRlIG1JbmRleDogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBtU2l6ZTogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBtQW5pbWF0aW9uU3RhdGU6IG51bWJlciA9IDA7XG4gICAgICAgIHByaXZhdGUgbVNjYWxlOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIG1Jc1NjYWxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBwcml2YXRlIG1NaW5fc3BlZWQ6IG51bWJlciA9IE1JTl9TUEVFRDtcbiAgICAgICAgcHJpdmF0ZSBtaW5fdG91Y2g6IG51bWJlciA9IE1JTl9UT1VDSDtcbiAgICAgICAgcHJpdmF0ZSBtTGF5b3V0UGFyYW1zOiBMYXlvdXRQYXJhbXM7XG4gICAgICAgIHByaXZhdGUgbUxhc3RBbmltYXRpb25UaW1lOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIG1DdXJyZW50QW5pbWF0aW9uVGltZTogbnVtYmVyID0gMDtcbiAgICAgICAgcHJpdmF0ZSBtU3BlZWQ6IG51bWJlciA9IDEzMDtcbiAgICAgICAgcHJpdmF0ZSBtQ3VycmVudFZpZXc6IFZpZXc7XG4gICAgICAgIHByaXZhdGUgbU5leHRWaWV3OiBWaWV3O1xuICAgICAgICBwcml2YXRlIG1QcmVWaWV3OiBWaWV3O1xuICAgICAgICBwcml2YXRlIG1BbmltYXRpb25FbmQ6IGJvb2xlYW4gPSB0cnVlO1xuICAgICAgICBwcml2YXRlIG1DZW50ZXJYOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIG1DZW50ZXJZOiBudW1iZXIgPSAwO1xuICAgICAgICBwcml2YXRlIGxpc3RlbmVyOiBQYWdlckNoYW5nZWRMaXN0ZW5lcjtcbiAgICAgICAgcHJpdmF0ZSBtRGF0YVNldE9ic2VydmVyOiBEYXRhU2V0T2JzZXJ2ZXI7XG4gICAgICAgIHByaXZhdGUgbUhhbmRsZXI6IEhhbmRsZXI7XG4gICAgICAgIHByaXZhdGUgbUFyZWFUb3VjaExpc3RlbmVyOiBBcmVhVG91Y2hMaXN0ZW5lcjtcbiAgICAgICAgcHJpdmF0ZSBkaXJlY3Rpb24gPSAxO1xuICAgICAgICBwcml2YXRlIG9sZHg7XG4gICAgICAgIHByaXZhdGUgb2xkeTtcbiAgICAgICAgcHJpdmF0ZSBkb3duWDtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgICAgICBzdXBlcihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xuICAgICAgICAgICAgbGV0IGNvbnRleHQ6IENvbnRleHQgPSB0aGlzLmdldENvbnRleHQoKTtcbiAgICAgICAgICAgIHRoaXMubU1pbl9zcGVlZCA9IE1JTl9TUEVFRCAqRGV2aWNlLmRlbnNpdHk7XG4gICAgICAgICAgICB0aGlzLm1MYXlvdXRQYXJhbXMgPSBuZXcgTGF5b3V0UGFyYW1zKExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQsIExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpO1xuICAgICAgICAgICAgdGhpcy5taW5fdG91Y2ggPSAzO1xuICAgICAgICAgICAgdGhpcy5tSGFuZGxlciA9IG5ldyBIYW5kbGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMubUhhbmRsZXIuaGFuZGxlTWVzc2FnZSA9IChtc2c6IE1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1zZy53aGF0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTU9WRV9MRUZUOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb0xlZnRPckJvdW5jZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTU9WRV9SSUdIVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9SaWdodE9yQm91bmNlQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEFyZWFUb3VjaExpc3RlbmVyKGw6IEFyZWFUb3VjaExpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lciA9IGw7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgb25JbnRlcmNlcHRUb3VjaEV2ZW50KGV2bnQ6IE1vdGlvbkV2ZW50KTogYm9vbGVhbiB7XG5cbiAgICAgICAgICAgIGxldCBhY3Rpb24gPSBldm50LmFjdGlvbjtcbiAgICAgICAgICAgIGxldCB4ID0gZXZudC54O1xuICAgICAgICAgICAgbGV0IHkgPSBldm50Lnk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fRE9XTjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbGR4ID0geDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbGR5ID0geTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3duWCA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1ZFOlxuICAgICAgICAgICAgICAgICAgICBpZiAoeSAtIHRoaXMub2xkeSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoeCAtIHRoaXMub2xkeCkgLyBNYXRoLmFicyh5IC0gdGhpcy5vbGR5KSA+IDIgJiYgTWF0aC5hYnMoeCAtIHRoaXMuZG93blgpID4gdGhpcy5taW5fdG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIG9uVG91Y2hFdmVudChldmVudDogTW90aW9uRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5tQW5pbWF0aW9uRW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gZXZlbnQuYWN0aW9uXG4gICAgICAgICAgICBsZXQgeCA9IGV2ZW50Lng7XG4gICAgICAgICAgICBsZXQgeSA9IGV2ZW50Lnk7XG4gICAgICAgICAgICBpZiAodGhpcy5tQ3VycmVudFZpZXcgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIE1vdGlvbkV2ZW50LkFDVElPTl9NT1ZFOiB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kKFwiZXZlbnRcIiwgXCJtb3ZlIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB4IC0gdGhpcy5vbGR4ID4gMCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlKHggLSB0aGlzLm9sZHgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZHggPSB4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fVVA6XG4gICAgICAgICAgICAgICAgY2FzZSBNb3Rpb25FdmVudC5BQ1RJT05fQ0FOQ0VMOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZHggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2xkeSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuZG93blggLSB4KSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPj0gdGhpcy53aWR0aCAvIDQgKiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lci5vbkxlZnRUb3VjaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4IDw9IHRoaXMud2lkdGggLyA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lci5vblJpZ2h0VG91Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1BcmVhVG91Y2hMaXN0ZW5lci5vbk1pZGRsZVRvdWNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVRvQW5pbWF0aW9uKHRoaXMuZGlyZWN0aW9uICogdGhpcy5tTWluX3NwZWVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgb25NZWFzdXJlKHdpZHRoTWVhc3VyZVNwZWM6IE1lYXN1cmVTcGVjLCBoZWlnaHRNZWFzdXJlU3BlYzogTWVhc3VyZVNwZWMsIGNhbnZhczogQ2FudmFzKTogU2l6ZSB7XG4gICAgICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHdpZHRoTWVhc3VyZVNwZWMuZ2V0TWVhc3VyZVZhbHVlKCk7XG4gICAgICAgICAgICBsZXQgaGVpZ2h0OiBudW1iZXIgPSBoZWlnaHRNZWFzdXJlU3BlYy5nZXRNZWFzdXJlVmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMubUNlbnRlclggPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICB0aGlzLm1DZW50ZXJZID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tVmlld1N0YWNrLnNpemUoKTsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkOiBWaWV3ID0gdGhpcy5tVmlld1N0YWNrLmdldChpKS52aWV3O1xuICAgICAgICAgICAgICAgIGxldCBscDogTGF5b3V0UGFyYW1zID0gY2hpbGQubGF5b3V0UGFyYW1zO1xuICAgICAgICAgICAgICAgIGxldCB3ID0gbHAud2lkdGg7XG4gICAgICAgICAgICAgICAgbGV0IGggPSBscC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKGxwLmhlaWdodE1vZGUgPT09IExheW91dFBhcmFtcy5NQVRDSF9QQVJFTlQpIHtcbiAgICAgICAgICAgICAgICAgICAgaCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxwLndpZHRoTW9kZSA9PT0gTGF5b3V0UGFyYW1zLk1BVENIX1BBUkVOVCkge1xuICAgICAgICAgICAgICAgICAgICB3ID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoaWxkLm9uTWVhc3VyZShuZXcgTWVhc3VyZVNwZWModywgbHAud2lkdGhNb2RlKSwgbmV3IE1lYXN1cmVTcGVjKGgsIGxwLmhlaWdodE1vZGUpLCBjYW52YXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNpemU6IFNpemUgPSBuZXcgU2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuc2V0TWVhc3VyZWREaW1lbnNpb24obmV3IE1lYXN1cmVTcGVjKHNpemUud2lkdGgsIExheW91dFBhcmFtcy5FWEFDVExZKSwgbmV3IE1lYXN1cmVTcGVjKHNpemUuaGVpZ2h0LCBMYXlvdXRQYXJhbXMuRVhBQ1RMWSkpO1xuICAgICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBvbkxheW91dChsOiBudW1iZXIsIHQ6IG51bWJlciwgcjogbnVtYmVyLCBiOiBudW1iZXIsIGNhbnZhczogQ2FudmFzKTogdm9pZCB7XG4gICAgICAgICAgICB0aGlzLmxheW91dEluZm8ucmVzZXQobCwgdCwgciwgYiwgdGhpcy5wYWRkaW5nLCAwKTtcbiAgICAgICAgICAgIHZhciBpbm5lcnJlY3Q6IFJlY3QgPSB0aGlzLmxheW91dEluZm8uaW5uZXJyZWN0O1xuICAgICAgICAgICAgbGV0IHdpZHRoOiBudW1iZXIgPSByIC0gbDtcbiAgICAgICAgICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IGIgLSB0O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1WaWV3U3RhY2suc2l6ZSgpOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmlldzogVmlldyA9IHRoaXMubVZpZXdTdGFjay5nZXQoaSkudmlldztcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5tVmlld1N0YWNrLmdldChpKS5pbmRleDtcbiAgICAgICAgICAgICAgICBsZXQgZ2FwID0gcG9zIC0gdGhpcy5tSW5kZXg7XG4gICAgICAgICAgICAgICAgbGV0IHZpZXdsZWZ0ID0gdmlldy5wYWRkaW5nLmxlZnRQYWRkaW5nICsgKHdpZHRoIC0gdmlldy53aWR0aCkgLyAyO1xuICAgICAgICAgICAgICAgIGxldCB2aWV3dG9wID0gdmlldy5wYWRkaW5nLnRvcFBhZGRpbmcgKyAoaGVpZ2h0IC0gdmlldy5oZWlnaHQpIC8gMjtcbiAgICAgICAgICAgICAgICBnYXAgPSBnYXAgPiAwID8gMCA6IGdhcDtcbiAgICAgICAgICAgICAgICB2aWV3Lm9uTGF5b3V0KHZpZXdsZWZ0ICsgZ2FwICogd2lkdGgsIHZpZXd0b3AsIHZpZXdsZWZ0ICsgZ2FwICogd2lkdGggKyB2aWV3LndpZHRoLCB2aWV3dG9wICsgdmlldy5oZWlnaHQsY2FudmFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBkaXNwYXRjaERyYXcoY2FudmFzOiBDYW52YXMpOiB2b2lkIHtcbiAgICAgICAgICAgIC8vIHN1cGVyLmRpc3BhdGNoRHJhdyhjYW52YXMpO1xuICAgICAgICAgICAgLy8gTG9nLmQoJ2Rpc3BhdGNoRHJhdyAnICsgdGhpcy5tUG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKHRoaXMubUFuaW1hdGlvblN0YXRlID09PSBTVEFURV9NT1ZFX0xFRlQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaGlsZChjYW52YXMsIHRoaXMubU5leHRWaWV3KTtcbiAgICAgICAgICAgICAgICBjYW52YXMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy50cmFuc2xhdGUodGhpcy5tUG9zaXRpb24sIDApO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NoaWxkKGNhbnZhcywgdGhpcy5tQ3VycmVudFZpZXcpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1BbmltYXRpb25TdGF0ZSA9PT0gU1RBVEVfTU9WRV9SSUdIVCkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2hpbGQoY2FudmFzLCB0aGlzLm1DdXJyZW50Vmlldyk7XG4gICAgICAgICAgICAgICAgY2FudmFzLnNhdmUoKTtcbiAgICAgICAgICAgICAgICBjYW52YXMudHJhbnNsYXRlKHRoaXMubVBvc2l0aW9uLCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaGlsZChjYW52YXMsIHRoaXMubVByZVZpZXcpO1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaGlsZChjYW52YXMsIHRoaXMubUN1cnJlbnRWaWV3KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEFkYXB0ZXIoYWRhcHRlcjogVmlld1BhZ2VBZGFwdGVyKSB7XG4gICAgICAgICAgICB0aGlzLm1PbGRBZGFwdGVyID0gdGhpcy5tQWRhcHRlcjtcbiAgICAgICAgICAgIHRoaXMubUFkYXB0ZXIgPSBhZGFwdGVyO1xuICAgICAgICAgICAgaWYgKHRoaXMubUFkYXB0ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubURhdGFTZXRPYnNlcnZlciA9IG5ldyBEYXRhU2V0T2JzZXJ2ZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5tRGF0YVNldE9ic2VydmVyLm9uQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tU2l6ZSA9IHNlbGYubUFkYXB0ZXIuZ2V0Q291bnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tRGF0YVNldE9ic2VydmVyLm9uSW52YWxpZGF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW52YWxpZGF0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubUFkYXB0ZXIucmVnaXN0ZXJEYXRhU2V0T2JzZXJ2ZXIodGhpcy5tRGF0YVNldE9ic2VydmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1TaXplID0gYWRhcHRlci5nZXRDb3VudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE5vcm1hbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNldEN1cnJlbnRJdGVtKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgICAgIExvZy5kKCdzZXRDdXJyZW50SXRlbSAnICsgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5tSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaE5vcm1hbCgpO1xuICAgICAgICAgICAgdGhpcy5wYWdlck1vdmluZ0VuZCh0aGlzLm1JbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgZ2V0Q3VycmVudEl0ZW0oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBwdWJsaWMgc2V0UGFnZXJDaGFuZ2VkTGlzdGVuZXIobGlzdGVuOiBQYWdlckNoYW5nZWRMaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgcmVmcmVzaE5vcm1hbCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1BZGFwdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubUluZGV4ID49IDAgJiYgdGhpcy5tSW5kZXggPCB0aGlzLm1BZGFwdGVyLmdldENvdW50KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVSZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVMb2FkKHRoaXMubUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1WaWV3U3RhY2suc2l6ZSgpOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2aWV3OiBWaWV3ID0gdGhpcy5tVmlld1N0YWNrLmdldChpKS52aWV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSB0aGlzLm1WaWV3U3RhY2suZ2V0KGkpLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLm1JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubUN1cnJlbnRWaWV3ID0gdmlldztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXcodmlldywgMSwgdGhpcy5tTGF5b3V0UGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5tSW5kZXggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tUHJlVmlldyA9IHZpZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWaWV3KHZpZXcsIDAsIHRoaXMubUxheW91dFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMubUluZGV4ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubU5leHRWaWV3ID0gdmlldztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZpZXcodmlldywgMSwgdGhpcy5tTGF5b3V0UGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tQWRhcHRlci5nZXRDb3VudCgpID09PSAwICYmIHRoaXMubUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnY3VycmVudCBpbmRleCBpcyAnICsgdGhpcy5tSW5kZXggKyAnIHNpemUgaXMgJyArIHRoaXMubUFkYXB0ZXIuZ2V0Q291bnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHByaXZhdGUgcHJlUmVtb3ZlKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1WaWV3U3RhY2suc2l6ZSgpOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmlldzogVmlldyA9IHRoaXMubVZpZXdTdGFjay5nZXQoaSkudmlldztcbiAgICAgICAgICAgICAgICBsZXQgcG9zaXRpb246IG51bWJlciA9IHRoaXMubVZpZXdTdGFjay5nZXQoaSkuaW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVWaWV3KHZpZXcpO1xuICAgICAgICAgICAgICAgIHRoaXMubUFkYXB0ZXIuZGVzdG9yeUl0ZW0ocG9zaXRpb24sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIHByaXZhdGUgcHJlTG9hZChwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tQWRhcHRlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubVZpZXdTdGFjay5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMubVZpZXdTdGFjay5hZGQodGhpcy5wcmVMb2FkUHJlVmlldyhwb3NpdGlvbikpO1xuICAgICAgICAgICAgICAgIHRoaXMubVZpZXdTdGFjay5hZGQodGhpcy5sb2FkVmlldyhwb3NpdGlvbikpO1xuICAgICAgICAgICAgICAgIHRoaXMubVZpZXdTdGFjay5hZGQodGhpcy5wcmVMb2FkTmV4dFZpZXcocG9zaXRpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHJpdmF0ZSBwcmVMb2FkUHJlVmlldyhwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgICAgICAgICBsZXQgcG9zID0gcG9zaXRpb24gLSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZFZpZXcocG9zKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHJpdmF0ZSBwcmVMb2FkTmV4dFZpZXcocG9zaXRpb246IG51bWJlcikge1xuICAgICAgICAgICAgbGV0IHBvcyA9IHBvc2l0aW9uICsgMTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRWaWV3KHBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGxvYWRWaWV3KGluZGV4OiBudW1iZXIpOiBJdGVtSW5mbyB7XG4gICAgICAgICAgICBpZiAodGhpcy5tQWRhcHRlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93ICdOdWxsIHBvaW50IEV4Y2VwdGlvbiBhZGFwdGVyIGlzIG51bGwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBvcyA9IGluZGV4O1xuICAgICAgICAgICAgaWYgKHBvcyA+PSB0aGlzLm1TaXplKSB7XG4gICAgICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3MgPCAwKSB7XG4gICAgICAgICAgICAgICAgcG9zICs9IHRoaXMubVNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmlldzogVmlldyA9IHRoaXMubUFkYXB0ZXIuaW5pdEl0ZW0ocG9zLCB0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSXRlbUluZm8odmlldywgaW5kZXgsIHBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIG1vdmUoZGlzOiBudW1iZXIpIHtcbiAgICAgICAgICAgIExvZy5kKFwibW92ZSBcIiArIGRpcyk7XG4gICAgICAgICAgICBpZiAodGhpcy5tUG9zaXRpb24gPT09IDAgJiYgZGlzICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlckNoYW5nZWQodGhpcy5tSW5kZXgsIGRpcyA+IDAgPyB0aGlzLm1JbmRleCArIDEgOiB0aGlzLm1JbmRleCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tUG9zaXRpb24gKz0gZGlzO1xuICAgICAgICAgICAgaWYgKHRoaXMubVBvc2l0aW9uID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1BbmltYXRpb25TdGF0ZSA9IFNUQVRFX01PVkVfUklHSFQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tUG9zaXRpb24gPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tQW5pbWF0aW9uU3RhdGUgPSBTVEFURV9NT1ZFX0xFRlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbW92ZWRlZ3JlZXByZVZpZXcgPSB0aGlzLm1Qb3NpdGlvbiAvIHRoaXMud2lkdGg7XG4gICAgICAgICAgICBsZXQgbW92ZWRlZ3JlZSA9IHRoaXMubVBvc2l0aW9uICogKHRoaXMubUluZGV4ICsgMSkgLyB0aGlzLndpZHRoICogdGhpcy5tQWRhcHRlci5nZXRDb3VudCgpO1xuICAgICAgICAgICAgdGhpcy5wYWdlck1vdmluZyhtb3ZlZGVncmVlcHJlVmlldywgbW92ZWRlZ3JlZSk7XG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBwcmVwYXJlVG9BbmltYXRpb24oc3BlZWQ6IG51bWJlcikge1xuICAgICAgICAgICAgbGV0IG5vdzogbnVtYmVyID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIHRoaXMubUFuaW1hdGlvbkVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5tTGFzdEFuaW1hdGlvblRpbWUgPSBub3c7XG4gICAgICAgICAgICB0aGlzLm1DdXJyZW50QW5pbWF0aW9uVGltZSA9IG5vdztcbiAgICAgICAgICAgIHRoaXMubVNwZWVkID0gc3BlZWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5tU3BlZWQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1TcGVlZCA9IHRoaXMubU1pbl9zcGVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcGVlZCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1TcGVlZCA9IE1hdGguYWJzKHRoaXMubVNwZWVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRvUmlnaHRPckJvdW5jZUFuaW1hdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1TcGVlZCA9IC0xICogTWF0aC5hYnModGhpcy5tU3BlZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZG9MZWZ0T3JCb3VuY2VBbmltYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBmbGlwTGVmdCgpIHtcbiAgICAgICAgICAgIExvZy5kKFwiZmxpcExlZnQgXCIgKyB0aGlzLm1BbmltYXRpb25FbmQpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm1BbmltYXRpb25FbmQpIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMubVBvc2l0aW9uID0gdGhpcy5tQ3VycmVudFZpZXcubGVmdDtcbiAgICAgICAgICAgIHRoaXMubW92ZSgtMSk7XG4gICAgICAgICAgICBsZXQgbm93OiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5tQW5pbWF0aW9uRW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm1MYXN0QW5pbWF0aW9uVGltZSA9IG5vdztcbiAgICAgICAgICAgIHRoaXMubUN1cnJlbnRBbmltYXRpb25UaW1lID0gbm93O1xuICAgICAgICAgICAgdGhpcy5tU3BlZWQgPSAtdGhpcy5tTWluX3NwZWVkO1xuICAgICAgICAgICAgdGhpcy5kb0xlZnRPckJvdW5jZUFuaW1hdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIGZsaXBSaWdodCgpIHtcbiAgICAgICAgICAgIExvZy5kKFwiZmlscFJpZ2h0IFwiICsgdGhpcy5tQW5pbWF0aW9uRW5kKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5tQW5pbWF0aW9uRW5kKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLm1Qb3NpdGlvbiA9IHRoaXMubUN1cnJlbnRWaWV3LmxlZnQ7XG4gICAgICAgICAgICB0aGlzLm1vdmUoMSk7XG4gICAgICAgICAgICBsZXQgbm93OiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5tQW5pbWF0aW9uRW5kID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm1MYXN0QW5pbWF0aW9uVGltZSA9IG5vdztcbiAgICAgICAgICAgIHRoaXMubUN1cnJlbnRBbmltYXRpb25UaW1lID0gbm93O1xuICAgICAgICAgICAgdGhpcy5tU3BlZWQgPSB0aGlzLm1NaW5fc3BlZWQ7XG4gICAgICAgICAgICB0aGlzLmRvUmlnaHRPckJvdW5jZUFuaW1hdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBkb1JpZ2h0T3JCb3VuY2VBbmltYXRpb24oKSB7XG4gICAgICAgICAgICBsZXQgbm93OiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgbGV0IHQgPSAxO1xuICAgICAgICAgICAgbGV0IHM6IG51bWJlciA9IHRoaXMubVNwZWVkICogdDtcbiAgICAgICAgICAgIGlmICh0aGlzLm1Qb3NpdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tUG9zaXRpb24gPT09IHRoaXMud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX1JJR0hUKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRSaWdodGFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzICsgdGhpcy5tUG9zaXRpb24gPiB0aGlzLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLndpZHRoIC0gdGhpcy5tUG9zaXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tUG9zaXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX1JJR0hUKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRCb3VuY2VhbmltdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzICsgdGhpcy5tUG9zaXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHMgPSAtdGhpcy5tUG9zaXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tb3ZlKHMpO1xuICAgICAgICAgICAgdGhpcy5tQ3VycmVudEFuaW1hdGlvblRpbWUgKz0gQU5JTUFUSU9OX0ZSQU1FX0RVUkFUSU9OO1xuICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX0xFRlQpO1xuICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX1JJR0hUKTtcbiAgICAgICAgICAgIHRoaXMubUhhbmRsZXIuc2VuZE1lc3NhZ2VEZWxheWVkKHRoaXMubUhhbmRsZXIub2J0YWluTWVzc2FnZShNT1ZFX1JJR0hUKSwgQU5JTUFUSU9OX0ZSQU1FX0RVUkFUSU9OKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZG9MZWZ0T3JCb3VuY2VBbmltYXRpb24oKSB7XG4gICAgICAgICAgICAvLyBMb2cuZChUQUcsIFwiZG9sZWZ0QW5pbWF0aW9uICBcIik7XG4gICAgICAgICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGxldCB0ID0gMTsvLyhub3cgLSBtTGFzdEFuaW1hdGlvblRpbWUpLzEwMDA7XG4gICAgICAgICAgICBsZXQgcyA9ICh0aGlzLm1TcGVlZCAqIHQpO1xuICAgICAgICAgICAgaWYgKHRoaXMubVBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1Qb3NpdGlvbiArIHRoaXMud2lkdGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1IYW5kbGVyLnJlbW92ZU1lc3NhZ2VzKE1PVkVfTEVGVCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kTGVmdEFuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzICsgdGhpcy5tUG9zaXRpb24gKyB0aGlzLndpZHRoIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBzID0gLSh0aGlzLm1Qb3NpdGlvbiArIHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubVBvc2l0aW9uID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX0xFRlQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZEJvdW5jZWFuaW10aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocyArIHRoaXMubVBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBzID0gLXRoaXMubVBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tb3ZlKHMpO1xuICAgICAgICAgICAgdGhpcy5tQ3VycmVudEFuaW1hdGlvblRpbWUgKz0gQU5JTUFUSU9OX0ZSQU1FX0RVUkFUSU9OO1xuICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX0xFRlQpO1xuICAgICAgICAgICAgdGhpcy5tSGFuZGxlci5yZW1vdmVNZXNzYWdlcyhNT1ZFX1JJR0hUKTtcbiAgICAgICAgICAgIHRoaXMubUhhbmRsZXIuc2VuZE1lc3NhZ2VEZWxheWVkKHRoaXMubUhhbmRsZXIub2J0YWluTWVzc2FnZShNT1ZFX0xFRlQpLCBBTklNQVRJT05fRlJBTUVfRFVSQVRJT04pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBlbmRCb3VuY2VhbmltdGlvbigpIHtcbiAgICAgICAgICAgIExvZy5kKFwiZW5kQm91bmNlYW5pbXRpb24gIFwiKTtcbiAgICAgICAgICAgIHRoaXMubUFuaW1hdGlvbkVuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1TY2FsZSA9IDA7XG4gICAgICAgICAgICB0aGlzLm1Qb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICB0aGlzLm1BbmltYXRpb25TdGF0ZSA9IDA7XG4gICAgICAgICAgICB0aGlzLnBhZ2VyTW92aW5nRW5kKHRoaXMubUluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZW5kUmlnaHRhbmltYXRpb24oKSB7XG4gICAgICAgICAgICBMb2cuZChcImVuZFJpZ2h0YW5pbWF0aW9uICAgXCIpO1xuICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSB0aGlzLm1JbmRleCAtIDE7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLm1BZGFwdGVyLmdldENvdW50KCkgKyBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubVBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIHRoaXMubVNjYWxlID0gMDtcbiAgICAgICAgICAgIHRoaXMubUFuaW1hdGlvblN0YXRlID0gMDtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudEl0ZW0oaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5tQW5pbWF0aW9uRW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucGFnZXJNb3ZpbmdFbmQodGhpcy5tSW5kZXgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIGVuZExlZnRBbmltYXRpb24oKSB7XG4gICAgICAgICAgICBMb2cuZChcImVuZExlZnRBbmltYXRpb24gICBcIik7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm1JbmRleCArIDE7XG4gICAgICAgICAgICB0aGlzLm1Qb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICB0aGlzLm1TY2FsZSA9IDA7XG4gICAgICAgICAgICBpbmRleCA9IGluZGV4ICUgdGhpcy5tQWRhcHRlci5nZXRDb3VudCgpO1xuICAgICAgICAgICAgdGhpcy5tQW5pbWF0aW9uU3RhdGUgPSAwO1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50SXRlbShpbmRleCk7XG4gICAgICAgICAgICB0aGlzLm1BbmltYXRpb25FbmQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wYWdlck1vdmluZ0VuZCh0aGlzLm1JbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBwcml2YXRlIHBhZ2VyQ2hhbmdlZChwb3NpdGlvbjogbnVtYmVyLCB0YXJnZXRQb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5saXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5vblBhZ2VyQ2hhbmdlZChwb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJpdmF0ZSBwYWdlck1vdmluZyhtb3ZlZGVncmVlcHJlVmlldzogbnVtYmVyLCBtb3ZlZGVncmVlOiBudW1iZXIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUGFnZXJNb3ZpbmcoLTEgKiBtb3ZlZGVncmVlcHJlVmlldywgLTEgKiBtb3ZlZGVncmVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgcGFnZXJNb3ZpbmdFbmQocG9zaXRpb246IG51bWJlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMubGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub25QYWdlck1vdmluZ0VuZChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGFnZXJDaGFuZ2VkTGlzdGVuZXIge1xuICAgICAgICBvblBhZ2VyQ2hhbmdlZChwb3NpdGlvbjogbnVtYmVyLCB0YXJnZXRQb3NpdGlvbjogbnVtYmVyKTtcbiAgICAgICAgb25QYWdlck1vdmluZyhtb3ZlZGVncmVlcHJlVmlldzogbnVtYmVyLCBtb3ZlZGVncmVlOiBudW1iZXIpO1xuICAgICAgICBvblBhZ2VyTW92aW5nRW5kKHBvc2l0aW9uOiBudW1iZXIpO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQXJlYVRvdWNoTGlzdGVuZXIge1xuICAgICAgICBvbkxlZnRUb3VjaCgpO1xuICAgICAgICBvblJpZ2h0VG91Y2goKTtcbiAgICAgICAgb25NaWRkbGVUb3VjaCgpO1xuICAgIH1cblxuICAgIGNsYXNzIEl0ZW1JbmZvIHtcbiAgICAgICAgdmlldzogVmlldztcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgcG9zaXRpb246IG51bWJlcjtcbiAgICAgICAgY29uc3RydWN0b3IodjogVmlldywgaTogbnVtYmVyLCBwb3M6IG51bWJlcikge1xuICAgICAgICAgICAgdGhpcy52aWV3ID0gdjtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvcztcbiAgICAgICAgfVxuICAgIH1cblxufSIsIlxubmFtZXNwYWNlIGFuZHJvaWQudmlldy5hbmltYXRpb24ge1xuICAgIGV4cG9ydCBlbnVtIEFuaW1hdGlvblR5cGUge1xuICAgICAgIEFscGhhLFxuICAgICAgIFRyYW5zbGF0ZSxcbiAgICAgICBTY2FsZSxcbiAgICAgICBSb3RhdGVcbiAgICB9XG59IiwiXG5uYW1lc3BhY2UgYW5kcm9pZC52aWV3LmFuaW1hdGlvbiB7XG4gICAgaW1wb3J0IENhbnZhcyA9IGFuZHJvaWQuZ3JhcGhpY3MuQ2FudmFzO1xuICAgIGV4cG9ydCBjbGFzcyBTY2FsZUFuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbiB7XG4gICAgICAgIGR1cmF0aW9uOiBudW1iZXIgPSAwO1xuICAgICAgICBzdGFydDogbnVtYmVyO1xuICAgICAgICBlYXNlOkFuaW1hdGlvbkVhc2U7XG4gICAgICAgIHR5cGU6QW5pbWF0aW9uVHlwZTtcbiAgICAgICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGdldCBpc0FuaWFtdGlvbkVuZCgpOmJvb2xlYW57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydCArIHRoaXMuZHVyYXRpb24gPCBEYXRlLm5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGUobm93OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlYXNlIFwiICsoIChub3cgLSB0aGlzLnN0YXJ0KS90aGlzLmR1cmF0aW9uKSk7XG4gICAgICAgICAgICByZXR1cm4gIHRoaXMuZWFzZS5lYXNlKChub3cgLSB0aGlzLnN0YXJ0KSAvIHRoaXMuZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5VHJhbnNmb3JtYXRpb24oaW50ZXJwb2xhdGVkVGltZTpudW1iZXIsIGNhbnZhczpDYW52YXMsdmlldzpWaWV3KSB7XG4gICAgICAgICAgICAvLyBjYW52YXMubW92ZXRvKHZpZXcubGVmdCt2aWV3LndpZHRoLzIsdmlldy50b3AgK3ZpZXcuaGVpZ2h0LzIpO1xuICAgICAgICAgICAgY2FudmFzLnNjYWxlKHRoaXMuZnJvbSArICh0aGlzLnRvLXRoaXMuZnJvbSkgKiBpbnRlcnBvbGF0ZWRUaW1lLHRoaXMuZnJvbSArICh0aGlzLnRvLXRoaXMuZnJvbSkgKiBpbnRlcnBvbGF0ZWRUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgfVxufSIsIm5hbWVzcGFjZSBhbmRyb2lkLnZpZXd7XG4gICAgaW1wb3J0IFJlY3QgPSBhbmRyb2lkLmdyYXBoaWNzLlJlY3Q7XG4gICAgZXhwb3J0IGNsYXNzIFJlbmRlclN0YXRle1xuICAgICAgICBjdXJyZW50UmVjdDpSZWN0O1xuICAgICAgICBpbmRleDpudW1iZXI7XG4gICAgICAgIGNvbnN0cnVjdG9yKHJlY3Q6UmVjdCxpbmRleDpudW1iZXIpe1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVjdCA9IHJlY3Q7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG59Il19
