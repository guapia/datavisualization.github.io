var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var android;
(function (android) {
    var app;
    (function (app) {
        var Intent = (function () {
            function Intent() {
            }
            Intent.prototype.setClass = function (c, activityClass) {
                this.context = c;
                this.targetActivityClass = activityClass;
            };
            Intent.prototype.getClass = function () {
                return this.targetActivityClass;
            };
            Intent.prototype.getContext = function () {
                return this.context;
            };
            return Intent;
        }());
        app.Intent = Intent;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        /**
         * Point holds two integer coordinates
         */
        var Point = (function () {
            function Point(x, y) {
                if (!isNaN(x)) {
                    this.x = x;
                }
                else {
                    this.x = 0;
                }
                if (!isNaN(y)) {
                    this.y = y;
                }
                else {
                    this.y = 0;
                }
            }
            /**
             * Set the point's x and y coordinates
             */
            Point.prototype.set = function (x, y) {
                this.x = x;
                this.y = y;
            };
            /**
             * Negate the point's coordinates
             */
            Point.prototype.negate = function () {
                this.x = -this.x;
                this.y = -this.y;
            };
            /**
             * Offset the point's coordinates by dx, dy
             */
            Point.prototype.offset = function (dx, dy) {
                this.x += dx;
                this.y += dy;
            };
            /**
             * Returns true if the point's coordinates equal (x,y)
             */
            Point.prototype.equals = function (x, y) {
                return this.x == x && this.y == y;
            };
            Point.prototype.equalPoint = function (pt) {
                return this.equals(pt.x, pt.y);
            };
            Point.prototype.hashCode = function () {
                var result = this.x;
                result = 31 * result + this.y;
                return result;
            };
            Point.prototype.toString = function () {
                return "Point(" + this.x + ", " + this.y + ")";
            };
            /**
             * Parcelable interface methods
             */
            Point.prototype.describeContents = function () {
                return 0;
            };
            Point.prototype.clone = function () {
                return new Point(this.x, this.y);
            };
            return Point;
        }());
        graphics.Point = Point;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Rect = android.graphics.Rect;
        var Gravity;
        (function (Gravity) {
            Gravity[Gravity["Left"] = 0] = "Left";
            Gravity[Gravity["Center"] = 1] = "Center";
            Gravity[Gravity["Right"] = 2] = "Right";
            Gravity[Gravity["Top"] = 3] = "Top";
            Gravity[Gravity["Bottom"] = 4] = "Bottom";
            Gravity[Gravity["Auto"] = 5] = "Auto";
        })(Gravity = graphics.Gravity || (graphics.Gravity = {}));
        var Padding = (function () {
            function Padding(padding) {
                if (padding) {
                    this.padding = padding;
                }
                else {
                    this.padding = 0;
                }
            }
            Object.defineProperty(Padding.prototype, "padding", {
                set: function (padding) {
                    this.leftPadding = this.rightPadding = this.topPadding = this.bottomPadding = padding;
                },
                enumerable: true,
                configurable: true
            });
            return Padding;
        }());
        graphics.Padding = Padding;
        var Position;
        (function (Position) {
            Position[Position["Left"] = 0] = "Left";
            Position[Position["Top"] = 1] = "Top";
            Position[Position["Right"] = 2] = "Right";
            Position[Position["Bottom"] = 3] = "Bottom";
        })(Position = graphics.Position || (graphics.Position = {}));
        var Orientation;
        (function (Orientation) {
            Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
            Orientation[Orientation["Vertical"] = 1] = "Vertical";
        })(Orientation = graphics.Orientation || (graphics.Orientation = {}));
        var StrokeStyle = (function () {
            function StrokeStyle(strokewidth, strokecolor) {
                this.strokeWidth = strokewidth;
                this.strokeColor = strokecolor;
            }
            StrokeStyle.prototype.getCssStyle = function () {
                return {
                    'stroke-width': this.strokeWidth,
                    'stroke': this.strokeColor
                };
            };
            StrokeStyle.prototype.clone = function () {
                return new StrokeStyle(this.strokeWidth, this.strokeColor);
            };
            return StrokeStyle;
        }());
        graphics.StrokeStyle = StrokeStyle;
        var Font = (function () {
            function Font(fz, fm, fc) {
                this.fontSize = fz;
                this.fontFamily = fm;
                this.fontColor = fc;
                if (!this.fontFamily || this.fontFamily === "") {
                    this.fontFamily = 'Arial';
                }
            }
            Font.prototype.toString = function () {
                return " fontSize = " + this.fontSize + ", fontFamily = " + this.fontFamily + ", fontColor = " + this.fontFamily;
            };
            Font.prototype.clone = function () {
                return new Font(this.fontSize, this.fontFamily, this.fontColor);
            };
            return Font;
        }());
        graphics.Font = Font;
        var Style = (function () {
            function Style(bg, font, stroke) {
                this.background = bg;
                this.font = font;
                this.strokeStyle = stroke;
            }
            return Style;
        }());
        graphics.Style = Style;
        var Util = (function () {
            function Util() {
            }
            Util.cloneDeep = function (object) {
                if ((object == null) ||
                    (typeof object === 'number') ||
                    (typeof object === 'string') ||
                    (typeof object === 'boolean')) {
                    return object;
                }
                else if (Array.isArray(object)) {
                    var items = [];
                    for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
                        var item = object_1[_i];
                        items.push(Util.cloneDeep(item));
                    }
                    return items;
                }
                else if (object instanceof Date) {
                    return new Date(object.getTime());
                }
                else {
                    var cloneObject = {};
                    for (var key in object) {
                        if (typeof object[key] == 'function') {
                            cloneObject[key] = object[key];
                        }
                        else {
                            cloneObject[key] = Util.cloneDeep(object[key]);
                        }
                    }
                    return cloneObject;
                }
            };
            Util.contains = function (rect, pt) {
                if (pt.x <= rect.right && pt.x >= rect.left && pt.y <= rect.bottom && pt.y >= rect.top) {
                    return true;
                }
                return false;
            };
            Util.getRect = function (start, size) {
                var rect = new Rect(start.x, start.y, start.x + size.width, start.y + size.height);
                return rect;
            };
            Util.getStyleCss = function (style) {
                return {
                    "font-size": style.font ? style.font.fontSize : "",
                    "font-family": style.font ? style.font.fontFamily : "",
                    "font-color": style.font ? style.font.fontColor : "white",
                    "fill": style.background,
                    "stroke": style.strokeStyle ? style.strokeStyle.strokeColor : "",
                    "stroke-width": style.strokeStyle ? style.strokeStyle.strokeWidth : 0
                };
            };
            Util.union = function () {
                var rects = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    rects[_i] = arguments[_i];
                }
                var rect = new android.graphics.Rect(0, 0, 0, 0);
                rect.left = Math.min.apply(this, rects.map(function (e) { return e.left; }));
                rect.top = Math.min.apply(this, rects.map(function (e) { return e.top; }));
                rect.right = Math.max.apply(this, rects.map(function (e) { return e.right; }));
                rect.bottom = Math.max.apply(this, rects.map(function (e) { return e.bottom; }));
                return rect;
            };
            Util.hexToRgb = function (hex) {
                var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                    return r + r + g + g + b + b;
                });
                var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                return result ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                } : null;
            };
            Util.rgbToHex = function (r, g, b) {
                return "#" + Util.componentToHex(r) + Util.componentToHex(g) + Util.componentToHex(b);
            };
            Util.componentToHex = function (c) {
                var hex = c.toString(16);
                return hex.length == 1 ? "0" + hex : hex;
            };
            Util.asEnum = function (value, enumType, nullOK) {
                if (nullOK === void 0) { nullOK = false; }
                if (value == null && nullOK)
                    return null;
                var e = enumType[value];
                return typeof (e) === 'number' ? e : value;
            };
            Util.isMixed = function (r1, r2) {
                var ismixed = false;
                if (Math.abs((r1.left + r1.right) / 2 - (r2.left + r2.right) / 2)
                    < ((r1.right + r2.right - r1.left - r2.left) / 2) && Math.abs((r1.top + r1.bottom) / 2
                    - (r2.top + r2.bottom) / 2) < ((r1.bottom + r2.bottom - r1.top - r2.top) / 2)) {
                    ismixed = true;
                }
                return ismixed;
            };
            Util.containsRect = function (r1, r2) {
                var flg = r1.left <= r2.left &&
                    r1.top <= r2.top &&
                    r1.right >= r2.right &&
                    r1.bottom >= r2.bottom;
                return flg;
            };
            return Util;
        }());
        graphics.Util = Util;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var device;
    (function (device) {
        var Device = (function () {
            function Device() {
            }
            Object.defineProperty(Device, "width", {
                get: function () {
                    // return 340;
                    if (Device._width == 0) {
                        Device._width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
                    }
                    return Device._width;
                },
                set: function (value) {
                    Device._width = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Device, "height", {
                get: function () {
                    // return 620;
                    if (Device._height == 0) {
                        Device._height = (window.innerHeight > 0) ?
                            window.innerHeight : screen.height;
                    }
                    return Device._height;
                },
                set: function (value) {
                    Device._height = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Device, "density", {
                get: function () {
                    if (Device._density === 0) {
                        Device._density = Math.sqrt(Device.width * Device.width + Device.height * Device.height) / 160;
                    }
                    // return Device._density;
                    return 1;
                },
                enumerable: true,
                configurable: true
            });
            return Device;
        }());
        Device._density = 0;
        Device._width = 0;
        Device._height = 0;
        device.Device = Device;
    })(device = android.device || (android.device = {}));
})(android || (android = {}));
var android;
(function (android) {
    var util;
    (function (util) {
        var Log = (function () {
            function Log() {
            }
            Log.d = function (message, tag) {
                console.log(message);
            };
            Log.w = function (message, tag) {
                console.warn(message);
            };
            Log.e = function (message, tag) {
                console.error(message);
            };
            return Log;
        }());
        util.Log = Log;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
/// <reference path="../graphics/Util.ts" />
var android;
(function (android) {
    var device;
    (function (device) {
        var Font = android.graphics.Font;
        var StrokeStyle = android.graphics.StrokeStyle;
        var Style = android.graphics.Style;
        var Default = (function () {
            function Default() {
            }
            Object.defineProperty(Default, "font", {
                get: function () {
                    return new Font(8, "", "white");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Default, "strokestyle", {
                get: function () {
                    return new StrokeStyle(1, 'black');
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Default, "style", {
                get: function () {
                    return new Style('gray', Default.font, Default.strokestyle);
                },
                enumerable: true,
                configurable: true
            });
            return Default;
        }());
        device.Default = Default;
    })(device = android.device || (android.device = {}));
})(android || (android = {}));
/// <reference path="Point.ts" />
/// <reference path="Util.ts" />
/// <reference path="../device/Device.ts" />
/// <reference path="../util/Log.ts" />
/// <reference path="../device/Default.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Point = android.graphics.Point;
        var Device = android.device.Device;
        var Default = android.device.Default;
        var RenderType;
        (function (RenderType) {
            RenderType[RenderType["Canvas"] = 0] = "Canvas";
            RenderType[RenderType["Svg"] = 1] = "Svg";
        })(RenderType = graphics.RenderType || (graphics.RenderType = {}));
        var CanvasState = (function () {
            function CanvasState(x, y) {
                this.xOffset = 0;
                this.yOffset = 0;
                this.xOffset = x;
                this.yOffset = y;
            }
            return CanvasState;
        }());
        var Floor = function (value) { return Math.floor(1000 * value) / 1000; };
        var Canvas = (function () {
            function Canvas(element, type) {
                this.xOffset = 0;
                this.yOffset = 0;
                this.saveStates = [];
                this._hostElement = element;
                this._renderType = type;
                if (type === RenderType.Canvas) {
                    this._render = new graphics.CanvasRenderEngine(element);
                    element.style.width = Device.width + 'px';
                    element.style.height = Device.height + "px";
                    this._render.setViewportSize(Device.width, Device.height);
                }
                else if (type === RenderType.Svg) {
                    this._render = new graphics.SvgRenderEngine(element);
                    element.style.width = Device.width + 'px';
                    element.style.height = Device.height + "px";
                    this._render.setViewportSize(Device.width, Device.height);
                }
            }
            Canvas.prototype.save = function () {
                var state = new CanvasState(this.xOffset, this.yOffset);
                this.saveStates.push(state);
                this._render.save();
            };
            Canvas.prototype.clip = function (rect) {
                var r = rect.clone();
                r.translate(this.xOffset, this.yOffset);
                this._render.clip(rect);
                // console.log("clip  l = "+rect.left +" , t = "+ rect.top +" ,width = " + rect.width +" ,height = " + rect.height);
            };
            Canvas.prototype.restore = function () {
                this.saveStates.pop();
                var state = this.saveStates[this.saveStates.length - 1];
                if (state) {
                    this.xOffset = state.xOffset;
                    this.yOffset = state.yOffset;
                }
                else {
                    this.xOffset = 0;
                    this.yOffset = 0;
                }
                this._render.restore();
            };
            Canvas.prototype.setViewportSize = function (w, h) {
                this._render.setViewportSize(w, h);
            };
            Canvas.prototype.measureString = function (str, font, maxSize) {
                if (!font) {
                    font = Default.font.clone();
                }
                var f = font.clone();
                f.fontSize *= Device.density;
                return this._render.measureString(str, f, maxSize);
            };
            Canvas.prototype.measureStringWithWidth = function (str, font) {
            };
            Canvas.prototype.drawText = function (str, pt, f, center, angle) {
                if (!f) {
                    f = Default.font.clone();
                }
                var size = this.measureString(str, f);
                var font = f.clone();
                font.fontSize *= Device.density;
                var startpt = new Point(pt.x, pt.y + size.height);
                var tpt = pt.clone();
                // this.drawRect(tpt,new Point(tpt.x+size.width,tpt.y+size.height),true,'lightblue');
                if (this._renderType === RenderType.Canvas) {
                    if (angle != null) {
                        this._render.drawStringRotated(str, startpt, center, angle, font);
                    }
                    else {
                        this._render.drawString(str, startpt, font);
                    }
                }
                else {
                    startpt.offset(this.xOffset, this.yOffset);
                    if (angle != null) {
                        this._render.drawStringRotated(str, startpt, center, angle, null, { 'font-size': font.fontSize, 'font-family': font.fontFamily });
                    }
                    else {
                        this._render.drawString(str, startpt, null, { 'font-size': font.fontSize, 'font-family': font.fontFamily });
                    }
                }
            };
            Canvas.prototype.drawPosText = function (text, pos, font) {
                if (text.length * 2 > pos.length) {
                    throw "IndexOutOfBoundsException";
                }
                if (!font) {
                    font = Default.font;
                }
                if (this._renderType === RenderType.Canvas) {
                    var pt = new Point(0, 0);
                    for (var i = 0; i < pos.length; i += 2) {
                        pt.set(pos[i], pos[i + 1]);
                        // this._render.drawString(text[i],pt,font);
                        this.drawText(text[i / 2], pt, font);
                    }
                }
                else {
                }
            };
            Canvas.prototype.drawLine = function (pt1, pt2, strokestyle) {
                var stroke = null;
                if (strokestyle) {
                    stroke = strokestyle.clone();
                }
                else {
                    stroke = Default.strokestyle.clone();
                }
                var startpoint = pt1.clone();
                var endpoint = pt2.clone();
                if (this._renderType === RenderType.Canvas) {
                    this._render.drawLine(startpoint.x, startpoint.y, endpoint.x, endpoint.y, stroke);
                }
                else {
                    startpoint.offset(this.xOffset, this.yOffset);
                    endpoint.offset(this.xOffset, this.yOffset);
                    this._render.drawLine(startpoint.x, startpoint.y, endpoint.x, endpoint.y, stroke);
                }
            };
            Canvas.prototype.drawLines = function (xs, ys, strokestyle) {
                // drawLines(xs: number[], ys: number[], strokestyle: StrokeStyle) {
                var stroke = null;
                if (strokestyle) {
                    stroke = strokestyle.clone();
                }
                else {
                    stroke = Default.strokestyle.clone();
                }
                if (this._renderType === RenderType.Canvas) {
                    this._render.drawLines(xs, ys, stroke);
                }
                else {
                    stroke.transform = "translate(" + this.xOffset + "," + this.yOffset + ")";
                    this._render.drawLines(xs, ys, null, stroke.getCssStyle());
                }
            };
            Canvas.prototype.drawRect = function (pt1, pt2, fill, color) {
                var startpoint = pt1.clone();
                var endpoint = pt2.clone();
                if (this._renderType === RenderType.Canvas) {
                    this._render.drawRect(startpoint.x, startpoint.y, endpoint.x - startpoint.x, endpoint.y - startpoint.y, color, fill);
                }
                else {
                    startpoint.offset(this.xOffset, this.yOffset);
                    endpoint.offset(this.xOffset, this.yOffset);
                    if (fill) {
                        this._render.drawRect(startpoint.x, startpoint.y, endpoint.x - startpoint.x, endpoint.y - startpoint.y, null, { 'fill': color }, null);
                    }
                    else {
                        this._render.drawRect(startpoint.x, startpoint.y, endpoint.x - startpoint.x, endpoint.y - startpoint.y, null, { 'fill': 'transparent', 'stroke': color }, null);
                    }
                }
            };
            Canvas.prototype.drawArc = function (rect, startAngle, sweepAngel, color) {
                var cx = (rect.right - rect.left) / 2 + rect.left + this.xOffset;
                var cy = (rect.bottom - rect.top) / 2 + rect.top + this.yOffset;
                var r = (rect.width < rect.height ? rect.width : rect.height) / 2;
                if (this._renderType === RenderType.Svg) {
                    this._render.drawPie(cx, cy, r, Floor(startAngle), Floor(sweepAngel), null, { 'fill': color });
                }
                else {
                    this._render.drawPie(cx, cy, r, Floor(startAngle), Floor(sweepAngel), color);
                }
            };
            Canvas.prototype.drawDonut = function (cx, cy, radius, innerRadius, startAngle, sweepAngle, color) {
                var _cx = cx + this.xOffset;
                var _cy = cy + this.yOffset;
                if (this._renderType === RenderType.Svg) {
                    this._render.drawDonut(_cx, _cy, radius, innerRadius, Floor(startAngle), Floor(sweepAngle), null, { 'fill': color });
                }
                else {
                    this._render.drawDonut(_cx, _cy, radius, innerRadius, (startAngle), (sweepAngle), color);
                }
            };
            Canvas.prototype.drawOval = function (rect, color) {
            };
            Object.defineProperty(Canvas.prototype, "alpha", {
                // public alpha :number =0;
                set: function (value) {
                    this._render.alpha = value;
                },
                enumerable: true,
                configurable: true
            });
            Canvas.prototype.drawPolygon = function (xs, ys, color) {
                if (this._renderType === RenderType.Svg) {
                    this._render.drawPolygon(xs, ys, null, { 'fill': color });
                }
                else {
                    this._render.drawPolygon(xs, ys, color);
                }
            };
            Canvas.prototype.drawImage = function (x, y, w, h) {
                this._render.drawImage(x, y, w, h);
            };
            Canvas.prototype.getCache = function (sx, sy, sw, sh) {
                return this._render.getImageData(sx, sy, sw, sh);
            };
            Canvas.prototype.setCache = function (imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
                this._render.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
            };
            Canvas.prototype.begin = function () {
                this._render.beginRender();
            };
            Canvas.prototype.end = function () {
                this._render.endRender();
            };
            Canvas.prototype.moveTo = function (x, y) {
                if (this._renderType === RenderType.Canvas) {
                    this._render.moveTo(x, y);
                }
            };
            Canvas.prototype.scale = function (sx, sy) {
                console.log("canvasScale " + sx + " , " + sy);
                if (this._renderType === RenderType.Canvas) {
                    this._render.scale(sx, sy);
                }
            };
            Canvas.prototype.rotate = function (degree) {
                if (this._renderType === RenderType.Canvas) {
                    this._render.rotate(degree);
                }
            };
            Canvas.prototype.translate = function (x, y) {
                this.xOffset = x;
                this.yOffset = y;
                if (this._renderType === RenderType.Canvas) {
                    this._render.translate(x, y);
                }
            };
            return Canvas;
        }());
        graphics.Canvas = Canvas;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var app;
    (function (app) {
        var Context = (function () {
            function Context() {
            }
            return Context;
        }());
        app.Context = Context;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
/// <reference path="../../graphics/util.ts" />
/// <reference path="../../graphics/util.ts" />
/// <reference path="IView.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Size = (function () {
            function Size(w, h) {
                this.width = w;
                this.height = h;
            }
            Size.prototype.clone = function () {
                return new Size(this.width, this.height);
            };
            Size.prototype.hashCode = function () {
                return this.width * 37213 + this.height;
            };
            return Size;
        }());
        graphics.Size = Size;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Margin = (function () {
            function Margin(marginLeft, marginRight, marginTop, marginBottom) {
                this.marginLeft = marginLeft;
                this.marginTop = marginTop;
                this.marginRight = marginRight;
                this.marginBottom = marginBottom;
            }
            Margin.prototype.getStartXMargin = function () {
                if (this.marginRight > 0 && !this.marginLeft) {
                    return -this.marginRight;
                }
                return this.marginLeft;
            };
            Margin.prototype.getStartYMargin = function () {
                if (this.marginBottom > 0 && !this.marginTop) {
                    return -this.marginBottom;
                }
                return this.marginTop;
            };
            return Margin;
        }());
        graphics.Margin = Margin;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Point.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Point = android.graphics.Point;
        var Rect = (function () {
            function Rect(left, top, right, bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }
            Rect.prototype.reset = function (left, top, right, bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
                return this;
            };
            Rect.prototype.correct = function () {
                if (this.left > this.right) {
                    var l = this.left;
                    this.left = this.right;
                    this.right = l;
                }
                if (this.top > this.bottom) {
                    var t = this.top;
                    this.top = this.bottom;
                    this.bottom = t;
                }
            };
            Rect.prototype.translate = function (x, y) {
                this.left += x;
                this.right += x;
                this.top += y;
                this.bottom += y;
                return this;
            };
            Rect.prototype.translateX = function (x) {
                this.translate(x, 0);
                return this;
            };
            Rect.prototype.translateY = function (y) {
                this.translate(0, y);
                return this;
            };
            Rect.prototype.scale = function (r) {
                if (r < 1 && r > 0) {
                    var w = this.right - this.left;
                    var h = this.bottom - this.top;
                    this.left += r * w / 2;
                    this.top += r * h / 2;
                    this.right -= r * w / 2;
                    this.bottom -= r * h / 2;
                }
                else {
                    this.left += r;
                    this.top += r;
                    this.right -= r;
                    this.bottom -= r;
                }
                return this;
            };
            Object.defineProperty(Rect.prototype, "isNil", {
                get: function () {
                    return (this.right - this.left <= 0.01) ||
                        (this.bottom - this.top <= 0.01);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "height", {
                get: function () {
                    return ((this.bottom - this.top));
                },
                set: function (height) {
                    this.bottom = this.top + height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "width", {
                get: function () {
                    return ((this.right - this.left));
                },
                set: function (width) {
                    this.right = this.left + width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "startPoint", {
                get: function () {
                    if (!this._startpoint) {
                        this._startpoint = new Point(this.left, this.top);
                    }
                    this._startpoint.x = this.left;
                    this._startpoint.y = this.top;
                    return this._startpoint;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Rect.prototype, "endPoint", {
                get: function () {
                    if (!this._endpoint) {
                        this._endpoint = new Point(this.right, this.bottom);
                    }
                    this._endpoint.x = this.right;
                    this._endpoint.y = this.bottom;
                    return this._endpoint;
                },
                enumerable: true,
                configurable: true
            });
            Rect.prototype.contains = function (x, y) {
                if (x <= this.right && x >= this.left && y <= this.bottom && y >= this.top) {
                    return true;
                }
                return false;
            };
            Rect.prototype.clone = function () {
                return new Rect(this.left, this.top, this.right, this.bottom);
            };
            Rect.prototype.equal = function (rect) {
                if (rect != null) {
                    return rect.left === this.left && rect.top === this.top && rect.bottom === this.bottom && rect.right === this.right;
                }
                return false;
            };
            return Rect;
        }());
        graphics.Rect = Rect;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="../../graphics/Margins.ts" />
/// <reference path="../../graphics/Rect.ts" />
var android;
(function (android) {
    var view;
    (function (view) {
        var Rect = android.graphics.Rect;
        var Padding = android.graphics.Padding;
        var Margin = android.graphics.Margin;
        /***
         * 根据measure 计算出的结果
         */
        var LayoutInfo = (function () {
            function LayoutInfo(l, t, r, b, padding, drawindex) {
                this.outterrect = new Rect(l, t, r, b);
                this.innerrect = new Rect(this.outterrect.left + padding.leftPadding, this.outterrect.top + padding.topPadding, this.outterrect.right - padding.rightPadding, this.outterrect.bottom - padding.bottomPadding);
                if (drawindex) {
                    this.drawindex = drawindex;
                }
                else {
                    this.drawindex = 0;
                }
            }
            LayoutInfo.prototype.reset = function (l, t, r, b, padding, drawindex) {
                this.outterrect = new Rect(l, t, r, b);
                this.innerrect = new Rect(this.outterrect.left + padding.leftPadding, this.outterrect.top + padding.topPadding, this.outterrect.right - padding.rightPadding, this.outterrect.bottom - padding.bottomPadding);
                if (drawindex) {
                    this.drawindex = drawindex;
                }
                else {
                    this.drawindex = 0;
                }
            };
            LayoutInfo.prototype.offset = function (x, y) {
                this.innerrect.translate(x, y);
                this.outterrect.translate(x, y);
            };
            LayoutInfo.prototype.clone = function () {
                var info = new LayoutInfo(0, 0, 0, 0, new Padding(0));
                info.drawindex = this.drawindex;
                info.innerrect = this.innerrect.clone();
                info.outterrect = this.outterrect.clone();
                return info;
            };
            LayoutInfo.prototype.equal = function (info) {
                if (info != null) {
                    return info.drawindex === this.drawindex && this.innerrect.equal(info.innerrect) && this.outterrect.equal(info.outterrect);
                }
                return false;
            };
            return LayoutInfo;
        }());
        view.LayoutInfo = LayoutInfo;
        /***
         * 输入的参数
         */
        var LayoutParams = (function () {
            function LayoutParams(width, height, margin) {
                this.margin = new Margin(0, 0, 0, 0); // { 'marginLeft': 0, 'marginRight': 0, 'marginTop': 0, 'marginBottom': 0 };
                this.width = width;
                this.height = height;
                if (margin) {
                    this.margin = margin;
                }
            }
            Object.defineProperty(LayoutParams.prototype, "width", {
                get: function () {
                    if (this._width < 0) {
                        return 0;
                    }
                    return this._width;
                },
                set: function (w) {
                    this._width = w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LayoutParams.prototype, "widthMode", {
                get: function () {
                    var mode = LayoutParams.EXACTLY;
                    switch (this._width) {
                        case LayoutParams.WRAP_CONTENT:
                            mode = LayoutParams.WRAP_CONTENT;
                            break;
                        case LayoutParams.MATCH_PARENT:
                            mode = LayoutParams.MATCH_PARENT;
                            break;
                        case LayoutParams.EXACTLY:
                        default:
                            mode = LayoutParams.EXACTLY;
                            break;
                    }
                    return mode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LayoutParams.prototype, "heightMode", {
                get: function () {
                    var mode = LayoutParams.EXACTLY;
                    switch (this._height) {
                        case LayoutParams.WRAP_CONTENT:
                            mode = LayoutParams.WRAP_CONTENT;
                            break;
                        case LayoutParams.MATCH_PARENT:
                            mode = LayoutParams.MATCH_PARENT;
                            break;
                        case LayoutParams.EXACTLY:
                        default:
                            mode = LayoutParams.EXACTLY;
                            break;
                    }
                    return mode;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(LayoutParams.prototype, "height", {
                get: function () {
                    if (this._height < 0) {
                        return 0;
                    }
                    return this._height;
                },
                set: function (h) {
                    this._height = h;
                },
                enumerable: true,
                configurable: true
            });
            return LayoutParams;
        }());
        LayoutParams.MATCH_PARENT = -1;
        LayoutParams.WRAP_CONTENT = -2;
        LayoutParams.EXACTLY = -3;
        view.LayoutParams = LayoutParams;
        var MeasureSpec = (function () {
            function MeasureSpec(v, m) {
                this.mode = LayoutParams.EXACTLY;
                if (v !== undefined) {
                    this.value = v;
                }
                if (m !== undefined) {
                    this.mode = m;
                }
            }
            MeasureSpec.prototype.getMeasureValue = function () {
                switch (this.mode) {
                    case LayoutParams.MATCH_PARENT:
                    case LayoutParams.EXACTLY:
                        return this.value;
                    case LayoutParams.WRAP_CONTENT:
                    default:
                        if (this.value) {
                            return this.value;
                        }
                        return LayoutParams.WRAP_CONTENT;
                }
            };
            return MeasureSpec;
        }());
        view.MeasureSpec = MeasureSpec;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var event;
        (function (event) {
            var MotionEvent = (function () {
                function MotionEvent(x, y, action) {
                    this._x = x;
                    this._y = y;
                    this.screenX = x;
                    this.screenY = y;
                    this._action = action;
                }
                Object.defineProperty(MotionEvent.prototype, "x", {
                    get: function () {
                        return this._x;
                    },
                    set: function (v) {
                        this._x = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MotionEvent.prototype, "y", {
                    get: function () {
                        return this._y;
                    },
                    set: function (v) {
                        this._y = v;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MotionEvent.prototype, "action", {
                    get: function () {
                        return this._action;
                    },
                    enumerable: true,
                    configurable: true
                });
                MotionEvent.prototype.clone = function () {
                    return new MotionEvent(this._x, this._y, this._action);
                };
                MotionEvent.prototype.offset = function (x, y) {
                    this._x += x;
                    this._y += y;
                    this.screenX += x;
                    this.screenY += y;
                };
                MotionEvent.prototype.toString = function () {
                    return " x = " + this._x + " , y = " + this._y + " , action = " + this._getaction();
                };
                MotionEvent.prototype._getaction = function () {
                    switch (this._action) {
                        case 0:
                            return "ACTION_OUTSIDE";
                        case 1:
                            return "ACTION_UP";
                        case 2:
                            return "ACTION_MOVE";
                        case 3:
                            return "ACTION_CANCEL";
                        case 4:
                            return "ACTION_OUTSIDE";
                        case 5:
                            return "ACTION_MOUSE_DOWN";
                        case 6:
                            return "ACTION_MOUSE_MOVE";
                        case 7:
                            return "ACTION_MOUSE_UP";
                        case 8:
                            return "ACTION_MOUSE_OVER";
                        case 9:
                            return "ACTION_MOUSE_OUT";
                        case 10:
                            return "ACTION_CLICK";
                    }
                };
                return MotionEvent;
            }());
            MotionEvent.ACTION_DOWN = 0;
            MotionEvent.ACTION_UP = 1;
            MotionEvent.ACTION_MOVE = 2;
            MotionEvent.ACTION_CANCEL = 3;
            MotionEvent.ACTION_OUTSIDE = 4;
            MotionEvent.ACTION_MOUSE_DOWN = 5;
            MotionEvent.ACTION_MOUSE_MOVE = 6;
            MotionEvent.ACTION_MOUSE_UP = 7;
            MotionEvent.ACTION_MOUSE_OVER = 8;
            MotionEvent.ACTION_MOUSE_OUT = 9;
            MotionEvent.ACTION_CLICK = 10;
            event.MotionEvent = MotionEvent;
        })(event = view.event || (view.event = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view_1) {
        var animation;
        (function (animation) {
            var Animation = (function () {
                function Animation() {
                    this.duration = 0;
                    this.ease = new animation.AnimationEase();
                    this.start = 0;
                    this.duration = 0;
                    this.type = animation.AnimationType.Alpha;
                    this.from = 1;
                    this.to = 1;
                }
                Object.defineProperty(Animation.prototype, "isAniamtionEnd", {
                    get: function () {
                        return this.start + this.duration < Date.now();
                    },
                    enumerable: true,
                    configurable: true
                });
                Animation.prototype.scale = function (now) {
                    console.log("ease " + ((now - this.start) / this.duration));
                    return this.ease.ease((now - this.start) / this.duration);
                };
                Animation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                    console.log("applyTransformation " + interpolatedTime + " canvas " + canvas + " View " + view);
                };
                return Animation;
            }());
            animation.Animation = Animation;
        })(animation = view_1.animation || (view_1.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var animation;
        (function (animation) {
            var AnimationEase = (function () {
                function AnimationEase() {
                }
                AnimationEase.prototype.ease = function (t) {
                    return t;
                };
                return AnimationEase;
            }());
            animation.AnimationEase = AnimationEase;
            var BounceAnimationEase = (function (_super) {
                __extends(BounceAnimationEase, _super);
                function BounceAnimationEase() {
                    return _super.apply(this, arguments) || this;
                }
                BounceAnimationEase.prototype.ease = function (t) {
                    var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
                    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
                };
                return BounceAnimationEase;
            }(AnimationEase));
            animation.BounceAnimationEase = BounceAnimationEase;
            var SinAnimationEase = (function (_super) {
                __extends(SinAnimationEase, _super);
                function SinAnimationEase() {
                    return _super.apply(this, arguments) || this;
                }
                SinAnimationEase.prototype.ease = function (t) {
                    var pi = Math.PI, halfPi = pi / 2;
                    return Math.sin(t * halfPi);
                };
                return SinAnimationEase;
            }(AnimationEase));
            animation.SinAnimationEase = SinAnimationEase;
            var QuadAnimationEase = (function (_super) {
                __extends(QuadAnimationEase, _super);
                function QuadAnimationEase() {
                    return _super.apply(this, arguments) || this;
                }
                QuadAnimationEase.prototype.ease = function (t) {
                    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
                };
                return QuadAnimationEase;
            }(AnimationEase));
            animation.QuadAnimationEase = QuadAnimationEase;
        })(animation = view.animation || (view.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
/// <reference path="../../graphics/Size.ts" />
/// <reference path="../interface/IView.ts" />
/// <reference path="./LayoutInfo.ts" />
/// <reference path="../event/MotionEvent.ts" />
/// <reference path="../../util/Log.ts" />
/// <reference path="../animation/Animation.ts" />
/// <reference path="../animation/AnimationEase.ts" />
var android;
(function (android) {
    var view;
    (function (view) {
        var Padding = android.graphics.Padding;
        var Size = android.graphics.Size;
        var Gravity = android.graphics.Gravity;
        // public static  VISIABLE :number= 1; 
        // public static  INVISIABLE :number = -1;
        // public static  GONE :number = 0;
        var ViewState;
        (function (ViewState) {
            ViewState[ViewState["Visiable"] = 0] = "Visiable";
            ViewState[ViewState["InVisiable"] = 1] = "InVisiable";
            ViewState[ViewState["Gone"] = 2] = "Gone";
        })(ViewState = view.ViewState || (view.ViewState = {}));
        var View = (function () {
            function View(context) {
                this._padding = new Padding();
                this.layoutParams = new view.LayoutParams(0, 0, null);
                this._parent = null;
                this._drawingTime = 0;
                this.offsetleft = 0;
                this.offsettop = 0;
                this.visiable = ViewState.Visiable;
                this._context = context;
                this._gravity = Gravity.Left;
            }
            View.prototype.getContext = function () {
                return this._context;
            };
            /**
             * may be called for serval times
             */
            View.prototype.onMeasure = function (width, height, canvas) {
                this._layoutInfo = new view.LayoutInfo(0, 0, 0, 0, this.padding, 0);
                var w = this.layoutParams.width;
                var h = this.layoutParams.height;
                var size = new Size(w, h);
                var widthmode = this.layoutParams.widthMode;
                var heightmode = this.layoutParams.heightMode;
                if (widthmode === view.LayoutParams.MATCH_PARENT) {
                    size.width = width.value;
                }
                if (heightmode === view.LayoutParams.MATCH_PARENT) {
                    size.height = height.value;
                }
                this.setMeasuredDimension(new view.MeasureSpec(size.width, view.LayoutParams.EXACTLY), new view.MeasureSpec(size.height, view.LayoutParams.EXACTLY));
                return size;
            };
            View.prototype.getDrawingTime = function () {
                if (this.parent != null) {
                    return this._drawingTime;
                }
                else {
                    return Date.now();
                }
            };
            View.prototype.setDrawingTime = function (value) {
                this._drawingTime = value;
            };
            View.prototype.onLayout = function (l, t, r, b, canvas) {
                if (this.layoutInfo != null) {
                    this._oldLayoutInfo = this.layoutInfo.clone();
                }
                this.layoutInfo.reset(l + this.offsetleft, t + this.offsettop, r + this.offsetleft, b + this.offsettop, this.padding, 0);
            };
            View.prototype.islayoutChanged = function () {
                return !this.layoutInfo.equal(this._oldLayoutInfo);
            };
            View.prototype.onDraw = function (canvas) {
                if (this.visiable != ViewState.Visiable) {
                    return;
                }
                this._canvas = canvas;
                if (this.background) {
                    canvas.drawRect(this._layoutInfo.outterrect.startPoint, this._layoutInfo.outterrect.endPoint, true, this.background);
                }
            };
            View.prototype.setMeasuredDimension = function (width, height) {
                this._width = width;
                this._height = height;
            };
            View.prototype.onTouchEvent = function (event) {
                return false;
            };
            View.prototype.onMouseEvent = function (event) {
                return false;
            };
            View.prototype.invalidate = function (force) {
                force = true;
                if (force) {
                    if (this.parent) {
                        this.parent.invalidate(force);
                    }
                    else {
                        this.oninvalidate();
                    }
                }
                else {
                    this.parent.invalidateChild(this, this.layoutInfo.outterrect);
                    this.oninvalidate();
                }
            };
            View.prototype.getRootView = function () {
                if (this.parent != null) {
                    var parent_1 = this.parent;
                    do {
                        parent_1 = parent_1.parent;
                    } while (parent_1.parent != null);
                    return parent_1;
                }
                return this;
            };
            View.prototype.oninvalidate = function () {
            };
            View.prototype.requestLayout = function () {
                if (this.parent) {
                    this.parent.requestLayout();
                }
            };
            View.prototype.startAnimation = function (animation) {
                this.animation = animation;
                if (this.animation != null) {
                    this.getRootView().startAnimation(animation);
                }
                this.invalidate(false);
            };
            View.prototype.setParent = function (p) {
                this._parent = p;
            };
            View.prototype.offset = function (left, top) {
                this.offsetleft += left;
                this.offsettop += top;
                if (isNaN(left) || isNaN(this.offsetleft)) {
                    console.log("offset error");
                    throw "offset error ";
                }
                // this.layoutInfo.offset(left,top);
            };
            Object.defineProperty(View.prototype, "parent", {
                get: function () {
                    return this._parent;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "width", {
                get: function () {
                    return this._width.getMeasureValue();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "height", {
                get: function () {
                    return this._height.getMeasureValue();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "padding", {
                get: function () {
                    return this._padding;
                },
                set: function (padding) {
                    this._padding = padding;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "left", {
                get: function () {
                    return this._layoutInfo.outterrect.left;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "top", {
                get: function () {
                    return this._layoutInfo.outterrect.top;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "right", {
                get: function () {
                    return this._layoutInfo.outterrect.right;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "bottom", {
                get: function () {
                    return this._layoutInfo.outterrect.bottom;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "background", {
                get: function () {
                    return this._background;
                },
                set: function (background) {
                    this._background = background;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "layoutInfo", {
                get: function () {
                    if (!this._layoutInfo) {
                        this._layoutInfo = new view.LayoutInfo(0, 0, 0, 0, this.padding, 0);
                    }
                    return this._layoutInfo;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "gravity", {
                get: function () {
                    return this._gravity;
                },
                set: function (gravity) {
                    this._gravity = gravity;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(View.prototype, "clip", {
                get: function () {
                    return this._clip;
                },
                set: function (value) {
                    this._clip = value;
                },
                enumerable: true,
                configurable: true
            });
            return View;
        }());
        view.View = View;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
/// <reference path="../../graphics/Util.ts" />
/// <reference path="../interface/IViewGroup.ts" />
/// <reference path="View.ts" />
var android;
(function (android) {
    var view;
    (function (view_2) {
        var Size = android.graphics.Size;
        var MotionEvent = android.view.event.MotionEvent;
        var Util = android.graphics.Util;
        var ViewGroup = (function (_super) {
            __extends(ViewGroup, _super);
            function ViewGroup() {
                var _this = _super.apply(this, arguments) || this;
                _this.children = new Array();
                _this._mCurrentTouchTarget = null;
                _this._isIntercept = false;
                _this.lastInterceptEvent = [];
                return _this;
                // public dispatchMouseEvent(event: MotionEvent): boolean {
                //     if (!this._mCurrentTouchTarget || this._mCurrentTouchTarget instanceof ViewGroup) {
                //         let result: boolean = false;
                //         switch (event.action) {
                //             case MotionEvent.ACTION_MOUSE_DOWN:
                //                 if (!this._mCurrentTouchTarget) {
                //                     for (let i = 0; this.children && i < this.children.length; ++i) {
                //                         let child: View = this.children[i];
                //                         if (child) {
                //                             if (child.layoutInfo.outterrect.contains(event.x, event.y)) {
                //                                 this._mCurrentTouchTarget = child;
                //                             }
                //                         }
                //                     }
                //                 }
                //                 if (!this._mCurrentTouchTarget) {
                //                     return true;
                //                 }
                //                 if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                //                     result = true;
                //                 } else {
                //                     result = this._mCurrentTouchTarget.onInterceptMouseEvent(event);
                //                 }
                //                 if (result) {
                //                     this._mCurrentTouchTarget.onMouseEvent(event);
                //                     this._isIntercept = result;
                //                     return true;
                //                 } else {
                //                     this.lastInterceptEvent.push(event.clone());//记录down时候的event
                //                     return false;
                //                 }
                //             case MotionEvent.ACTION_MOUSE_MOVE:
                //                 if (this._mCurrentTouchTarget) {
                //                     if (this._isIntercept) {
                //                         this._mCurrentTouchTarget.onMouseEvent(event);
                //                         return true;
                //                     }
                //                     if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                //                         result = true;
                //                     } else {
                //                         result = this._mCurrentTouchTarget.onInterceptMouseEvent(event);
                //                     }
                //                     if (result) {
                //                         this._isIntercept = result;
                //                         this.lastInterceptEvent.forEach(e => {
                //                             this._mCurrentTouchTarget.onMouseEvent(e);
                //                         });
                //                         this.lastInterceptEvent.length = 0;
                //                         this._mCurrentTouchTarget.onMouseEvent(event);
                //                         return true;
                //                     } else {
                //                         this.lastInterceptEvent.forEach(e => {
                //                             if (this._mCurrentTouchTarget instanceof ViewGroup) {
                //                                 this._mCurrentTouchTarget.dispatchMouseEvent(e);
                //                             }
                //                         });
                //                         this.lastInterceptEvent.length = 0;
                //                         if (this._mCurrentTouchTarget instanceof ViewGroup) {
                //                             return this._mCurrentTouchTarget.dispatchMouseEvent(event);
                //                         } else {
                //                             return false;
                //                         }
                //                     }
                //                 }
                //             case MotionEvent.ACTION_MOUSE_OUT:
                //             case MotionEvent.ACTION_MOUSE_UP:
                //                 if (this._mCurrentTouchTarget) {
                //                     this.lastInterceptEvent.forEach(e => {
                //                         if (this._isIntercept) {
                //                             this._mCurrentTouchTarget.onMouseEvent(e);
                //                         } else {
                //                             this._mCurrentTouchTarget.dispatchMouseEvent(e);
                //                         }
                //                     });
                //                     if (this._isIntercept) {
                //                         this._mCurrentTouchTarget.onMouseEvent(event);
                //                         result = true;
                //                     } else {
                //                         result = this._mCurrentTouchTarget.dispatchMouseEvent(event);
                //                     }
                //                     this._mCurrentTouchTarget = null;
                //                     this.lastInterceptEvent.length = 0;
                //                     this._isIntercept = false;
                //                     return result;
                //                 }
                //         }
                //     }
                //     return false;
                // }
            }
            ViewGroup.prototype.dispatchDraw = function (canvas) {
                var item;
                for (var i = 0; i < this.children.length; ++i) {
                    item = this.children[i];
                    item.setDrawingTime(this.getDrawingTime());
                    if (item.visiable != view_2.ViewState.Visiable) {
                        continue;
                    }
                    if (item.clip === undefined) {
                        item.clip = this.clip;
                    }
                    if (item.clip === true || item.clip === undefined) {
                        canvas.save();
                        canvas.clip(item.layoutInfo.outterrect);
                        this.drawChild(canvas, item);
                        canvas.restore();
                    }
                    else {
                        this.drawChild(canvas, item);
                    }
                }
            };
            ViewGroup.prototype.drawChild = function (canvas, view) {
                if (view.animation != null && !view.animation.isAniamtionEnd) {
                    canvas.save();
                    view.animation.applyTransformation(view.animation.scale(this.getDrawingTime()), canvas, view);
                    view.onDraw(canvas);
                    if (view instanceof ViewGroup) {
                        view.dispatchDraw(canvas);
                    }
                    canvas.restore();
                }
                else {
                    view.onDraw(canvas);
                    if (view instanceof ViewGroup) {
                        view.dispatchDraw(canvas);
                    }
                }
            };
            ViewGroup.prototype.oninvalidate = function () {
                for (var i = 0; i < this.children.length; ++i) {
                    this.children[i].oninvalidate();
                }
            };
            ViewGroup.prototype.invalidateChild = function (child, dirty) {
                if (Util.containsRect(this.layoutInfo.outterrect, dirty)) {
                    var newdirty = Util.union(dirty, this.layoutInfo.outterrect);
                    this.parent.invalidateChild(this, newdirty);
                    this.oninvalidate();
                }
                else {
                    this.dispatchDraw(this._canvas);
                }
            };
            ViewGroup.prototype.getChildCount = function () {
                return this.children.length;
            };
            ViewGroup.prototype.getChildAt = function (index) {
                return this.children[index];
            };
            ViewGroup.prototype.getSortViews = function () {
                return this.children;
            };
            ViewGroup.prototype.onLayout = function (l, t, r, b, canvas) {
                _super.prototype.onLayout.call(this, l, t, r, b, canvas);
            };
            ViewGroup.prototype.onMeasure = function (width, height, canvas) {
                var maxSize;
                // return super.onMeasure(width,height,canvas);
                for (var i = 0; i < this.children.length; ++i) {
                    var item = this.children[i];
                    var lp = item.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    //TO DO...
                    if (lp.heightMode === view_2.LayoutParams.MATCH_PARENT) {
                        h = height.value - item.layoutParams.margin.marginTop - item.layoutParams.margin.marginBottom - this.padding.topPadding - this.padding.bottomPadding;
                    }
                    if (lp.widthMode === view_2.LayoutParams.MATCH_PARENT) {
                        w = width.value - item.layoutParams.margin.marginLeft - item.layoutParams.margin.marginRight - this.padding.leftPadding - this.padding.rightPadding;
                    }
                    var size = item.onMeasure(new view_2.MeasureSpec(w, lp.widthMode), new view_2.MeasureSpec(h, lp.heightMode), canvas);
                    if (item.visiable === view_2.ViewState.Gone) {
                        size = new Size(0, 0);
                    }
                    if (maxSize) {
                        if (maxSize.width < size.width) {
                            maxSize.width = size.width;
                        }
                        if (maxSize.height < size.height) {
                            maxSize.height = size.height;
                        }
                    }
                    else {
                        maxSize = size;
                    }
                }
                if (!maxSize) {
                    maxSize = new Size(0, 0);
                }
                if (this.layoutParams.widthMode === view_2.LayoutParams.EXACTLY) {
                    maxSize.width = this.layoutParams.width;
                }
                else if (this.layoutParams.widthMode === view_2.LayoutParams.MATCH_PARENT) {
                    maxSize.width = width.getMeasureValue();
                }
                if (this.layoutParams.heightMode === view_2.LayoutParams.EXACTLY) {
                    maxSize.height = this.layoutParams.height;
                }
                else if (this.layoutParams.heightMode === view_2.LayoutParams.MATCH_PARENT) {
                    maxSize.height = height.getMeasureValue();
                }
                this.setMeasuredDimension(new view_2.MeasureSpec(maxSize.width, view_2.LayoutParams.EXACTLY), new view_2.MeasureSpec(maxSize.height, view_2.LayoutParams.EXACTLY));
                return maxSize;
            };
            ViewGroup.prototype.addView = function (view, index, layoutParams) {
                if (index === void 0) { index = 0; }
                if (layoutParams === void 0) { layoutParams = null; }
                this.addViewWithOutReLayout(view, index, layoutParams);
                this.requestLayout();
                return index;
            };
            ViewGroup.prototype.addViewWithOutReLayout = function (view, index, layoutParams) {
                if (index === void 0) { index = 0; }
                if (layoutParams === void 0) { layoutParams = null; }
                this.children.push(view);
                if (index !== undefined && index !== null && index >= 0) {
                    view.layoutInfo.drawindex = index;
                }
                else {
                    view.layoutInfo.drawindex = this.children.length - 1;
                }
                if (layoutParams != null) {
                    view.layoutParams = layoutParams;
                }
                view.setParent(this);
                return index;
            };
            ViewGroup.prototype.removeAllViews = function () {
                this.children.length = 0;
            };
            ViewGroup.prototype.removeView = function (view) {
                var index = this.children.indexOf(view);
                this.children.splice(index, 1);
                view.setParent(null);
            };
            ViewGroup.prototype.onInterceptTouchEvent = function (event) {
                return false;
            };
            ViewGroup.prototype.dispatchTouchEvent = function (event) {
                var _this = this;
                if (!this._mCurrentTouchTarget || this._mCurrentTouchTarget instanceof ViewGroup) {
                    var result = false;
                    switch (event.action) {
                        case MotionEvent.ACTION_DOWN:
                            if (!this._mCurrentTouchTarget) {
                                for (var i = 0; this.children && i < this.children.length; ++i) {
                                    var child = this.children[i];
                                    if (child) {
                                        if (child.layoutInfo.outterrect.contains(event.x, event.y)) {
                                            this._mCurrentTouchTarget = child;
                                        }
                                    }
                                }
                            }
                            if (!this._mCurrentTouchTarget) {
                                return true;
                            }
                            if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                                result = true;
                            }
                            else {
                                result = this._mCurrentTouchTarget.onInterceptTouchEvent(event);
                            }
                            if (result) {
                                this._mCurrentTouchTarget.onTouchEvent(event);
                                this._isIntercept = result;
                                return true;
                            }
                            else {
                                this.lastInterceptEvent.push(event.clone()); //记录down时候的event
                                return false;
                            }
                        case MotionEvent.ACTION_MOVE:
                            if (this._mCurrentTouchTarget) {
                                if (this._isIntercept) {
                                    this._mCurrentTouchTarget.onTouchEvent(event);
                                    return true;
                                }
                                if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                                    result = true;
                                }
                                else {
                                    result = this._mCurrentTouchTarget.onInterceptTouchEvent(event);
                                }
                                if (result) {
                                    this._isIntercept = result;
                                    this.lastInterceptEvent.forEach(function (e) {
                                        _this._mCurrentTouchTarget.onTouchEvent(e);
                                    });
                                    this.lastInterceptEvent.length = 0;
                                    this._mCurrentTouchTarget.onTouchEvent(event);
                                    return true;
                                }
                                else {
                                    this.lastInterceptEvent.forEach(function (e) {
                                        if (_this._mCurrentTouchTarget instanceof ViewGroup) {
                                            _this._mCurrentTouchTarget.dispatchTouchEvent(e);
                                        }
                                    });
                                    this.lastInterceptEvent.length = 0;
                                    if (this._mCurrentTouchTarget instanceof ViewGroup) {
                                        return this._mCurrentTouchTarget.dispatchTouchEvent(event);
                                    }
                                    else {
                                        return false;
                                    }
                                }
                            }
                        case MotionEvent.ACTION_UP:
                        case MotionEvent.ACTION_CANCEL:
                            if (this._mCurrentTouchTarget) {
                                this.lastInterceptEvent.forEach(function (e) {
                                    if (_this._isIntercept) {
                                        _this._mCurrentTouchTarget.onTouchEvent(e);
                                    }
                                    else {
                                        _this._mCurrentTouchTarget.dispatchTouchEvent(e);
                                    }
                                });
                                if (this._isIntercept) {
                                    this._mCurrentTouchTarget.onTouchEvent(event);
                                    result = true;
                                }
                                else {
                                    result = this._mCurrentTouchTarget.dispatchTouchEvent(event);
                                }
                                this._mCurrentTouchTarget = null;
                                this.lastInterceptEvent.length = 0;
                                this._isIntercept = false;
                                return result;
                            }
                    }
                }
                return false;
            };
            ViewGroup.prototype.onInterceptMouseEvent = function (event) {
                return false;
            };
            ViewGroup.prototype.onMouseEvent = function (event) {
                return false;
            };
            ViewGroup.prototype.dispatchMouseEvent = function (event) {
                if (event.action === MotionEvent.ACTION_MOUSE_OUT || event.action === MotionEvent.ACTION_MOUSE_UP) {
                    this._mCurrentTouchTarget = null;
                }
                if (!this._mCurrentTouchTarget) {
                    for (var i = 0; this.children && i < this.children.length; ++i) {
                        var child = this.children[i];
                        if (child) {
                            if (child.layoutInfo.outterrect.contains(event.x, event.y)) {
                                this._mCurrentTouchTarget = child;
                            }
                        }
                    }
                }
                if (!this._mCurrentTouchTarget) {
                    return this.onMouseEvent(event);
                }
                if (!(this._mCurrentTouchTarget instanceof ViewGroup)) {
                    return this._mCurrentTouchTarget.onMouseEvent(event);
                }
                if (this._mCurrentTouchTarget.onInterceptMouseEvent(event)) {
                    return this._mCurrentTouchTarget.onMouseEvent(event);
                }
                else {
                    return this._mCurrentTouchTarget.dispatchMouseEvent(event);
                }
            };
            return ViewGroup;
        }(view_2.View));
        view_2.ViewGroup = ViewGroup;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
/// <reference path="../graphics/Util.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Gravity = android.graphics.Gravity;
        var ViewGroup = android.view.ViewGroup;
        var Point = android.graphics.Point;
        var FrameLayout = (function (_super) {
            __extends(FrameLayout, _super);
            function FrameLayout() {
                return _super.apply(this, arguments) || this;
            }
            FrameLayout.prototype.onMeasure = function (width, height, canvas) {
                return _super.prototype.onMeasure.call(this, width, height, canvas);
            };
            FrameLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                var viewItem;
                var length = this.children.length;
                for (var i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    this.layoutItem(viewItem, l, t, r, b, canvas);
                }
            };
            FrameLayout.prototype.layoutItem = function (viewItem, l, t, r, b, canvas) {
                var point = new Point(this.layoutInfo.innerrect.left, this.layoutInfo.innerrect.top);
                var innerrect = this.layoutInfo.innerrect;
                var length = this.children.length;
                var m = viewItem.layoutParams.margin;
                switch (viewItem.gravity) {
                    case Gravity.Left:
                        point.set(innerrect.left, innerrect.top);
                        point.offset(m.marginLeft, m.marginTop);
                        break;
                    case Gravity.Auto:
                        point.set(innerrect.left, innerrect.top);
                        break;
                    case Gravity.Right:
                        point.set(innerrect.right - viewItem.width, innerrect.top);
                        point.offset(-m.marginRight, m.marginTop);
                        break;
                    case Gravity.Top:
                        point.set(innerrect.left, innerrect.top);
                        point.offset(m.marginLeft, m.marginTop);
                        break;
                    case Gravity.Bottom:
                        point.set(innerrect.left, innerrect.bottom - viewItem.height);
                        point.offset(m.marginLeft, -m.marginBottom);
                        break;
                    case Gravity.Center:
                        var tmpl = innerrect.left + (this.layoutInfo.innerrect.width - viewItem.width) / 2;
                        var tmpt = innerrect.top + (this.layoutInfo.innerrect.height - viewItem.height) / 2;
                        if (tmpl < 0) {
                            tmpl = 0;
                        }
                        if (tmpt < 0) {
                            tmpt = 0;
                        }
                        point.set(tmpl, tmpt);
                        break;
                }
                // point.offset(m.getStartXMargin(), m.getStartYMargin());
                // point.offset(m.marginLeft,m.marginRight)
                viewItem.onLayout(point.x, point.y, point.x + viewItem.width, point.y + viewItem.height, canvas);
            };
            return FrameLayout;
        }(ViewGroup));
        widget.FrameLayout = FrameLayout;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="Context.ts" />
/// <reference path="../widget/FrameLayout.ts" />
/// <reference path="../util/Log.ts" />
var android;
(function (android) {
    var app;
    (function (app) {
        var LayoutParams = android.view.LayoutParams;
        var FrameLayout = android.widget.FrameLayout;
        var Log = android.util.Log;
        var Activity = (function (_super) {
            __extends(Activity, _super);
            function Activity(am) {
                var _this = _super.call(this) || this;
                if (am instanceof app.ActivityManager) {
                    _this.activityManager = am;
                }
                else {
                    throw "can't create Activity new ";
                }
                _this.rootView = new FrameLayout(_this);
                var lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, null);
                _this.rootView.layoutParams = lp;
                return _this;
                // this.rootView.background = 'lightblue';
            }
            Activity.prototype.attatchRootView = function (view) {
                view.addView(this.rootView, 0);
            };
            Activity.prototype.onCreate = function (bundle) {
                Log.d("oncreate");
            };
            Activity.prototype.onPause = function () {
                Log.d("onPause");
            };
            Activity.prototype.onResume = function () {
                Log.d('onResume');
            };
            Activity.prototype.onDestory = function () {
                Log.d('onDestory');
            };
            Activity.prototype.setContentView = function (view) {
                this.rootView.addView(view, 0);
            };
            Activity.prototype.startActivityForResult = function (intent, bundle, requestCode, resultCode) {
                this.activityManager.sendStartActivity(intent, bundle, requestCode, resultCode);
            };
            return Activity;
        }(app.Context));
        app.Activity = Activity;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
/// <reference path="./FrameLayout.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Padding = android.graphics.Padding;
        var MeasureSpec = android.view.MeasureSpec;
        var LayoutParams = android.view.LayoutParams;
        var RootView = (function (_super) {
            __extends(RootView, _super);
            function RootView() {
                return _super.apply(this, arguments) || this;
            }
            RootView.prototype.setInfo = function (left, top, width, height) {
                this._l = left;
                this._t = top;
                this._w = width;
                this._h = height;
                this.layoutParams.width = width;
                this.layoutParams.height = height;
                this.padding = new Padding(0);
            };
            RootView.prototype.dispatchDraw = function (canvas) {
                _super.prototype.dispatchDraw.call(this, canvas);
                var rect = this.layoutInfo.outterrect;
                //testCode
                canvas.drawRect(rect.startPoint, rect.endPoint, false, 'black');
            };
            RootView.prototype.onLayout = function (l, t, r, b, canvas) {
                _super.prototype.onLayout.call(this, l, t, r, b, canvas);
            };
            RootView.prototype.oninvalidate = function () {
                _super.prototype.oninvalidate.call(this);
                this._canvas.begin();
                this.dispatchDraw(this._canvas);
                this._canvas.end();
            };
            RootView.prototype.requestLayout = function () {
                var width = new MeasureSpec(this._w, LayoutParams.MATCH_PARENT);
                var height = new MeasureSpec(this._h, LayoutParams.MATCH_PARENT);
                this._canvas.begin();
                var size = this.onMeasure(width, height, this._canvas);
                this.onLayout(this._l, this._t, this._l + size.width, this._t + size.height, this._canvas);
                this._canvas.end();
                this.oninvalidate();
            };
            Object.defineProperty(RootView.prototype, "left", {
                get: function () {
                    return this._l;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RootView.prototype, "top", {
                get: function () {
                    return this._t;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RootView.prototype, "width", {
                get: function () {
                    return this._w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RootView.prototype, "height", {
                get: function () {
                    return this._h;
                },
                enumerable: true,
                configurable: true
            });
            RootView.prototype.startAnimation = function (animation) {
                this.animation = animation;
                setTimeout(this._startAnimation());
                // this._startAnimation();
            };
            RootView.prototype._startAnimation = function () {
                console.log("start " + Date.now());
                this.animation.start = Date.now();
                if (this._rootAniamtion != null && this._rootAniamtion.isAniamtionEnd) {
                    if (this._rootAniamtion.duration + this._rootAniamtion.start < this.animation.duration + this.animation.start) {
                        this._rootAniamtion.duration = this.animation.start + this.animation.duration - this._rootAniamtion.start;
                    }
                }
                else {
                    this._rootAniamtion = this.animation;
                    window.requestAnimationFrame(this._animate.bind(this));
                }
            };
            RootView.prototype._animate = function () {
                if (this._rootAniamtion != null && !this._rootAniamtion.isAniamtionEnd) {
                    this.invalidate(false);
                    window.requestAnimationFrame(this._animate.bind(this));
                }
                else {
                    this._rootAniamtion = null;
                    console.log("end " + Date.now());
                }
            };
            RootView.prototype.addView = function (view, index) {
                _super.prototype.addView.call(this, view, index);
                return index;
            };
            RootView.prototype.attachRender = function (r) {
                this._canvas = r;
            };
            return RootView;
        }(widget.FrameLayout));
        widget.RootView = RootView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="Activity.ts" />
/// <reference path="../widget/RootView.ts" />
/// <reference path="../device/Device.ts" />
/// <reference path="../view/event/MotionEvent.ts" />
var android;
(function (android) {
    var app;
    (function (app) {
        var RootView = android.widget.RootView;
        var Device = android.device.Device;
        var MotionEvent = android.view.event.MotionEvent;
        var ActivityManager = (function () {
            function ActivityManager(canvas) {
                this.stack = new Array();
                this.rootView = new RootView(null); // need to be application context
                this.rootView.attachRender(canvas);
                this.rootView.setInfo(0, 0, Device.width, Device.height);
            }
            ActivityManager.prototype.sendEvent = function (event) {
                if (event.action >= MotionEvent.ACTION_MOUSE_DOWN) {
                    this.rootView.dispatchMouseEvent(event);
                }
                else {
                    this.rootView.dispatchTouchEvent(event);
                }
            };
            ActivityManager.prototype.sendStartActivity = function (intent, bundle, requestCode, resultCode) {
                var targetActivity = this.createActivity(intent.getClass());
                var currentActivity = this.stack[this.stack.length - 1];
                if (currentActivity) {
                    currentActivity['onPause'].call(currentActivity);
                }
                this.rootView.removeAllViews();
                this.stack.push(targetActivity);
                targetActivity['attatchRootView'].call(targetActivity, this.rootView);
                targetActivity['onResume'].call(targetActivity);
                // TO DO ...  lanch mode
                targetActivity['onCreate'].call(targetActivity, bundle);
                // this.rootView.background ='white';
                this.rootView.invalidate(true);
            };
            ActivityManager.prototype.createActivity = function (activityClass) {
                var activity = new activityClass(this);
                return activity;
            };
            ActivityManager.prototype.getCurrentActivity = function () {
                return this.stack[this.stack.length - 1];
            };
            return ActivityManager;
        }());
        app.ActivityManager = ActivityManager;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
/// <reference path="./app/Intent.ts" />
/// <reference path="graphics/Canvas.ts" />
/// <reference path="./app/ActivityManager.ts" />
/// <reference path="./util/Log.ts" />
/// <reference path="./view/event/MotionEvent.ts" />
var android;
(function (android) {
    var ActivityManager = android.app.ActivityManager;
    var Canvas = android.graphics.Canvas;
    var RenderType = android.graphics.RenderType;
    var Intent = android.app.Intent;
    var Device = android.device.Device;
    var MotionEvent = android.view.event.MotionEvent;
    var StartUp = (function () {
        function StartUp() {
            this.loadConfig();
            this.element = document.getElementById(this.getRootElement());
            this.element.innerHTML = '';
            if (this.getFill() === 'parent') {
                Device.width = this.element.clientWidth;
                Device.height = this.element.clientHeight;
            }
            if (this.getRenderType() == 'canvas') {
                this.canvas = new Canvas(this.element, RenderType.Canvas);
            }
            else {
                this.canvas = new Canvas(this.element, RenderType.Svg);
            }
            this.activityManager = new ActivityManager(this.canvas);
            // this.element.ontouchstart=null;
            // this.element.ontouchmove=null;
            // this.element.ontouchend=null;
            // this.element.ontouchcancel=null;
            // this.element.onmousedown=null;
            // this.element.onmousemove=null;
            // this.element.onmouseup=null;
            // this.element.onmouseout=null;
            // this.element.onmouseover=null;
            this.element.ontouchstart = this.ontouch.bind(this);
            this.element.ontouchmove = this.ontouch.bind(this);
            this.element.ontouchend = this.ontouch.bind(this);
            this.element.ontouchcancel = this.ontouch.bind(this);
            this.element.onmousedown = this.ontouch.bind(this);
            this.element.onmousemove = this.ontouch.bind(this);
            this.element.onmouseup = this.ontouch.bind(this);
            this.element.onmouseout = this.ontouch.bind(this);
            this.element.onmouseover = this.ontouch.bind(this);
            this.element.onclick = this.ontouch.bind(this);
            // this.element.addEventListener('touchstart', this.ontouch.bind(this));
            // this.element.addEventListener('touchmove', this.ontouch.bind(this));
            // this.element.addEventListener('touchend', this.ontouch.bind(this));
            // this.element.addEventListener('touchcancel', this.ontouch.bind(this));
            // this.element.addEventListener('mousedown', this.ontouch.bind(this));
            // this.element.addEventListener('mousemove', this.ontouch.bind(this));
            // this.element.addEventListener('mouseup', this.ontouch.bind(this));
            // this.element.addEventListener('mouseout', this.ontouch.bind(this));
            // this.element.addEventListener('mouseover', this.ontouch.bind(this));
        }
        StartUp.prototype.ontouch = function (event) {
            event.preventDefault();
            event.stopPropagation();
            var event = event || window.event;
            var str = '';
            var mevent = new MotionEvent(0, 0, 0);
            switch (event.type) {
                case "touchstart":
                    // str= "Touch started (" + event.touches[0].clientX + "," + event.touches[0].clientY + ")";
                    mevent = new MotionEvent(event.touches[0].clientX, event.touches[0].clientY, MotionEvent.ACTION_DOWN);
                    break;
                case "touchend":
                    mevent = new MotionEvent(event.changedTouches[0].clientX, event.changedTouches[0].clientY, MotionEvent.ACTION_UP);
                    break;
                case "touchcancel":
                    mevent = new MotionEvent(event.changedTouches[0].clientX, event.changedTouches[0].clientY, MotionEvent.ACTION_CANCEL);
                    break;
                case "touchmove":
                    mevent = new MotionEvent(event.touches[0].clientX, event.touches[0].clientY, MotionEvent.ACTION_MOVE);
                    break;
                case 'mousedown':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_DOWN);
                    break;
                case 'mousemove':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_MOVE);
                    break;
                case 'mouseup':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_UP);
                    break;
                case 'mouseout':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_OUT);
                    break;
                case 'mouseover':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_MOUSE_OVER);
                    break;
                case 'click':
                    mevent = new MotionEvent(event.clientX, event.clientY, MotionEvent.ACTION_CLICK);
                    break;
            }
            mevent.element = this.element;
            var elementrect = this.element.getClientRects();
            mevent.x = mevent.x - elementrect[0].left;
            mevent.y = mevent.y - elementrect[0].top;
            this.activityManager.sendEvent(mevent);
            // Log.d('ontouch ' + str);
        };
        StartUp.prototype.start = function () {
            var intent = new Intent();
            intent.setClass(null, this.getLaunchActivity());
            var bundle = new android.app.Bundle();
            bundle.putDefault(this.getLaunchParams());
            this.activityManager.sendStartActivity(intent, bundle, 0, 0);
        };
        StartUp.prototype.getLaunchActivity = function () {
            return this.config.launchActivity.target;
        };
        StartUp.prototype.getLaunchParams = function () {
            return this.config.launchActivity.params;
        };
        StartUp.prototype.getRootElement = function () {
            return this.config.rootcontainer.target;
        };
        StartUp.prototype.getRenderType = function () {
            return this.config.rendertype ? this.config.rendertype.target : 'svg';
        };
        StartUp.prototype.getFill = function () {
            return this.config.fill;
        };
        StartUp.prototype.loadConfig = function () {
            this.config = window['mainfest'].config;
        };
        StartUp.prototype.getCurrentActivity = function () {
            return this.activityManager.getCurrentActivity();
        };
        return StartUp;
    }());
    android.StartUp = StartUp;
})(android || (android = {}));
var android;
(function (android) {
    var database;
    (function (database) {
        var DataSetObserver = (function () {
            function DataSetObserver() {
            }
            DataSetObserver.prototype.onChanged = function () {
                // Do nothing
            };
            DataSetObserver.prototype.onInvalidated = function () {
                // Do nothing
            };
            return DataSetObserver;
        }());
        database.DataSetObserver = DataSetObserver;
    })(database = android.database || (android.database = {}));
})(android || (android = {}));
/// <reference path="DataSetObserver.ts" />
var android;
(function (android) {
    var database;
    (function (database) {
        var Observable = (function () {
            function Observable() {
                this.mObservers = new Array();
            }
            Observable.prototype.registerObserver = function (observer) {
                if (!observer) {
                    throw "The observer is null or undefine";
                }
                if (this.mObservers.indexOf(observer) > -1) {
                    throw "Observer " + observer + " is already registered ";
                }
                this.mObservers.push(observer);
            };
            Observable.prototype.unregisterObserver = function (observer) {
                if (!observer) {
                    throw "The observer is null or undefine";
                }
                var index = this.mObservers.indexOf(observer);
                if (index === -1) {
                    throw "Observer " + observer + " was not registered ";
                }
                this.mObservers.splice(index, 1);
            };
            Observable.prototype.unregisterAll = function () {
                this.mObservers.length = 0;
            };
            return Observable;
        }());
        database.Observable = Observable;
        var DataSetObservable = (function (_super) {
            __extends(DataSetObservable, _super);
            function DataSetObservable() {
                return _super.apply(this, arguments) || this;
            }
            DataSetObservable.prototype.notifyChanged = function () {
                for (var i = this.mObservers.length - 1; i >= 0; i--) {
                    this.mObservers[i].onChanged();
                }
            };
            DataSetObservable.prototype.notifyInvalidated = function () {
                for (var i = this.mObservers.length - 1; i >= 0; i--) {
                    this.mObservers[i].onInvalidated();
                }
            };
            return DataSetObservable;
        }(Observable));
        database.DataSetObservable = DataSetObservable;
    })(database = android.database || (android.database = {}));
})(android || (android = {}));
/// <reference path="../database/DataSetObservable.ts" />
var android;
(function (android) {
    var adapter;
    (function (adapter) {
        var Adapter = (function () {
            function Adapter() {
            }
            return Adapter;
        }());
        adapter.Adapter = Adapter;
    })(adapter = android.adapter || (android.adapter = {}));
})(android || (android = {}));
/// <reference path="../database/DataSetObservable.ts" />
var android;
(function (android) {
    var adapter;
    (function (adapter) {
        var DataSetObservable = android.database.DataSetObservable;
        var ViewPageAdapter = (function () {
            function ViewPageAdapter() {
                this.mDataSetObservable = new DataSetObservable();
                this.mViewCache = new Array();
                this.mShouldCache = false;
            }
            ViewPageAdapter.prototype.XBaseAdapter = function () {
            };
            /************************************* don't use this  **********************************************/
            ViewPageAdapter.prototype.registerDataSetObserver = function (observer) {
                this.mDataSetObservable.registerObserver(observer);
            };
            ViewPageAdapter.prototype.unregisterDataSetObserver = function (observer) {
                this.mDataSetObservable.unregisterObserver(observer);
            };
            /**********************************************************************************************/
            ViewPageAdapter.prototype.notifyDataSetChanged = function () {
                this.mDataSetObservable.notifyChanged();
            };
            ViewPageAdapter.prototype.notifyDataSetInvalidated = function () {
                this.mDataSetObservable.notifyInvalidated();
            };
            /***
             * set cache
             *
             * @param enable
             */
            ViewPageAdapter.prototype.setCacheEnable = function (enable) {
                this.mShouldCache = enable;
                if (!this.mShouldCache) {
                    this.mViewCache.length = 0;
                }
            };
            ViewPageAdapter.prototype.initItem = function (position, container) {
                var view = null;
                if (this.mShouldCache) {
                    for (var i = 0; i < this.mViewCache.length; ++i) {
                        var info = this.mViewCache[i];
                        if (info != null && info.position == position) {
                            view = info.view;
                            if (view != null) {
                                return this.instantiateItem(position, container, view);
                            }
                        }
                    }
                    if (view == null) {
                        view = this.instantiateItem(position, container, null);
                    }
                    this.mViewCache.push(new ViewInfo(view, position));
                }
                if (view == null) {
                    view = this.instantiateItem(position, container, null);
                }
                return view;
            };
            /**
             * unuseful methods currently
             */
            ViewPageAdapter.prototype.beginUpdata = function () { };
            /**
             * unuseful methods currently
             */
            ViewPageAdapter.prototype.finishUpdata = function () { };
            return ViewPageAdapter;
        }());
        adapter.ViewPageAdapter = ViewPageAdapter;
        var ViewInfo = (function () {
            function ViewInfo(v, pos) {
                this.view = v;
                this.position = pos;
            }
            return ViewInfo;
        }());
        adapter.ViewInfo = ViewInfo;
    })(adapter = android.adapter || (android.adapter = {}));
})(android || (android = {}));
var android;
(function (android) {
    var app;
    (function (app) {
        var Bundle = (function () {
            function Bundle() {
                this.map = {};
            }
            Bundle.prototype.put = function (key, value) {
                this.map[key] = value;
            };
            Bundle.prototype.putDefault = function (value) {
                this.map['default'] = value;
            };
            Bundle.prototype.getDefault = function () {
                return this.map['default'];
            };
            return Bundle;
        }());
        app.Bundle = Bundle;
    })(app = android.app || (android.app = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var Align;
        (function (Align) {
            Align[Align["LEFT"] = 0] = "LEFT";
            /**
             * The text is drawn centered horizontally on the x,y origin
             */
            Align[Align["CENTER"] = 1] = "CENTER";
            /**
             * The text is drawn to the left of the x,y origin
             */
            Align[Align["RIGHT"] = 2] = "RIGHT";
        })(Align = graphics.Align || (graphics.Align = {}));
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var AlignElment = (function () {
            function AlignElment(position, element) {
                this.position = position;
                this.element = element;
            }
            return AlignElment;
        }());
        graphics.AlignElment = AlignElment;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Rect.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        'use strict';
        var Size = android.graphics.Size;
        var Point = android.graphics.Point;
        /**
         * Render to canvas.
         */
        var CanvasRenderEngine = (function () {
            function CanvasRenderEngine(element) {
                this._element = element;
                this._create();
            }
            Object.defineProperty(CanvasRenderEngine.prototype, "alpha", {
                set: function (value) {
                    this._canvas2d.globalAlpha = value;
                },
                enumerable: true,
                configurable: true
            });
            CanvasRenderEngine.prototype.beginRender = function () {
                this._canvas2d.clearRect(0, 0, this._canvas.width, this._canvas.height);
            };
            CanvasRenderEngine.prototype.endRender = function () {
            };
            CanvasRenderEngine.prototype.save = function () {
                // console.log('save');
                this._canvas2d.save();
            };
            CanvasRenderEngine.prototype.restore = function () {
                // console.log("restore");
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.getImageData = function (sx, sy, sw, sh) {
                return this._canvas2d.getImageData(sx, sy, sw, sh);
            };
            CanvasRenderEngine.prototype.putImageData = function (imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
                this._canvas2d.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
            };
            CanvasRenderEngine.prototype.clip = function (rect) {
                this._canvas2d.beginPath();
                this._canvas2d.rect(rect.left, rect.top, rect.width, rect.height);
                ;
                this._canvas2d.clip();
            };
            CanvasRenderEngine.prototype.setViewportSize = function (w, h) {
                var _devicePixelRatio = 2;
                this._canvas.width = w * _devicePixelRatio;
                this._canvas.height = h * _devicePixelRatio;
                this._canvas.style.width = w + "px";
                this._canvas.style.height = h + "px";
                this._canvas2d.scale(_devicePixelRatio, _devicePixelRatio);
            };
            Object.defineProperty(CanvasRenderEngine.prototype, "element", {
                get: function () {
                    return this._canvas;
                },
                enumerable: true,
                configurable: true
            });
            CanvasRenderEngine.prototype.drawEllipse = function (cx, cy, rx, ry, className, style) {
            };
            CanvasRenderEngine.prototype.drawRect = function (x, y, w, h, color, fill) {
                if (color) {
                    this._canvas2d.fillStyle = color;
                    this._canvas2d.strokeStyle = color;
                }
                if (fill) {
                    this._canvas2d.fillRect(x, y, w, h);
                }
                else {
                    this._canvas2d.strokeRect(x, y, w, h);
                }
            };
            CanvasRenderEngine.prototype.drawLine = function (x1, y1, x2, y2, strokestyle) {
                this._canvas2d.beginPath();
                this._canvas2d.moveTo(x1, y1);
                this._canvas2d.lineTo(x2, y2);
                this._canvas2d.strokeStyle = strokestyle.strokeColor;
                this._canvas2d.lineWidth = strokestyle.strokeWidth;
                this._canvas2d.stroke();
            };
            CanvasRenderEngine.prototype.drawLines = function (xs, ys, strokestyle) {
                if (xs !== null && ys !== null && xs.length === ys.length && xs.length > 0) {
                    this._canvas2d.beginPath();
                    this._canvas2d.strokeStyle = strokestyle.strokeColor;
                    this._canvas2d.lineWidth = strokestyle.strokeWidth;
                    this._canvas2d.moveTo(xs[0], ys[0]);
                    for (var i = 1; i < xs.length; ++i) {
                        this._canvas2d.lineTo(xs[i], ys[i]);
                    }
                    this._canvas2d.stroke();
                    this._canvas2d.closePath();
                }
            };
            CanvasRenderEngine.prototype.drawPolygon = function (xs, ys, color) {
                this._canvas2d.save();
                this._canvas2d.fillStyle = color;
                this._canvas2d.beginPath();
                this._canvas2d.moveTo(xs[0], ys[0]);
                for (var i = 1; i < xs.length; ++i) {
                    this._canvas2d.lineTo(xs[i], ys[i]);
                }
                this._canvas2d.closePath();
                this._canvas2d.fill();
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.drawPie = function (cx, cy, r, startAngle, sweepAngle, color) {
                this._canvas2d.save();
                this._canvas2d.beginPath();
                this._canvas2d.moveTo(cx, cy);
                this._canvas2d.arc(cx, cy, r, startAngle, startAngle + sweepAngle);
                this._canvas2d.lineTo(cx, cy);
                this._canvas2d.fillStyle = color;
                this._canvas2d.closePath();
                this._canvas2d.fill();
                this._canvas2d.rotate(startAngle);
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.drawDonut = function (cx, cy, radius, innerRadius, startAngle, sweepAngle, color) {
                // this.drawPie(cx, cy, radius, startAngle, sweepAngle, color);
                // this.drawPie(cx, cy, innerRadius, 0, Math.PI * 2, 'rgba(255,255,255,1)');
                var endAngle = startAngle + sweepAngle;
                var p1 = new Point(cx, cy);
                p1.x += innerRadius * Math.cos(startAngle);
                p1.y += innerRadius * Math.sin(startAngle);
                var p2 = new Point(cx, cy);
                p2.x += innerRadius * Math.cos(endAngle);
                p2.y += innerRadius * Math.sin(endAngle);
                this._canvas2d.save();
                this._canvas2d.beginPath();
                this._canvas2d.fillStyle = color;
                this._canvas2d.moveTo(p1.x, p1.y);
                this._canvas2d.arc(cx, cy, radius, startAngle, endAngle, false);
                this._canvas2d.lineTo(p2.x, p2.y);
                this._canvas2d.arc(cx, cy, innerRadius, endAngle, startAngle, true);
                this._canvas2d.fill();
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.drawString = function (s, pt, font) {
                if (font) {
                    this._canvas2d.font = font.fontSize + 'px ' + font.fontFamily;
                    var gradient = this._canvas2d.createLinearGradient(0, 0, this._canvas.width, 0);
                    if (font.fontColor) {
                        gradient.addColorStop(1.0, font.fontColor);
                        this._canvas2d.fillStyle = gradient;
                    }
                }
                this._canvas2d.fillText(s, pt.x, pt.y);
            };
            CanvasRenderEngine.prototype.drawStringRotated = function (s, pt, center, angle, font) {
                this._canvas2d.save();
                this._canvas2d.textBaseline = 'bottom';
                this._canvas2d.translate(center.x, center.y);
                this._canvas2d.rotate(Math.PI / 180 * angle);
                this._canvas2d.translate(-center.x, -center.y);
                if (font) {
                    this._canvas2d.font = font.fontSize + 'px ' + font.fontFamily;
                    var gradient = this._canvas2d.createLinearGradient(0, 0, this._canvas.width, 0);
                    if (font.fontColor) {
                        gradient.addColorStop(1.0, font.fontColor);
                        this._canvas2d.fillStyle = gradient;
                    }
                }
                this._canvas2d.fillText(s, pt.x, pt.y);
                this._canvas2d.restore();
            };
            CanvasRenderEngine.prototype.measureString = function (s, font, maxSize) {
                if (maxSize === void 0) { maxSize = 0; }
                var sz = new Size(0, 0);
                this._canvas2d.font = font.fontSize + "px" + " " + font.fontFamily;
                var tm = this._canvas2d.measureText(s);
                sz.width = tm.width;
                sz.height = font.fontSize;
                return sz;
            };
            CanvasRenderEngine.prototype.drawImage = function (image, x, y, w, h) {
            };
            CanvasRenderEngine.prototype._create = function () {
                this._canvas = document.createElement('canvas');
                this._element.appendChild(this._canvas);
                this._canvas2d = this._canvas.getContext("2d");
            };
            CanvasRenderEngine.prototype.moveTo = function (x, y) {
                this._canvas2d.moveTo(x, y);
            };
            CanvasRenderEngine.prototype.scale = function (sx, sy) {
                this._canvas2d.scale(sx, sy);
            };
            CanvasRenderEngine.prototype.rotate = function (degree) {
                this._canvas2d.rotate(degree);
            };
            CanvasRenderEngine.prototype.translate = function (x, y) {
                this._canvas2d.translate(x, y);
            };
            return CanvasRenderEngine;
        }());
        graphics.CanvasRenderEngine = CanvasRenderEngine;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Rect.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        'use strict';
        var Size = android.graphics.Size;
        var Point = android.graphics.Point;
        /**
         * Render to svg.
         */
        var SvgRenderEngine = (function () {
            function SvgRenderEngine(element) {
                this._strokeWidth = 1;
                this._fontSize = null;
                this._fontFamily = null;
                this.alpha = 1;
                this._element = element;
                this._create();
                this._element.appendChild(this._svg);
                if (SvgRenderEngine._isff === undefined) {
                    SvgRenderEngine._isff = navigator.userAgent.toLowerCase().indexOf('firefox') >= 0;
                }
            }
            SvgRenderEngine.prototype.save = function () {
            };
            SvgRenderEngine.prototype.restore = function () {
            };
            SvgRenderEngine.prototype.clip = function () { };
            SvgRenderEngine.prototype.beginRender = function () {
                while (this._svg.firstChild) {
                    this._svg.removeChild(this._svg.firstChild);
                }
                this._svg.appendChild(this._textGroup);
            };
            SvgRenderEngine.prototype.endRender = function () {
                if (this._textGroup.parentNode) {
                    this._svg.removeChild(this._textGroup);
                }
            };
            SvgRenderEngine.prototype.setViewportSize = function (w, h) {
                this._svg.setAttribute('width', w.toString());
                this._svg.setAttribute('height', h.toString());
            };
            Object.defineProperty(SvgRenderEngine.prototype, "element", {
                get: function () {
                    return this._svg;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "fill", {
                get: function () {
                    return this._fill;
                },
                set: function (value) {
                    this._fill = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "fontSize", {
                get: function () {
                    return this._fontSize;
                },
                set: function (value) {
                    this._fontSize = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "fontFamily", {
                get: function () {
                    return this._fontFamily;
                },
                set: function (value) {
                    this._fontFamily = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "stroke", {
                get: function () {
                    return this._stroke;
                },
                set: function (value) {
                    this._stroke = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "strokeWidth", {
                get: function () {
                    return this._strokeWidth;
                },
                set: function (value) {
                    this._strokeWidth = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SvgRenderEngine.prototype, "textFill", {
                get: function () {
                    return this._textFill;
                },
                set: function (value) {
                    this._textFill = value;
                },
                enumerable: true,
                configurable: true
            });
            SvgRenderEngine.prototype.addClipRect = function (clipRect, id) {
                if (clipRect && id) {
                    var clipPath = document.createElementNS(SvgRenderEngine.svgNS, 'clipPath');
                    var rect = document.createElementNS(SvgRenderEngine.svgNS, 'rect');
                    rect.setAttribute('x', (clipRect.left - 1).toFixed());
                    rect.setAttribute('y', (clipRect.top - 1).toFixed());
                    rect.setAttribute('width', (clipRect.width + 2).toFixed());
                    rect.setAttribute('height', (clipRect.height + 2).toFixed());
                    clipPath.appendChild(rect);
                    clipPath.setAttribute('id', id);
                    this._svg.appendChild(clipPath);
                }
            };
            SvgRenderEngine.prototype.drawEllipse = function (cx, cy, rx, ry, className, style) {
                var ell = document.createElementNS(SvgRenderEngine.svgNS, 'ellipse');
                ell.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    ell.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                ell.setAttribute('fill', this._fill);
                ell.setAttribute('cx', cx.toFixed(1));
                ell.setAttribute('cy', cy.toFixed(1));
                ell.setAttribute('rx', rx.toFixed(1));
                ell.setAttribute('ry', ry.toFixed(1));
                //ell.setAttribute('cx', cx.toString());
                //ell.setAttribute('cy', cy.toString());
                //ell.setAttribute('rx', rx.toString());
                //ell.setAttribute('ry', ry.toString());
                if (className) {
                    ell.setAttribute('class', className);
                }
                this._applyStyle(ell, style);
                //this._svg.appendChild(ell);
                this._appendChild(ell);
                return ell;
            };
            SvgRenderEngine.prototype.drawRect = function (x, y, w, h, className, style, clipPath) {
                var rect = document.createElementNS(SvgRenderEngine.svgNS, 'rect');
                rect.setAttribute('fill', this._fill);
                rect.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    rect.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                rect.setAttribute('x', x.toFixed(1));
                rect.setAttribute('y', y.toFixed(1));
                if (w > 0 && w < 0.05) {
                    rect.setAttribute('width', '0.1');
                }
                else {
                    rect.setAttribute('width', w.toFixed(1));
                }
                if (h > 0 && h < 0.05) {
                    rect.setAttribute('height', '0.1');
                }
                else {
                    rect.setAttribute('height', h.toFixed(1));
                }
                if (clipPath) {
                    rect.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                if (className) {
                    rect.setAttribute('class', className);
                }
                this._applyStyle(rect, style);
                this._appendChild(rect);
                return rect;
            };
            // this._render.drawLine(startpoint.x, startpoint.y, endpoint.x, endpoint.y,stroke);
            SvgRenderEngine.prototype.drawLine = function (x1, y1, x2, y2, stroke) {
                this._drawLine(x1, y1, x2, y2, null, { 'stroke': stroke.strokeColor, 'stroke-width': stroke.strokeWidth });
            };
            SvgRenderEngine.prototype._drawLine = function (x1, y1, x2, y2, className, style) {
                var line = document.createElementNS(SvgRenderEngine.svgNS, 'line');
                line.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    line.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                line.setAttribute('x1', x1.toFixed(1));
                line.setAttribute('x2', x2.toFixed(1));
                line.setAttribute('y1', y1.toFixed(1));
                line.setAttribute('y2', y2.toFixed(1));
                //line.setAttribute('x1', x1.toString());
                //line.setAttribute('x2', x2.toString());
                //line.setAttribute('y1', y1.toString());
                //line.setAttribute('y2', y2.toString());
                if (className) {
                    line.setAttribute('class', className);
                }
                this._applyStyle(line, style);
                this._appendChild(line);
                return line;
            };
            SvgRenderEngine.prototype.drawLines = function (xs, ys, className, style, clipPath) {
                if (xs && ys) {
                    var len = Math.min(xs.length, ys.length);
                    if (len > 0) {
                        var pline = document.createElementNS(SvgRenderEngine.svgNS, 'polyline');
                        pline.setAttribute('stroke', this._stroke);
                        if (this._strokeWidth !== null) {
                            pline.setAttribute('stroke-width', this._strokeWidth.toString());
                        }
                        pline.setAttribute('fill', 'none');
                        var spts = '';
                        for (var i = 0; i < len; i++) {
                            spts += xs[i].toFixed(1) + ',' + ys[i].toFixed(1) + ' ';
                        }
                        pline.setAttribute('points', spts);
                        if (className) {
                            pline.setAttribute('class', className);
                        }
                        if (clipPath) {
                            pline.setAttribute('clip-path', 'url(#' + clipPath + ')');
                        }
                        this._applyStyle(pline, style);
                        this._appendChild(pline);
                        return pline;
                    }
                }
                return null;
            };
            SvgRenderEngine.prototype.drawPolygon = function (xs, ys, className, style, clipPath) {
                if (xs && ys) {
                    var len = Math.min(xs.length, ys.length);
                    if (len > 0) {
                        var poly = document.createElementNS(SvgRenderEngine.svgNS, 'polygon');
                        poly.setAttribute('stroke', this._stroke);
                        if (this._strokeWidth !== null) {
                            poly.setAttribute('stroke-width', this._strokeWidth.toString());
                        }
                        poly.setAttribute('fill', this._fill);
                        poly.setAttribute('opacity', this.alpha + "");
                        var spts = '';
                        for (var i = 0; i < len; i++) {
                            //spts += xs[i].toString() + ',' + ys[i].toString() + ' ';
                            spts += xs[i].toFixed(1) + ',' + ys[i].toFixed(1) + ' ';
                        }
                        poly.setAttribute('points', spts);
                        if (className) {
                            poly.setAttribute('class', className);
                        }
                        if (clipPath) {
                            poly.setAttribute('clip-path', 'url(#' + clipPath + ')');
                        }
                        this._applyStyle(poly, style);
                        this._appendChild(poly);
                        return poly;
                    }
                }
                return null;
            };
            SvgRenderEngine.prototype.drawPie = function (cx, cy, r, startAngle, sweepAngle, className, style, clipPath) {
                if (sweepAngle >= Math.PI * 2) {
                    return this.drawEllipse(cx, cy, r, r, className, style);
                }
                var path = document.createElementNS(SvgRenderEngine.svgNS, 'path');
                path.setAttribute('fill', this._fill);
                path.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    path.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                var p1 = new Point(cx, cy);
                p1.x += r * Math.cos(startAngle);
                p1.y += r * Math.sin(startAngle);
                var a2 = startAngle + sweepAngle;
                var p2 = new Point(cx, cy);
                p2.x += r * Math.cos(a2);
                p2.y += r * Math.sin(a2);
                var opt = ' 0 0,1 ';
                if (Math.abs(sweepAngle) > Math.PI) {
                    opt = ' 0 1,1 ';
                }
                //var d = 'M ' + cx.toFixed(1) + ',' + cy.toFixed(1);
                //d += ' L ' + p1.x.toFixed(1) + ',' + p1.y.toFixed(1);
                //d += ' A ' + r.toFixed(1) + ',' + r.toFixed(1) + opt;
                //d += p2.x.toFixed(1) + ',' + p2.y.toFixed(1) + ' z';
                var d = 'M ' + p1.x.toFixed(1) + ',' + p1.y.toFixed(1);
                d += ' A ' + r.toFixed(1) + ',' + r.toFixed(1) + opt;
                d += p2.x.toFixed(1) + ',' + p2.y.toFixed(1);
                d += ' L ' + cx.toFixed(1) + ',' + cy.toFixed(1) + ' z';
                path.setAttribute('d', d);
                if (clipPath) {
                    path.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                if (className) {
                    path.setAttribute('class', className);
                }
                this._applyStyle(path, style);
                this._appendChild(path);
                return path;
            };
            SvgRenderEngine.prototype.drawDonut = function (cx, cy, radius, innerRadius, startAngle, sweepAngle, className, style, clipPath) {
                var isFull = false;
                if (startAngle + sweepAngle >= Math.PI * 2) {
                    isFull = true;
                    sweepAngle = Math.PI * 2 - startAngle - 0.01;
                }
                var path = document.createElementNS(SvgRenderEngine.svgNS, 'path');
                path.setAttribute('fill', this._fill);
                path.setAttribute('stroke', this._stroke);
                if (this._strokeWidth !== null) {
                    path.setAttribute('stroke-width', this._strokeWidth.toString());
                }
                var p1 = new Point(cx, cy);
                p1.x += radius * Math.cos(startAngle);
                p1.y += radius * Math.sin(startAngle);
                var a2 = startAngle + sweepAngle;
                var p2 = new Point(cx, cy);
                p2.x += radius * Math.cos(a2);
                p2.y += radius * Math.sin(a2);
                var p3 = new Point(cx, cy);
                p3.x += innerRadius * Math.cos(a2);
                p3.y += innerRadius * Math.sin(a2);
                var p4 = new Point(cx, cy);
                p4.x += innerRadius * Math.cos(startAngle);
                p4.y += innerRadius * Math.sin(startAngle);
                var opt1 = ' 0 0,1 ', opt2 = ' 0 0,0 ';
                if (Math.abs(sweepAngle) > Math.PI) {
                    opt1 = ' 0 1,1 ';
                    opt2 = ' 0 1,0 ';
                }
                var d = 'M ' + p1.x.toFixed(3) + ',' + p1.y.toFixed(3);
                d += ' A ' + radius.toFixed(3) + ',' + radius.toFixed(3) + opt1;
                d += p2.x.toFixed(3) + ',' + p2.y.toFixed(3);
                if (isFull) {
                    d += ' M ' + p3.x.toFixed(3) + ',' + p3.y.toFixed(3);
                }
                else {
                    d += ' L ' + p3.x.toFixed(3) + ',' + p3.y.toFixed(3);
                }
                d += ' A ' + innerRadius.toFixed(3) + ',' + innerRadius.toFixed(3) + opt2;
                d += p4.x.toFixed(3) + ',' + p4.y.toFixed(3);
                if (!isFull) {
                    d += ' z';
                }
                path.setAttribute('d', d);
                if (clipPath) {
                    path.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                if (className) {
                    path.setAttribute('class', className);
                }
                this._applyStyle(path, style);
                this._appendChild(path);
                return path;
            };
            SvgRenderEngine.prototype.drawString = function (s, pt, className, style) {
                var text = this._createText(pt, s);
                if (className) {
                    text.setAttribute('class', className);
                }
                this._applyStyle(text, style);
                this._appendChild(text);
                var bb = this._getBBox(text); // text.getBBox();
                text.setAttribute('y', (pt.y - (bb.y + bb.height - pt.y)).toFixed(1));
                return text;
            };
            SvgRenderEngine.prototype.drawStringRotated = function (s, pt, center, angle, className, style) {
                var text = this._createText(pt, s);
                if (className) {
                    text.setAttribute('class', className);
                }
                this._applyStyle(text, style);
                var g = document.createElementNS(SvgRenderEngine.svgNS, 'g');
                g.setAttribute('transform', 'rotate(' + angle.toFixed(1) + ',' + center.x.toFixed(1) + ',' + center.y.toFixed(1) + ')');
                //g.setAttribute('transform', 'rotate(' + angle.toString() + ',' + center.x.toString() + ',' + center.y.toString() + ')');
                g.appendChild(text);
                //this._svg.appendChild(g);
                this._appendChild(g);
                var bb = this._getBBox(text); // text.getBBox();
                text.setAttribute('y', (pt.y - (bb.y + bb.height - pt.y)).toFixed(1));
                return text;
            };
            SvgRenderEngine.prototype.measureString = function (s, font) {
                return this._measureString(s, null, null, { 'font-size': font.fontSize, 'font-family': font.fontFamily });
            };
            SvgRenderEngine.prototype._measureString = function (s, className, groupName, style) {
                var sz = new Size(0, 0);
                if (this._fontSize) {
                    this._text.setAttribute('font-size', this._fontSize);
                }
                if (this._fontFamily) {
                    this._text.setAttribute('font-family', this._fontFamily);
                }
                if (className) {
                    this._text.setAttribute('class', className);
                }
                if (groupName) {
                    this._textGroup.setAttribute('class', groupName);
                }
                this._applyStyle(this._text, style);
                this._setText(this._text, s);
                var rect = this._getBBox(this._text); // this._text.getBBox();
                sz.width = rect.width;
                sz.height = rect.height - 2;
                this._text.removeAttribute('font-size');
                this._text.removeAttribute('font-family');
                this._text.removeAttribute('class');
                if (style) {
                    for (var key in style) {
                        this._text.removeAttribute(this._deCase(key));
                    }
                }
                this._textGroup.removeAttribute('class');
                this._text.textContent = null;
                return sz;
            };
            SvgRenderEngine.prototype.startGroup = function (className, clipPath, createTransform) {
                if (createTransform === void 0) { createTransform = false; }
                var group = document.createElementNS(SvgRenderEngine.svgNS, 'g');
                if (className) {
                    group.setAttribute('class', className);
                }
                if (clipPath) {
                    group.setAttribute('clip-path', 'url(#' + clipPath + ')');
                }
                this._appendChild(group);
                if (createTransform) {
                    group.transform.baseVal.appendItem(this._svg.createSVGTransform());
                }
                this._group = group;
                return group;
            };
            SvgRenderEngine.prototype.endGroup = function () {
                if (this._group) {
                    var parent = this._group.parentNode;
                    if (parent == this._svg) {
                        this._group = null;
                    }
                    else {
                        this._group = parent;
                    }
                }
            };
            SvgRenderEngine.prototype.drawImage = function (imageHref, x, y, w, h) {
                var img = document.createElementNS(SvgRenderEngine.svgNS, 'image');
                img.setAttributeNS(SvgRenderEngine.xlinkNS, 'href', imageHref);
                img.setAttribute('x', x.toFixed(1));
                img.setAttribute('y', y.toFixed(1));
                img.setAttribute('width', w.toFixed(1));
                img.setAttribute('height', h.toFixed(1));
                this._appendChild(img);
                return img;
            };
            SvgRenderEngine.prototype._appendChild = function (element) {
                var group = this._group;
                if (!group) {
                    group = this._svg;
                }
                group.appendChild(element);
            };
            SvgRenderEngine.prototype._create = function () {
                this._svg = document.createElementNS(SvgRenderEngine.svgNS, 'svg');
                this._defs = document.createElementNS(SvgRenderEngine.svgNS, 'defs');
                this._svg.appendChild(this._defs);
                this._text = this._createText(new Point(-1000, -1000), '');
                this._textGroup = document.createElementNS(SvgRenderEngine.svgNS, 'g');
                this._textGroup.appendChild(this._text);
                this._svg.appendChild(this._textGroup);
            };
            SvgRenderEngine.prototype._setText = function (element, s) {
                var text = s ? s.toString() : null;
                if (text && text.indexOf('tspan') >= 0) {
                    try {
                        element.textContent = null;
                        // Parse the markup into valid nodes.
                        var dXML = new DOMParser();
                        //dXML.async = false;
                        // Wrap the markup into a SVG node to ensure parsing works.
                        var sXML = '<svg xmlns="http://www.w3.org/2000/svg\">' + text + '</svg>';
                        var svgDocElement = dXML.parseFromString(sXML, 'text/xml').documentElement;
                        // Now take each node, import it and append to this element.
                        var childNode = svgDocElement.firstChild;
                        while (childNode) {
                            element.appendChild(element.ownerDocument.importNode(childNode, true));
                            childNode = childNode.nextSibling;
                        }
                    }
                    catch (e) {
                        throw new Error('Error parsing XML string.');
                    }
                    ;
                }
                else {
                    element.textContent = text;
                }
            };
            SvgRenderEngine.prototype._createText = function (pos, text) {
                var textel = document.createElementNS(SvgRenderEngine.svgNS, 'text');
                this._setText(textel, text);
                textel.setAttribute('fill', this._textFill);
                textel.setAttribute('x', pos.x.toFixed(1));
                textel.setAttribute('y', pos.y.toFixed(1));
                //textel.setAttribute('x', pos.x.toString());
                //textel.setAttribute('y', pos.y.toString());
                if (this._fontSize) {
                    textel.setAttribute('font-size', this._fontSize);
                }
                if (this._fontFamily) {
                    textel.setAttribute('font-family', this._fontFamily);
                }
                return textel;
            };
            SvgRenderEngine.prototype._applyStyle = function (el, style) {
                if (style) {
                    for (var key in style) {
                        el.setAttribute(this._deCase(key), style[key]);
                    }
                }
            };
            SvgRenderEngine.prototype._deCase = function (s) {
                return s.replace(/[A-Z]/g, function (a) { return '-' + a.toLowerCase(); });
            };
            SvgRenderEngine.prototype._getBBox = function (text) {
                if (SvgRenderEngine._isff) {
                    try {
                        return text.getBBox();
                    }
                    catch (e) {
                        return { x: 0, y: 0, width: 0, height: 0 };
                    }
                }
                else {
                    return text.getBBox();
                }
            };
            return SvgRenderEngine;
        }());
        SvgRenderEngine.svgNS = 'http://www.w3.org/2000/svg';
        SvgRenderEngine.xlinkNS = 'http://www.w3.org/1999/xlink';
        graphics.SvgRenderEngine = SvgRenderEngine;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
/// <reference path="Util.ts" />
/// <reference path="Canvas.ts" />
var android;
(function (android) {
    var graphics;
    (function (graphics) {
        var TextPaint = (function () {
            function TextPaint(canvas, font) {
                this.canvas = canvas;
                this.font = font;
            }
            TextPaint.prototype.measureString = function (str) {
                return this.canvas.measureString(str, this.font);
            };
            return TextPaint;
        }());
        graphics.TextPaint = TextPaint;
    })(graphics = android.graphics || (android.graphics = {}));
})(android || (android = {}));
var android;
(function (android) {
    var util;
    (function (util) {
        var ArrayList = (function () {
            function ArrayList() {
                this._array = [];
            }
            ArrayList.prototype.add = function (value) {
                this._array.push(value);
            };
            ArrayList.prototype.remove = function (value) {
                if (typeof (value) === 'number') {
                    this._array.splice(value);
                }
                else {
                    var index = this._array.indexOf(value);
                    if (index > 0) {
                        this._array.splice(index, 1);
                    }
                }
            };
            ArrayList.prototype.clear = function () {
                this._array.length = 0;
            };
            ArrayList.prototype.size = function () {
                return this._array.length;
            };
            ArrayList.prototype.get = function (index) {
                return this._array[index];
            };
            return ArrayList;
        }());
        util.ArrayList = ArrayList;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
var android;
(function (android) {
    var util;
    (function (util) {
        var Message = (function () {
            function Message(what) {
                this.what = 0;
                this.what = what;
            }
            Message.obtain = function (what) {
                return new Message(what);
            };
            return Message;
        }());
        util.Message = Message;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
/// <reference path="Message.ts" />
/// <reference path="Log.ts" />
var android;
(function (android) {
    var util;
    (function (util) {
        var Handler = (function () {
            function Handler() {
                this._hanlderMap = {};
            }
            Handler.prototype.handleMessage = function (msg) {
                // do nothing   
            };
            Handler.prototype.sendMessage = function (msg) {
                return this.sendMessageDelayed(msg, 0);
            };
            Handler.prototype.sendMessageDelayed = function (msg, delay) {
                // Log.d('sendMessageDelayed delay = ' + delay + "   now =" + Date.now());
                return this.sendMessageAtTime(msg, Date.now() + delay);
            };
            Handler.prototype.sendMessageAtTime = function (msg, uptimeMillis) {
                var self = this;
                this._hanlderMap[msg.what] = setTimeout(function () {
                    self.handleMessage(msg);
                }, uptimeMillis - Date.now());
                return true;
            };
            Handler.prototype.removeMessages = function (what) {
                clearTimeout(this._hanlderMap[what]);
            };
            Handler.prototype.obtainMessage = function (what) {
                return util.Message.obtain(what);
            };
            return Handler;
        }());
        util.Handler = Handler;
    })(util = android.util || (android.util = {}));
})(android || (android = {}));
var android;
(function (android) {
    var widget;
    (function (widget) {
        var View = android.view.View;
        var MeasureSpec = android.view.MeasureSpec;
        var ScaleType;
        (function (ScaleType) {
            ScaleType[ScaleType["MATRIX"] = 0] = "MATRIX";
            ScaleType[ScaleType["FIT_XY"] = 1] = "FIT_XY";
            ScaleType[ScaleType["FIT_START"] = 2] = "FIT_START";
            ScaleType[ScaleType["FIT_CENTER"] = 3] = "FIT_CENTER";
            ScaleType[ScaleType["FIT_END"] = 4] = "FIT_END";
            ScaleType[ScaleType["CENTER"] = 5] = "CENTER";
            ScaleType[ScaleType["CENTER_CROP"] = 6] = "CENTER_CROP";
            ScaleType[ScaleType["CENTER_INSIDE"] = 7] = "CENTER_INSIDE";
        })(ScaleType = widget.ScaleType || (widget.ScaleType = {}));
        var ImageView = (function (_super) {
            __extends(ImageView, _super);
            function ImageView() {
                return _super.apply(this, arguments) || this;
            }
            ImageView.prototype.onMeasure = function (width, height, canvas) {
                this.setMeasuredDimension(new MeasureSpec(), new MeasureSpec());
                return null;
            };
            ImageView.prototype.onDraw = function (canvas) {
            };
            return ImageView;
        }(View));
        widget.ImageView = ImageView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Gravity = android.graphics.Gravity;
        var ViewGroup = android.view.ViewGroup;
        var Point = android.graphics.Point;
        var MeasureSpec = android.view.MeasureSpec;
        var Orientation = android.graphics.Orientation;
        var LayoutParams = android.view.LayoutParams;
        var LinearLayout = (function (_super) {
            __extends(LinearLayout, _super);
            function LinearLayout() {
                var _this = _super.apply(this, arguments) || this;
                _this._orientation = Orientation.Horizontal;
                return _this;
            }
            LinearLayout.prototype.setOrientation = function (orientation) {
                this._orientation = orientation;
            };
            LinearLayout.prototype.getOrientation = function () {
                return this._orientation;
            };
            LinearLayout.prototype.onMeasure = function (width, height, canvas) {
                if (this._orientation === Orientation.Horizontal) {
                    return this.measureHorizontal(width, height, canvas);
                }
                else {
                    return this.measureVertical(width, height, canvas);
                }
            };
            LinearLayout.prototype.measureHorizontal = function (width, height, canvas) {
                var size;
                for (var i = 0; i < this.children.length; ++i) {
                    var item = this.children[i];
                    var lp = item.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    if (lp.heightMode === LayoutParams.MATCH_PARENT) {
                        h = height.value;
                    }
                    if (lp.widthMode === LayoutParams.MATCH_PARENT) {
                        w = width.value;
                    }
                    var s = item.onMeasure(new MeasureSpec(w, lp.widthMode), new MeasureSpec(h, lp.heightMode), canvas);
                    if (size) {
                        size.width += s.width;
                        if (size.height < s.height) {
                            size.height = s.height;
                        }
                    }
                    else {
                        size = s.clone();
                    }
                }
                // if (size.width > width.value) {
                //     size.width = width.value;
                // }
                // if (size.height > height.value) {
                //     size.height = height.value;
                // }
                if (this.layoutParams.widthMode === LayoutParams.EXACTLY) {
                    size.width = this.layoutParams.width;
                }
                else if (this.layoutParams.widthMode === LayoutParams.MATCH_PARENT) {
                    size.width = width.getMeasureValue();
                }
                if (this.layoutParams.heightMode === LayoutParams.EXACTLY) {
                    size.height = this.layoutParams.height;
                }
                else if (this.layoutParams.heightMode === LayoutParams.MATCH_PARENT) {
                    size.height = height.getMeasureValue();
                }
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            LinearLayout.prototype.measureVertical = function (width, height, canvas) {
                var size;
                for (var i = 0; i < this.children.length; ++i) {
                    var item = this.children[i];
                    var lp = item.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    if (lp.heightMode === LayoutParams.MATCH_PARENT) {
                        h = height.value;
                    }
                    if (lp.widthMode === LayoutParams.MATCH_PARENT) {
                        w = width.value;
                    }
                    var s = item.onMeasure(new MeasureSpec(w, lp.widthMode), new MeasureSpec(h, lp.heightMode), canvas);
                    if (size) {
                        size.height += s.height;
                        if (size.width < s.width) {
                            size.width = s.width;
                        }
                    }
                    else {
                        size = s.clone();
                    }
                }
                if (size.width > width.value) {
                    size.width = width.value;
                }
                if (size.height > height.value) {
                    size.height = height.value;
                }
                if (this.layoutParams.widthMode === LayoutParams.EXACTLY) {
                    size.width = this.layoutParams.width;
                }
                else if (this.layoutParams.widthMode === LayoutParams.MATCH_PARENT) {
                    size.width = width.getMeasureValue();
                }
                if (this.layoutParams.heightMode === LayoutParams.EXACTLY) {
                    size.height = this.layoutParams.height;
                }
                else if (this.layoutParams.heightMode === LayoutParams.MATCH_PARENT) {
                    size.height = height.getMeasureValue();
                }
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            LinearLayout.prototype.onLayout = function (l, t, r, b, canvas) {
                this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                var innerrect = this.layoutInfo.innerrect;
                if (this._orientation === Orientation.Horizontal) {
                    this.layoutHorizontal(innerrect.left, innerrect.top, innerrect.right, innerrect.bottom, canvas);
                }
                else {
                    this.layoutVertical(innerrect.left, innerrect.top, innerrect.right, innerrect.bottom, canvas);
                }
            };
            LinearLayout.prototype.layoutHorizontal = function (l, t, r, b, canvas) {
                var viewItem;
                var m;
                var startpoint = new Point(l, t);
                var length = this.children.length;
                var childWidth = 0;
                for (var i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    childWidth += viewItem.width + (m.marginLeft + m.marginRight);
                }
                viewItem = null;
                m = null;
                var startOffset = 0;
                if (childWidth < (r - l)) {
                    startOffset = ((r - l) - childWidth) / 2;
                }
                for (i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    switch (viewItem.gravity) {
                        case Gravity.Left:
                        case Gravity.Auto:
                            break;
                        case Gravity.Right:
                            break;
                        case Gravity.Top:
                            startpoint.y = t;
                            break;
                        case Gravity.Bottom:
                            startpoint.y = b - viewItem.height - m.marginBottom;
                            break;
                        case Gravity.Center:
                            startpoint.y = t + ((b - t - viewItem.height) > 0 ? b - t - viewItem.height : 0) / 2;
                            break;
                    }
                    startpoint.offset(m.marginLeft > 0 ? m.marginLeft : 0, m.marginTop > 0 ? m.marginTop : 0);
                    viewItem.onLayout(startpoint.x, startpoint.y, startpoint.x + viewItem.width, startpoint.y + viewItem.height, canvas);
                    startpoint.offset(viewItem.width + (m.marginRight > 0 ? m.marginRight : 0), 0);
                }
            };
            LinearLayout.prototype.layoutVertical = function (l, t, r, b, canvas) {
                var viewItem;
                var m;
                var startpoint = new Point(l, t);
                var length = this.children.length;
                var childHeight = 0;
                for (var i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    childHeight += viewItem.height + (m.marginTop + m.marginBottom);
                }
                viewItem = null;
                m = null;
                var startOffset = 0;
                if (childHeight < (b - t)) {
                    startOffset = ((b - t) - childHeight) / 2;
                }
                for (i = 0; i < length; ++i) {
                    viewItem = this.children[i];
                    m = viewItem.layoutParams.margin;
                    switch (viewItem.gravity) {
                        case Gravity.Left:
                        case Gravity.Auto:
                            startpoint.x = l;
                            break;
                        case Gravity.Right:
                            startpoint.x = r - viewItem.width - m.marginRight;
                            break;
                        case Gravity.Top:
                            // startpoint.y = t;
                            break;
                        case Gravity.Bottom:
                            // startpoint.y = b-viewItem.height-m.marginBottom;
                            break;
                        case Gravity.Center:
                            // startpoint.y = t+((b-t-viewItem.height)>0?b-t-viewItem.height:0)/2;
                            startpoint.x = l + ((r - l - viewItem.width) > 0 ? r - l - viewItem.width : 0) / 2;
                            break;
                    }
                    startpoint.offset(m.marginLeft > 0 ? m.marginLeft : 0, m.marginTop > 0 ? m.marginTop : 0);
                    viewItem.onLayout(startpoint.x, startpoint.y, startpoint.x + viewItem.width, startpoint.y + viewItem.height, canvas);
                    // startpoint.translate(viewItem.width + (m.marginRight>0? m.marginRight:0),0);
                    startpoint.offset(0, viewItem.height + (m.marginBottom > 0 ? m.marginBottom : 0));
                }
            };
            return LinearLayout;
        }(ViewGroup));
        widget.LinearLayout = LinearLayout;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="../view/implemention/ViewGroup.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var ViewGroup = android.view.ViewGroup;
        var ListView = (function (_super) {
            __extends(ListView, _super);
            function ListView() {
                return _super.apply(this, arguments) || this;
            }
            return ListView;
        }(ViewGroup));
        widget.ListView = ListView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Size = android.graphics.Size;
        var View = android.view.View;
        var MeasureSpec = android.view.MeasureSpec;
        var Font = android.graphics.Font;
        var LayoutInfo = android.view.LayoutInfo;
        var LayoutParams = android.view.LayoutParams;
        var Ellipsize;
        (function (Ellipsize) {
        })(Ellipsize = widget.Ellipsize || (widget.Ellipsize = {}));
        var TextView = (function (_super) {
            __extends(TextView, _super);
            function TextView() {
                return _super.apply(this, arguments) || this;
            }
            TextView.prototype.onDraw = function (canvas) {
                _super.prototype.onDraw.call(this, canvas);
                canvas.drawText(this.text, this.layoutInfo.innerrect.startPoint, this.font);
            };
            TextView.prototype.setText = function (text) {
                this.text = text;
                this.invalidate(false);
            };
            TextView.prototype.setFont = function (font) {
                this.font = font;
            };
            Object.defineProperty(TextView.prototype, "ellipsize", {
                get: function () {
                    return this._ellipsize;
                },
                set: function (ellipsize) {
                    this._ellipsize = ellipsize;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextView.prototype, "maxWidth", {
                get: function () {
                    return this._maxWidth;
                },
                set: function (maxWidth) {
                    this._maxWidth = maxWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextView.prototype, "linespace", {
                get: function () {
                    return this._linespace;
                },
                set: function (linespace) {
                    this._linespace = linespace;
                },
                enumerable: true,
                configurable: true
            });
            // private _measureString(width:number):Size{
            //     return
            // }
            TextView.prototype.onMeasure = function (width, height, canvas) {
                if (!this.font) {
                    this.font = new Font(16, "", 'white');
                }
                this._layoutInfo = new LayoutInfo(0, 0, 0, 0, this.padding, 0);
                var w = this.layoutParams.width;
                var h = this.layoutParams.height;
                var size = new Size(w, h);
                var widthmode = this.layoutParams.widthMode;
                var heightmode = this.layoutParams.heightMode;
                var textsize = canvas.measureString(this.text, this.font);
                if (widthmode === LayoutParams.MATCH_PARENT) {
                    size.width = width.value;
                }
                else if (widthmode === LayoutParams.WRAP_CONTENT) {
                    size.width = textsize.width > this._maxWidth ? this._maxWidth : textsize.width;
                }
                if (heightmode === LayoutParams.MATCH_PARENT) {
                    size.height = height.value;
                }
                else if (heightmode === LayoutParams.WRAP_CONTENT) {
                    size.height = textsize.height;
                }
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            return TextView;
        }(View));
        widget.TextView = TextView;
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
/// <reference path="../database/DataSetObservable.ts" />
/// <reference path="../adapter/ViewPagerAdapter.ts" />
/// <reference path="../util/ArrayList.ts" />
/// <reference path="../util/Handler.ts" />
/// <reference path="../device/Device.ts" />
var android;
(function (android) {
    var widget;
    (function (widget) {
        var Size = android.graphics.Size;
        var ViewGroup = android.view.ViewGroup;
        var MeasureSpec = android.view.MeasureSpec;
        var LayoutParams = android.view.LayoutParams;
        var ArrayList = android.util.ArrayList;
        var DataSetObserver = android.database.DataSetObserver;
        var Handler = android.util.Handler;
        var Log = android.util.Log;
        var MotionEvent = android.view.event.MotionEvent;
        var Device = android.device.Device;
        var TAG = "ScaleViewPager";
        var ANIMATION_FRAME_DURATION = 1000 / 80;
        var MIN_SPEED = 10.0;
        var MIN_TOUCH = 12;
        var MOVE_LEFT = 10001;
        var MOVE_RIGHT = 10002;
        var MOVE_BACK = 10003;
        var SCALE_CONSTANT = 100;
        var STATE_MOVE_LEFT = 11001;
        var STATE_MOVE_RIGHT = 11002;
        var ViewPager = (function (_super) {
            __extends(ViewPager, _super);
            function ViewPager(context) {
                var _this = _super.call(this, context) || this;
                _this.mPosition = 0;
                _this.mViewStack = new ArrayList();
                _this.mIndex = 0;
                _this.mSize = 0;
                _this.mAnimationState = 0;
                _this.mScale = 0;
                _this.mIsScaled = false;
                _this.mMin_speed = MIN_SPEED;
                _this.min_touch = MIN_TOUCH;
                _this.mLastAnimationTime = 0;
                _this.mCurrentAnimationTime = 0;
                _this.mSpeed = 130;
                _this.mAnimationEnd = true;
                _this.mCenterX = 0;
                _this.mCenterY = 0;
                _this.direction = 1;
                _this.init();
                return _this;
            }
            ViewPager.prototype.init = function () {
                var _this = this;
                var context = this.getContext();
                this.mMin_speed = MIN_SPEED * Device.density;
                this.mLayoutParams = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
                this.min_touch = 3;
                this.mHandler = new Handler();
                this.mHandler.handleMessage = function (msg) {
                    switch (msg.what) {
                        case MOVE_LEFT:
                            _this.doLeftOrBounceAnimation();
                            break;
                        case MOVE_RIGHT:
                            _this.doRightOrBounceAnimation();
                            break;
                    }
                };
            };
            ViewPager.prototype.setAreaTouchListener = function (l) {
                this.mAreaTouchListener = l;
            };
            ViewPager.prototype.onInterceptTouchEvent = function (evnt) {
                var action = evnt.action;
                var x = evnt.x;
                var y = evnt.y;
                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                        this.oldx = x;
                        this.oldy = y;
                        this.downX = x;
                        if (this.mAreaTouchListener) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    case MotionEvent.ACTION_MOVE:
                        if (y - this.oldy != 0) {
                            if (Math.abs(x - this.oldx) / Math.abs(y - this.oldy) > 2 && Math.abs(x - this.downX) > this.min_touch) {
                                return true;
                            }
                            else {
                                return false;
                            }
                        }
                        else {
                            return false;
                        }
                }
                return true;
            };
            ViewPager.prototype.onTouchEvent = function (event) {
                if (!this.mAnimationEnd) {
                    return true;
                }
                var action = event.action;
                var x = event.x;
                var y = event.y;
                if (this.mCurrentView == null)
                    return false;
                switch (action) {
                    case MotionEvent.ACTION_MOVE: {
                        Log.d("event", "move ");
                        this.direction = x - this.oldx > 0 ? 1 : -1;
                        this.move(x - this.oldx);
                        this.oldx = x;
                        break;
                    }
                    case MotionEvent.ACTION_UP:
                    case MotionEvent.ACTION_CANCEL:
                        {
                            this.oldx = -1;
                            this.oldy = -1;
                            if (Math.abs(this.downX - x) == 0) {
                                if (x >= this.width / 4 * 3) {
                                    if (this.mAreaTouchListener != null) {
                                        this.mAreaTouchListener.onLeftTouch();
                                    }
                                }
                                else if (x <= this.width / 4) {
                                    if (this.mAreaTouchListener != null) {
                                        this.mAreaTouchListener.onRightTouch();
                                    }
                                }
                                else {
                                    if (this.mAreaTouchListener != null) {
                                        this.mAreaTouchListener.onMiddleTouch();
                                    }
                                }
                            }
                            else {
                                this.prepareToAnimation(this.direction * this.mMin_speed);
                            }
                            break;
                        }
                }
                return true;
            };
            ViewPager.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec, canvas) {
                var width = widthMeasureSpec.getMeasureValue();
                var height = heightMeasureSpec.getMeasureValue();
                this.mCenterX = width / 2;
                this.mCenterY = height / 2;
                for (var i = 0; i < this.mViewStack.size(); ++i) {
                    var child = this.mViewStack.get(i).view;
                    var lp = child.layoutParams;
                    var w = lp.width;
                    var h = lp.height;
                    if (lp.heightMode === LayoutParams.MATCH_PARENT) {
                        h = height;
                    }
                    if (lp.widthMode === LayoutParams.MATCH_PARENT) {
                        w = width;
                    }
                    child.onMeasure(new MeasureSpec(w, lp.widthMode), new MeasureSpec(h, lp.heightMode), canvas);
                }
                var size = new Size(width, height);
                this.setMeasuredDimension(new MeasureSpec(size.width, LayoutParams.EXACTLY), new MeasureSpec(size.height, LayoutParams.EXACTLY));
                return size;
            };
            ViewPager.prototype.onLayout = function (l, t, r, b, canvas) {
                this.layoutInfo.reset(l, t, r, b, this.padding, 0);
                var innerrect = this.layoutInfo.innerrect;
                var width = r - l;
                var height = b - t;
                for (var i = 0; i < this.mViewStack.size(); ++i) {
                    var view_3 = this.mViewStack.get(i).view;
                    var pos = this.mViewStack.get(i).index;
                    var gap = pos - this.mIndex;
                    var viewleft = view_3.padding.leftPadding + (width - view_3.width) / 2;
                    var viewtop = view_3.padding.topPadding + (height - view_3.height) / 2;
                    gap = gap > 0 ? 0 : gap;
                    view_3.onLayout(viewleft + gap * width, viewtop, viewleft + gap * width + view_3.width, viewtop + view_3.height, canvas);
                }
            };
            ViewPager.prototype.dispatchDraw = function (canvas) {
                // super.dispatchDraw(canvas);
                // Log.d('dispatchDraw ' + this.mPosition);
                if (this.mAnimationState === STATE_MOVE_LEFT) {
                    this.drawChild(canvas, this.mNextView);
                    canvas.save();
                    canvas.translate(this.mPosition, 0);
                    this.drawChild(canvas, this.mCurrentView);
                    canvas.restore();
                }
                else if (this.mAnimationState === STATE_MOVE_RIGHT) {
                    this.drawChild(canvas, this.mCurrentView);
                    canvas.save();
                    canvas.translate(this.mPosition, 0);
                    this.drawChild(canvas, this.mPreView);
                    canvas.restore();
                }
                else {
                    this.drawChild(canvas, this.mCurrentView);
                }
            };
            ViewPager.prototype.setAdapter = function (adapter) {
                this.mOldAdapter = this.mAdapter;
                this.mAdapter = adapter;
                if (this.mAdapter != null) {
                    this.mDataSetObserver = new DataSetObserver();
                    var self = this;
                    this.mDataSetObserver.onChanged = function () {
                        self.mSize = self.mAdapter.getCount();
                    };
                    this.mDataSetObserver.onInvalidated = function () {
                        self.invalidate(false);
                    };
                    this.mAdapter.registerDataSetObserver(this.mDataSetObserver);
                    this.mSize = adapter.getCount();
                    this.refreshNormal();
                }
            };
            ViewPager.prototype.setCurrentItem = function (index) {
                Log.d('setCurrentItem ' + index);
                this.mIndex = index;
                this.refreshNormal();
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.getCurrentItem = function () {
                return this.mIndex;
            };
            ViewPager.prototype.setPagerChangedListener = function (listen) {
                this.listener = listen;
            };
            ViewPager.prototype.refreshNormal = function () {
                if (this.mAdapter) {
                    if (this.mIndex >= 0 && this.mIndex < this.mAdapter.getCount()) {
                        this.preRemove();
                        this.preLoad(this.mIndex);
                        for (var i = 0; i < this.mViewStack.size(); ++i) {
                            var view_4 = this.mViewStack.get(i).view;
                            var index = this.mViewStack.get(i).index;
                            if (index === this.mIndex) {
                                this.mCurrentView = view_4;
                                this.addView(view_4, 1, this.mLayoutParams);
                            }
                            if (index === this.mIndex - 1) {
                                this.mPreView = view_4;
                                this.addView(view_4, 0, this.mLayoutParams);
                            }
                            if (index === this.mIndex + 1) {
                                this.mNextView = view_4;
                                this.addView(view_4, 1, this.mLayoutParams);
                            }
                        }
                    }
                    else if (this.mAdapter.getCount() === 0 && this.mIndex === 0) {
                        return;
                    }
                    else {
                        throw 'current index is ' + this.mIndex + ' size is ' + this.mAdapter.getCount();
                    }
                }
            };
            ViewPager.prototype.preRemove = function () {
                for (var i = 0; i < this.mViewStack.size(); ++i) {
                    var view_5 = this.mViewStack.get(i).view;
                    var position = this.mViewStack.get(i).index;
                    this.removeView(view_5);
                    this.mAdapter.destoryItem(position, this);
                }
            };
            ViewPager.prototype.preLoad = function (position) {
                if (this.mAdapter !== null) {
                    this.mViewStack.clear();
                    this.mViewStack.add(this.preLoadPreView(position));
                    this.mViewStack.add(this.loadView(position));
                    this.mViewStack.add(this.preLoadNextView(position));
                }
            };
            ViewPager.prototype.preLoadPreView = function (position) {
                var pos = position - 1;
                return this.loadView(pos);
            };
            ViewPager.prototype.preLoadNextView = function (position) {
                var pos = position + 1;
                return this.loadView(pos);
            };
            ViewPager.prototype.loadView = function (index) {
                if (this.mAdapter === null) {
                    throw 'Null point Exception adapter is null';
                }
                var pos = index;
                if (pos >= this.mSize) {
                    pos = 0;
                }
                if (pos < 0) {
                    pos += this.mSize;
                }
                var view = this.mAdapter.initItem(pos, this);
                return new ItemInfo(view, index, pos);
            };
            ViewPager.prototype.move = function (dis) {
                Log.d("move " + dis);
                if (this.mPosition === 0 && dis !== 0) {
                    this.pagerChanged(this.mIndex, dis > 0 ? this.mIndex + 1 : this.mIndex - 1);
                }
                this.mPosition += dis;
                if (this.mPosition >= 0) {
                    this.mAnimationState = STATE_MOVE_RIGHT;
                }
                if (this.mPosition < 0) {
                    this.mAnimationState = STATE_MOVE_LEFT;
                }
                var movedegreepreView = this.mPosition / this.width;
                var movedegree = this.mPosition * (this.mIndex + 1) / this.width * this.mAdapter.getCount();
                this.pagerMoving(movedegreepreView, movedegree);
                this.invalidate(false);
            };
            ViewPager.prototype.prepareToAnimation = function (speed) {
                var now = Date.now();
                this.mAnimationEnd = false;
                this.mLastAnimationTime = now;
                this.mCurrentAnimationTime = now;
                this.mSpeed = speed;
                if (this.mSpeed === 0) {
                    this.mSpeed = this.mMin_speed;
                }
                if (speed > 0) {
                    this.mSpeed = Math.abs(this.mSpeed);
                    this.doRightOrBounceAnimation();
                }
                else {
                    this.mSpeed = -1 * Math.abs(this.mSpeed);
                    this.doLeftOrBounceAnimation();
                }
            };
            ViewPager.prototype.flipLeft = function () {
                Log.d("flipLeft " + this.mAnimationEnd);
                if (!this.mAnimationEnd)
                    return;
                this.mPosition = this.mCurrentView.left;
                this.move(-1);
                var now = Date.now();
                this.mAnimationEnd = false;
                this.mLastAnimationTime = now;
                this.mCurrentAnimationTime = now;
                this.mSpeed = -this.mMin_speed;
                this.doLeftOrBounceAnimation();
            };
            ViewPager.prototype.flipRight = function () {
                Log.d("filpRight " + this.mAnimationEnd);
                if (!this.mAnimationEnd)
                    return;
                this.mPosition = this.mCurrentView.left;
                this.move(1);
                var now = Date.now();
                this.mAnimationEnd = false;
                this.mLastAnimationTime = now;
                this.mCurrentAnimationTime = now;
                this.mSpeed = this.mMin_speed;
                this.doRightOrBounceAnimation();
            };
            ViewPager.prototype.doRightOrBounceAnimation = function () {
                var now = Date.now();
                var t = 1;
                var s = this.mSpeed * t;
                if (this.mPosition > 0) {
                    if (this.mPosition === this.width) {
                        this.mHandler.removeMessages(MOVE_RIGHT);
                        this.endRightanimation();
                        return;
                    }
                    if (s + this.mPosition > this.width) {
                        s = this.width - this.mPosition;
                    }
                }
                else {
                    if (this.mPosition === 0) {
                        this.mHandler.removeMessages(MOVE_RIGHT);
                        this.endBounceanimtion();
                        return;
                    }
                    if (s + this.mPosition > 0) {
                        s = -this.mPosition;
                    }
                }
                this.move(s);
                this.mCurrentAnimationTime += ANIMATION_FRAME_DURATION;
                this.mHandler.removeMessages(MOVE_LEFT);
                this.mHandler.removeMessages(MOVE_RIGHT);
                this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(MOVE_RIGHT), ANIMATION_FRAME_DURATION);
            };
            ViewPager.prototype.doLeftOrBounceAnimation = function () {
                // Log.d(TAG, "doleftAnimation  ");
                var now = Date.now();
                var t = 1; //(now - mLastAnimationTime)/1000;
                var s = (this.mSpeed * t);
                if (this.mPosition < 0) {
                    if (this.mPosition + this.width == 0) {
                        this.mHandler.removeMessages(MOVE_LEFT);
                        this.endLeftAnimation();
                        return;
                    }
                    if (s + this.mPosition + this.width < 0) {
                        s = -(this.mPosition + this.width);
                    }
                }
                else {
                    if (this.mPosition == 0) {
                        this.mHandler.removeMessages(MOVE_LEFT);
                        this.endBounceanimtion();
                        return;
                    }
                    if (s + this.mPosition < 0) {
                        s = -this.mPosition;
                    }
                }
                this.move(s);
                this.mCurrentAnimationTime += ANIMATION_FRAME_DURATION;
                this.mHandler.removeMessages(MOVE_LEFT);
                this.mHandler.removeMessages(MOVE_RIGHT);
                this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(MOVE_LEFT), ANIMATION_FRAME_DURATION);
            };
            ViewPager.prototype.endBounceanimtion = function () {
                Log.d("endBounceanimtion  ");
                this.mAnimationEnd = true;
                this.mScale = 0;
                this.mPosition = 0;
                this.mAnimationState = 0;
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.endRightanimation = function () {
                Log.d("endRightanimation   ");
                var index = this.mIndex - 1;
                if (index < 0) {
                    index = this.mAdapter.getCount() + index;
                }
                this.mPosition = 0;
                this.mScale = 0;
                this.mAnimationState = 0;
                this.setCurrentItem(index);
                this.mAnimationEnd = true;
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.endLeftAnimation = function () {
                Log.d("endLeftAnimation   ");
                var index = this.mIndex + 1;
                this.mPosition = 0;
                this.mScale = 0;
                index = index % this.mAdapter.getCount();
                this.mAnimationState = 0;
                this.setCurrentItem(index);
                this.mAnimationEnd = true;
                this.pagerMovingEnd(this.mIndex);
            };
            ViewPager.prototype.pagerChanged = function (position, targetPosition) {
                if (this.listener != null) {
                    this.listener.onPagerChanged(position, targetPosition);
                }
            };
            ViewPager.prototype.pagerMoving = function (movedegreepreView, movedegree) {
                if (this.listener != null) {
                    this.listener.onPagerMoving(-1 * movedegreepreView, -1 * movedegree);
                }
            };
            ViewPager.prototype.pagerMovingEnd = function (position) {
                if (this.listener != null) {
                    this.listener.onPagerMovingEnd(position);
                }
            };
            return ViewPager;
        }(ViewGroup));
        widget.ViewPager = ViewPager;
        var ItemInfo = (function () {
            function ItemInfo(v, i, pos) {
                this.view = v;
                this.index = i;
                this.position = pos;
            }
            return ItemInfo;
        }());
    })(widget = android.widget || (android.widget = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var animation;
        (function (animation) {
            var AnimationType;
            (function (AnimationType) {
                AnimationType[AnimationType["Alpha"] = 0] = "Alpha";
                AnimationType[AnimationType["Translate"] = 1] = "Translate";
                AnimationType[AnimationType["Scale"] = 2] = "Scale";
                AnimationType[AnimationType["Rotate"] = 3] = "Rotate";
            })(AnimationType = animation.AnimationType || (animation.AnimationType = {}));
        })(animation = view.animation || (view.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view_6) {
        var animation;
        (function (animation) {
            var ScaleAnimation = (function (_super) {
                __extends(ScaleAnimation, _super);
                function ScaleAnimation() {
                    var _this = _super.call(this) || this;
                    _this.duration = 0;
                    return _this;
                }
                Object.defineProperty(ScaleAnimation.prototype, "isAniamtionEnd", {
                    get: function () {
                        return this.start + this.duration < Date.now();
                    },
                    enumerable: true,
                    configurable: true
                });
                ScaleAnimation.prototype.scale = function (now) {
                    console.log("ease " + ((now - this.start) / this.duration));
                    return this.ease.ease((now - this.start) / this.duration);
                };
                ScaleAnimation.prototype.applyTransformation = function (interpolatedTime, canvas, view) {
                    // canvas.moveto(view.left+view.width/2,view.top +view.height/2);
                    canvas.scale(this.from + (this.to - this.from) * interpolatedTime, this.from + (this.to - this.from) * interpolatedTime);
                };
                return ScaleAnimation;
            }(animation.Animation));
            animation.ScaleAnimation = ScaleAnimation;
        })(animation = view_6.animation || (view_6.animation = {}));
    })(view = android.view || (android.view = {}));
})(android || (android = {}));
var android;
(function (android) {
    var view;
    (function (view) {
        var RenderState = (function () {
            function RenderState(rect, index) {
                this.currentRect = rect;
                this.index = index;
            }
            return RenderState;
        }());
        view.RenderState = RenderState;
    })(view = android.view || (android.view = {}));
})(android || (android = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
